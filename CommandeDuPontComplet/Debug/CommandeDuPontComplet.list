
CommandeDuPontComplet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d5c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004ee4  08004ee4  00005ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f2c  08004f2c  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004f2c  08004f2c  00005f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f34  08004f34  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f34  08004f34  00005f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f38  08004f38  00005f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004f3c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  2000000c  08004f48  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08004f48  000061e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eff2  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf1  00000000  00000000  0001502e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00016d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b34  00000000  00000000  00017b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d59  00000000  00000000  00018694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102b9  00000000  00000000  0003e3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee93d  00000000  00000000  0004e6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013cfe3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c60  00000000  00000000  0013d028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00140c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ecc 	.word	0x08004ecc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004ecc 	.word	0x08004ecc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fdc2 	bl	8001080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f842 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fb66 	bl	8000bd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 fb34 	bl	8000b70 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000508:	f000 f88e 	bl	8000628 <MX_TIM1_Init>
  MX_TIM2_Init();
 800050c:	f000 f952 	bl	80007b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000510:	f000 f9f6 	bl	8000900 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000514:	f000 fa9c 	bl	8000a50 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000518:	2100      	movs	r1, #0
 800051a:	4816      	ldr	r0, [pc, #88]	@ (8000574 <main+0x80>)
 800051c:	f002 fe14 	bl	8003148 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000520:	2104      	movs	r1, #4
 8000522:	4814      	ldr	r0, [pc, #80]	@ (8000574 <main+0x80>)
 8000524:	f002 fca8 	bl	8002e78 <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000528:	2100      	movs	r1, #0
 800052a:	4813      	ldr	r0, [pc, #76]	@ (8000578 <main+0x84>)
 800052c:	f002 fe0c 	bl	8003148 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 8000530:	2104      	movs	r1, #4
 8000532:	4811      	ldr	r0, [pc, #68]	@ (8000578 <main+0x84>)
 8000534:	f002 fca0 	bl	8002e78 <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000538:	2100      	movs	r1, #0
 800053a:	4810      	ldr	r0, [pc, #64]	@ (800057c <main+0x88>)
 800053c:	f002 fe04 	bl	8003148 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000540:	2104      	movs	r1, #4
 8000542:	480e      	ldr	r0, [pc, #56]	@ (800057c <main+0x88>)
 8000544:	f002 fe00 	bl	8003148 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_1);
 8000548:	2100      	movs	r1, #0
 800054a:	480d      	ldr	r0, [pc, #52]	@ (8000580 <main+0x8c>)
 800054c:	f002 fc94 	bl	8002e78 <HAL_TIM_OC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,600);
 8000550:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <main+0x84>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000558:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,1200);
 800055a:	4b08      	ldr	r3, [pc, #32]	@ (800057c <main+0x88>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000562:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1800);
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <main+0x8c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 800056c:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,600);
 800056e:	bf00      	nop
 8000570:	e7ee      	b.n	8000550 <main+0x5c>
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028
 8000578:	20000074 	.word	0x20000074
 800057c:	200000c0 	.word	0x200000c0
 8000580:	2000010c 	.word	0x2000010c

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b096      	sub	sp, #88	@ 0x58
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2244      	movs	r2, #68	@ 0x44
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fc6d 	bl	8004e72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	463b      	mov	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005aa:	f001 f89b 	bl	80016e4 <HAL_PWREx_ControlVoltageScaling>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b4:	f000 fb72 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2310      	movs	r3, #16
 80005c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ca:	2302      	movs	r3, #2
 80005cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005d2:	230a      	movs	r3, #10
 80005d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 f8d2 	bl	8001790 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005f2:	f000 fb53 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2303      	movs	r3, #3
 80005fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	2104      	movs	r1, #4
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fc9a 	bl	8001f48 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061a:	f000 fb3f 	bl	8000c9c <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3758      	adds	r7, #88	@ 0x58
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09a      	sub	sp, #104	@ 0x68
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000648:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
 8000658:	615a      	str	r2, [r3, #20]
 800065a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	222c      	movs	r2, #44	@ 0x2c
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fc05 	bl	8004e72 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000668:	4b50      	ldr	r3, [pc, #320]	@ (80007ac <MX_TIM1_Init+0x184>)
 800066a:	4a51      	ldr	r2, [pc, #324]	@ (80007b0 <MX_TIM1_Init+0x188>)
 800066c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800066e:	4b4f      	ldr	r3, [pc, #316]	@ (80007ac <MX_TIM1_Init+0x184>)
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b4d      	ldr	r3, [pc, #308]	@ (80007ac <MX_TIM1_Init+0x184>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 800067a:	4b4c      	ldr	r3, [pc, #304]	@ (80007ac <MX_TIM1_Init+0x184>)
 800067c:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8000680:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000682:	4b4a      	ldr	r3, [pc, #296]	@ (80007ac <MX_TIM1_Init+0x184>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000688:	4b48      	ldr	r3, [pc, #288]	@ (80007ac <MX_TIM1_Init+0x184>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068e:	4b47      	ldr	r3, [pc, #284]	@ (80007ac <MX_TIM1_Init+0x184>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000694:	4845      	ldr	r0, [pc, #276]	@ (80007ac <MX_TIM1_Init+0x184>)
 8000696:	f002 fb37 	bl	8002d08 <HAL_TIM_Base_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006a0:	f000 fafc 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006ae:	4619      	mov	r1, r3
 80006b0:	483e      	ldr	r0, [pc, #248]	@ (80007ac <MX_TIM1_Init+0x184>)
 80006b2:	f002 ffdd 	bl	8003670 <HAL_TIM_ConfigClockSource>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006bc:	f000 faee 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006c0:	483a      	ldr	r0, [pc, #232]	@ (80007ac <MX_TIM1_Init+0x184>)
 80006c2:	f002 fcdf 	bl	8003084 <HAL_TIM_PWM_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006cc:	f000 fae6 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80006d0:	4836      	ldr	r0, [pc, #216]	@ (80007ac <MX_TIM1_Init+0x184>)
 80006d2:	f002 fb70 	bl	8002db6 <HAL_TIM_OC_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80006dc:	f000 fade 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80006e0:	2350      	movs	r3, #80	@ 0x50
 80006e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006f0:	4619      	mov	r1, r3
 80006f2:	482e      	ldr	r0, [pc, #184]	@ (80007ac <MX_TIM1_Init+0x184>)
 80006f4:	f003 fd96 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80006fe:	f000 facd 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000702:	2360      	movs	r3, #96	@ 0x60
 8000704:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1800;
 8000706:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800070a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800070c:	2300      	movs	r3, #0
 800070e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800071c:	2300      	movs	r3, #0
 800071e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000720:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000724:	2200      	movs	r2, #0
 8000726:	4619      	mov	r1, r3
 8000728:	4820      	ldr	r0, [pc, #128]	@ (80007ac <MX_TIM1_Init+0x184>)
 800072a:	f002 fe8d 	bl	8003448 <HAL_TIM_PWM_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000734:	f000 fab2 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000740:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000744:	2204      	movs	r2, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4818      	ldr	r0, [pc, #96]	@ (80007ac <MX_TIM1_Init+0x184>)
 800074a:	f002 fe03 	bl	8003354 <HAL_TIM_OC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000754:	f000 faa2 	bl	8000c9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800076c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000770:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800077a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	4619      	mov	r1, r3
 800078c:	4807      	ldr	r0, [pc, #28]	@ (80007ac <MX_TIM1_Init+0x184>)
 800078e:	f003 fdd1 	bl	8004334 <HAL_TIMEx_ConfigBreakDeadTime>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000798:	f000 fa80 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800079c:	4803      	ldr	r0, [pc, #12]	@ (80007ac <MX_TIM1_Init+0x184>)
 800079e:	f000 fb01 	bl	8000da4 <HAL_TIM_MspPostInit>

}
 80007a2:	bf00      	nop
 80007a4:	3768      	adds	r7, #104	@ 0x68
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000028 	.word	0x20000028
 80007b0:	40012c00 	.word	0x40012c00

080007b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	@ 0x50
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
 80007f2:	615a      	str	r2, [r3, #20]
 80007f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f6:	4b41      	ldr	r3, [pc, #260]	@ (80008fc <MX_TIM2_Init+0x148>)
 80007f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007fe:	4b3f      	ldr	r3, [pc, #252]	@ (80008fc <MX_TIM2_Init+0x148>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b3d      	ldr	r3, [pc, #244]	@ (80008fc <MX_TIM2_Init+0x148>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 800080a:	4b3c      	ldr	r3, [pc, #240]	@ (80008fc <MX_TIM2_Init+0x148>)
 800080c:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8000810:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b3a      	ldr	r3, [pc, #232]	@ (80008fc <MX_TIM2_Init+0x148>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b38      	ldr	r3, [pc, #224]	@ (80008fc <MX_TIM2_Init+0x148>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081e:	4837      	ldr	r0, [pc, #220]	@ (80008fc <MX_TIM2_Init+0x148>)
 8000820:	f002 fa72 	bl	8002d08 <HAL_TIM_Base_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800082a:	f000 fa37 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000832:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000834:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000838:	4619      	mov	r1, r3
 800083a:	4830      	ldr	r0, [pc, #192]	@ (80008fc <MX_TIM2_Init+0x148>)
 800083c:	f002 ff18 	bl	8003670 <HAL_TIM_ConfigClockSource>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000846:	f000 fa29 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800084a:	482c      	ldr	r0, [pc, #176]	@ (80008fc <MX_TIM2_Init+0x148>)
 800084c:	f002 fc1a 	bl	8003084 <HAL_TIM_PWM_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8000856:	f000 fa21 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800085a:	4828      	ldr	r0, [pc, #160]	@ (80008fc <MX_TIM2_Init+0x148>)
 800085c:	f002 faab 	bl	8002db6 <HAL_TIM_OC_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000866:	f000 fa19 	bl	8000c9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800086a:	2306      	movs	r3, #6
 800086c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800086e:	2300      	movs	r3, #0
 8000870:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000872:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000876:	4619      	mov	r1, r3
 8000878:	4820      	ldr	r0, [pc, #128]	@ (80008fc <MX_TIM2_Init+0x148>)
 800087a:	f002 ffc2 	bl	8003802 <HAL_TIM_SlaveConfigSynchro>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000884:	f000 fa0a 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000888:	2350      	movs	r3, #80	@ 0x50
 800088a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	4619      	mov	r1, r3
 8000896:	4819      	ldr	r0, [pc, #100]	@ (80008fc <MX_TIM2_Init+0x148>)
 8000898:	f003 fcc4 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80008a2:	f000 f9fb 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a6:	2360      	movs	r3, #96	@ 0x60
 80008a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1800;
 80008aa:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	4619      	mov	r1, r3
 80008be:	480f      	ldr	r0, [pc, #60]	@ (80008fc <MX_TIM2_Init+0x148>)
 80008c0:	f002 fdc2 	bl	8003448 <HAL_TIM_PWM_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80008ca:	f000 f9e7 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80008ce:	2310      	movs	r3, #16
 80008d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2204      	movs	r2, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	4807      	ldr	r0, [pc, #28]	@ (80008fc <MX_TIM2_Init+0x148>)
 80008de:	f002 fd39 	bl	8003354 <HAL_TIM_OC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x138>
  {
    Error_Handler();
 80008e8:	f000 f9d8 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008ec:	4803      	ldr	r0, [pc, #12]	@ (80008fc <MX_TIM2_Init+0x148>)
 80008ee:	f000 fa59 	bl	8000da4 <HAL_TIM_MspPostInit>

}
 80008f2:	bf00      	nop
 80008f4:	3750      	adds	r7, #80	@ 0x50
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000074 	.word	0x20000074

08000900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	@ 0x50
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000914:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000924:	f107 0320 	add.w	r3, r7, #32
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
 800093e:	615a      	str	r2, [r3, #20]
 8000940:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000942:	4b41      	ldr	r3, [pc, #260]	@ (8000a48 <MX_TIM3_Init+0x148>)
 8000944:	4a41      	ldr	r2, [pc, #260]	@ (8000a4c <MX_TIM3_Init+0x14c>)
 8000946:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000948:	4b3f      	ldr	r3, [pc, #252]	@ (8000a48 <MX_TIM3_Init+0x148>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a48 <MX_TIM3_Init+0x148>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3599;
 8000954:	4b3c      	ldr	r3, [pc, #240]	@ (8000a48 <MX_TIM3_Init+0x148>)
 8000956:	f640 620f 	movw	r2, #3599	@ 0xe0f
 800095a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a48 <MX_TIM3_Init+0x148>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b39      	ldr	r3, [pc, #228]	@ (8000a48 <MX_TIM3_Init+0x148>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000968:	4837      	ldr	r0, [pc, #220]	@ (8000a48 <MX_TIM3_Init+0x148>)
 800096a:	f002 f9cd 	bl	8002d08 <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000974:	f000 f992 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097c:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800097e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000982:	4619      	mov	r1, r3
 8000984:	4830      	ldr	r0, [pc, #192]	@ (8000a48 <MX_TIM3_Init+0x148>)
 8000986:	f002 fe73 	bl	8003670 <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000990:	f000 f984 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000994:	482c      	ldr	r0, [pc, #176]	@ (8000a48 <MX_TIM3_Init+0x148>)
 8000996:	f002 fb75 	bl	8003084 <HAL_TIM_PWM_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 80009a0:	f000 f97c 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80009a4:	4828      	ldr	r0, [pc, #160]	@ (8000a48 <MX_TIM3_Init+0x148>)
 80009a6:	f002 fa06 	bl	8002db6 <HAL_TIM_OC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80009b0:	f000 f974 	bl	8000c9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80009b4:	2306      	movs	r3, #6
 80009b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80009b8:	2310      	movs	r3, #16
 80009ba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80009bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009c0:	4619      	mov	r1, r3
 80009c2:	4821      	ldr	r0, [pc, #132]	@ (8000a48 <MX_TIM3_Init+0x148>)
 80009c4:	f002 ff1d 	bl	8003802 <HAL_TIM_SlaveConfigSynchro>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80009ce:	f000 f965 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80009d2:	2350      	movs	r3, #80	@ 0x50
 80009d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	4619      	mov	r1, r3
 80009e0:	4819      	ldr	r0, [pc, #100]	@ (8000a48 <MX_TIM3_Init+0x148>)
 80009e2:	f003 fc1f 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80009ec:	f000 f956 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f0:	2360      	movs	r3, #96	@ 0x60
 80009f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1800;
 80009f4:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80009f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	4619      	mov	r1, r3
 8000a08:	480f      	ldr	r0, [pc, #60]	@ (8000a48 <MX_TIM3_Init+0x148>)
 8000a0a:	f002 fd1d 	bl	8003448 <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000a14:	f000 f942 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000a18:	2310      	movs	r3, #16
 8000a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 300;
 8000a1c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2204      	movs	r2, #4
 8000a26:	4619      	mov	r1, r3
 8000a28:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <MX_TIM3_Init+0x148>)
 8000a2a:	f002 fc93 	bl	8003354 <HAL_TIM_OC_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM3_Init+0x138>
  {
    Error_Handler();
 8000a34:	f000 f932 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <MX_TIM3_Init+0x148>)
 8000a3a:	f000 f9b3 	bl	8000da4 <HAL_TIM_MspPostInit>

}
 8000a3e:	bf00      	nop
 8000a40:	3750      	adds	r7, #80	@ 0x50
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000c0 	.word	0x200000c0
 8000a4c:	40000400 	.word	0x40000400

08000a50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b094      	sub	sp, #80	@ 0x50
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	f107 0320 	add.w	r3, r7, #32
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	615a      	str	r2, [r3, #20]
 8000a90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a92:	4b35      	ldr	r3, [pc, #212]	@ (8000b68 <MX_TIM4_Init+0x118>)
 8000a94:	4a35      	ldr	r2, [pc, #212]	@ (8000b6c <MX_TIM4_Init+0x11c>)
 8000a96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a98:	4b33      	ldr	r3, [pc, #204]	@ (8000b68 <MX_TIM4_Init+0x118>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b32      	ldr	r3, [pc, #200]	@ (8000b68 <MX_TIM4_Init+0x118>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3599;
 8000aa4:	4b30      	ldr	r3, [pc, #192]	@ (8000b68 <MX_TIM4_Init+0x118>)
 8000aa6:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8000aaa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b2e      	ldr	r3, [pc, #184]	@ (8000b68 <MX_TIM4_Init+0x118>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b68 <MX_TIM4_Init+0x118>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ab8:	482b      	ldr	r0, [pc, #172]	@ (8000b68 <MX_TIM4_Init+0x118>)
 8000aba:	f002 f925 	bl	8002d08 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000ac4:	f000 f8ea 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000acc:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ace:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4824      	ldr	r0, [pc, #144]	@ (8000b68 <MX_TIM4_Init+0x118>)
 8000ad6:	f002 fdcb 	bl	8003670 <HAL_TIM_ConfigClockSource>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000ae0:	f000 f8dc 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ae4:	4820      	ldr	r0, [pc, #128]	@ (8000b68 <MX_TIM4_Init+0x118>)
 8000ae6:	f002 facd 	bl	8003084 <HAL_TIM_PWM_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 8000af0:	f000 f8d4 	bl	8000c9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000af4:	2306      	movs	r3, #6
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8000af8:	2320      	movs	r3, #32
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000afc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b00:	4619      	mov	r1, r3
 8000b02:	4819      	ldr	r0, [pc, #100]	@ (8000b68 <MX_TIM4_Init+0x118>)
 8000b04:	f002 fe7d 	bl	8003802 <HAL_TIM_SlaveConfigSynchro>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8000b0e:	f000 f8c5 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b1a:	f107 0320 	add.w	r3, r7, #32
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4811      	ldr	r0, [pc, #68]	@ (8000b68 <MX_TIM4_Init+0x118>)
 8000b22:	f003 fb7f 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000b2c:	f000 f8b6 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b30:	2360      	movs	r3, #96	@ 0x60
 8000b32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1800;
 8000b34:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8000b38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	4619      	mov	r1, r3
 8000b48:	4807      	ldr	r0, [pc, #28]	@ (8000b68 <MX_TIM4_Init+0x118>)
 8000b4a:	f002 fc7d 	bl	8003448 <HAL_TIM_PWM_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 8000b54:	f000 f8a2 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b58:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <MX_TIM4_Init+0x118>)
 8000b5a:	f000 f923 	bl	8000da4 <HAL_TIM_MspPostInit>

}
 8000b5e:	bf00      	nop
 8000b60:	3750      	adds	r7, #80	@ 0x50
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000010c 	.word	0x2000010c
 8000b6c:	40000800 	.word	0x40000800

08000b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b74:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000b76:	4a15      	ldr	r2, [pc, #84]	@ (8000bcc <MX_USART2_UART_Init+0x5c>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000bb4:	f003 fc3c 	bl	8004430 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bbe:	f000 f86d 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000158 	.word	0x20000158
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c94 <MX_GPIO_Init+0xc4>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	4a2a      	ldr	r2, [pc, #168]	@ (8000c94 <MX_GPIO_Init+0xc4>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf2:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <MX_GPIO_Init+0xc4>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfe:	4b25      	ldr	r3, [pc, #148]	@ (8000c94 <MX_GPIO_Init+0xc4>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	4a24      	ldr	r2, [pc, #144]	@ (8000c94 <MX_GPIO_Init+0xc4>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0a:	4b22      	ldr	r3, [pc, #136]	@ (8000c94 <MX_GPIO_Init+0xc4>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <MX_GPIO_Init+0xc4>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c94 <MX_GPIO_Init+0xc4>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c22:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <MX_GPIO_Init+0xc4>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <MX_GPIO_Init+0xc4>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	4a18      	ldr	r2, [pc, #96]	@ (8000c94 <MX_GPIO_Init+0xc4>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3a:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <MX_GPIO_Init+0xc4>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2120      	movs	r1, #32
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4e:	f000 fd23 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c58:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	480b      	ldr	r0, [pc, #44]	@ (8000c98 <MX_GPIO_Init+0xc8>)
 8000c6a:	f000 fb6b 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c6e:	2320      	movs	r3, #32
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c88:	f000 fb5c 	bl	8001344 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	@ 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40021000 	.word	0x40021000
 8000c98:	48000800 	.word	0x48000800

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <Error_Handler+0x8>

08000ca8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <HAL_MspInit+0x44>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cec <HAL_MspInit+0x44>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <HAL_MspInit+0x44>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <HAL_MspInit+0x44>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cca:	4a08      	ldr	r2, [pc, #32]	@ (8000cec <HAL_MspInit+0x44>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_MspInit+0x44>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a25      	ldr	r2, [pc, #148]	@ (8000d94 <HAL_TIM_Base_MspInit+0xa4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d10c      	bne.n	8000d1c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d02:	4b25      	ldr	r3, [pc, #148]	@ (8000d98 <HAL_TIM_Base_MspInit+0xa8>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d06:	4a24      	ldr	r2, [pc, #144]	@ (8000d98 <HAL_TIM_Base_MspInit+0xa8>)
 8000d08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d0e:	4b22      	ldr	r3, [pc, #136]	@ (8000d98 <HAL_TIM_Base_MspInit+0xa8>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d1a:	e034      	b.n	8000d86 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d24:	d10c      	bne.n	8000d40 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d26:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <HAL_TIM_Base_MspInit+0xa8>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000d98 <HAL_TIM_Base_MspInit+0xa8>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d32:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <HAL_TIM_Base_MspInit+0xa8>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
}
 8000d3e:	e022      	b.n	8000d86 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a15      	ldr	r2, [pc, #84]	@ (8000d9c <HAL_TIM_Base_MspInit+0xac>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d10c      	bne.n	8000d64 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d4a:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <HAL_TIM_Base_MspInit+0xa8>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4e:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <HAL_TIM_Base_MspInit+0xa8>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <HAL_TIM_Base_MspInit+0xa8>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
}
 8000d62:	e010      	b.n	8000d86 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0d      	ldr	r2, [pc, #52]	@ (8000da0 <HAL_TIM_Base_MspInit+0xb0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d10b      	bne.n	8000d86 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <HAL_TIM_Base_MspInit+0xa8>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d72:	4a09      	ldr	r2, [pc, #36]	@ (8000d98 <HAL_TIM_Base_MspInit+0xa8>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7a:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <HAL_TIM_Base_MspInit+0xa8>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
}
 8000d86:	bf00      	nop
 8000d88:	371c      	adds	r7, #28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40012c00 	.word	0x40012c00
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40000400 	.word	0x40000400
 8000da0:	40000800 	.word	0x40000800

08000da4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	@ 0x30
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a46      	ldr	r2, [pc, #280]	@ (8000edc <HAL_TIM_MspPostInit+0x138>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d11e      	bne.n	8000e04 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b46      	ldr	r3, [pc, #280]	@ (8000ee0 <HAL_TIM_MspPostInit+0x13c>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	4a45      	ldr	r2, [pc, #276]	@ (8000ee0 <HAL_TIM_MspPostInit+0x13c>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd2:	4b43      	ldr	r3, [pc, #268]	@ (8000ee0 <HAL_TIM_MspPostInit+0x13c>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfe:	f000 faa1 	bl	8001344 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e02:	e066      	b.n	8000ed2 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e0c:	d11d      	bne.n	8000e4a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <HAL_TIM_MspPostInit+0x13c>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	4a33      	ldr	r2, [pc, #204]	@ (8000ee0 <HAL_TIM_MspPostInit+0x13c>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ee0 <HAL_TIM_MspPostInit+0x13c>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e26:	2301      	movs	r3, #1
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e36:	2301      	movs	r3, #1
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e44:	f000 fa7e 	bl	8001344 <HAL_GPIO_Init>
}
 8000e48:	e043      	b.n	8000ed2 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM3)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a25      	ldr	r2, [pc, #148]	@ (8000ee4 <HAL_TIM_MspPostInit+0x140>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d11d      	bne.n	8000e90 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b22      	ldr	r3, [pc, #136]	@ (8000ee0 <HAL_TIM_MspPostInit+0x13c>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e58:	4a21      	ldr	r2, [pc, #132]	@ (8000ee0 <HAL_TIM_MspPostInit+0x13c>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <HAL_TIM_MspPostInit+0x13c>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e6c:	2340      	movs	r3, #64	@ 0x40
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e8a:	f000 fa5b 	bl	8001344 <HAL_GPIO_Init>
}
 8000e8e:	e020      	b.n	8000ed2 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM4)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a14      	ldr	r2, [pc, #80]	@ (8000ee8 <HAL_TIM_MspPostInit+0x144>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d11b      	bne.n	8000ed2 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <HAL_TIM_MspPostInit+0x13c>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ee0 <HAL_TIM_MspPostInit+0x13c>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <HAL_TIM_MspPostInit+0x13c>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eb2:	2340      	movs	r3, #64	@ 0x40
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4807      	ldr	r0, [pc, #28]	@ (8000eec <HAL_TIM_MspPostInit+0x148>)
 8000ece:	f000 fa39 	bl	8001344 <HAL_GPIO_Init>
}
 8000ed2:	bf00      	nop
 8000ed4:	3730      	adds	r7, #48	@ 0x30
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40012c00 	.word	0x40012c00
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40000400 	.word	0x40000400
 8000ee8:	40000800 	.word	0x40000800
 8000eec:	48000400 	.word	0x48000400

08000ef0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ac      	sub	sp, #176	@ 0xb0
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2288      	movs	r2, #136	@ 0x88
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 ffae 	bl	8004e72 <memset>
  if(huart->Instance==USART2)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a21      	ldr	r2, [pc, #132]	@ (8000fa0 <HAL_UART_MspInit+0xb0>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d13b      	bne.n	8000f98 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 fa2f 	bl	8002390 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f38:	f7ff feb0 	bl	8000c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3c:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_UART_MspInit+0xb4>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f40:	4a18      	ldr	r2, [pc, #96]	@ (8000fa4 <HAL_UART_MspInit+0xb4>)
 8000f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f46:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f48:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <HAL_UART_MspInit+0xb4>)
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_UART_MspInit+0xb4>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f58:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <HAL_UART_MspInit+0xb4>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f60:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_UART_MspInit+0xb4>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f6c:	230c      	movs	r3, #12
 8000f6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f84:	2307      	movs	r3, #7
 8000f86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f94:	f000 f9d6 	bl	8001344 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f98:	bf00      	nop
 8000f9a:	37b0      	adds	r7, #176	@ 0xb0
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40004400 	.word	0x40004400
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <NMI_Handler+0x4>

08000fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <MemManage_Handler+0x4>

08000fc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffe:	f000 f89b 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <SystemInit+0x20>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001012:	4a05      	ldr	r2, [pc, #20]	@ (8001028 <SystemInit+0x20>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001064 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001030:	f7ff ffea 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001034:	480c      	ldr	r0, [pc, #48]	@ (8001068 <LoopForever+0x6>)
  ldr r1, =_edata
 8001036:	490d      	ldr	r1, [pc, #52]	@ (800106c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001038:	4a0d      	ldr	r2, [pc, #52]	@ (8001070 <LoopForever+0xe>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <LoopForever+0x12>)
  ldr r4, =_ebss
 800104c:	4c0a      	ldr	r4, [pc, #40]	@ (8001078 <LoopForever+0x16>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105a:	f003 ff13 	bl	8004e84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800105e:	f7ff fa49 	bl	80004f4 <main>

08001062 <LoopForever>:

LoopForever:
    b LoopForever
 8001062:	e7fe      	b.n	8001062 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001064:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001070:	08004f3c 	.word	0x08004f3c
  ldr r2, =_sbss
 8001074:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001078:	200001e4 	.word	0x200001e4

0800107c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC1_2_IRQHandler>
	...

08001080 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108a:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <HAL_Init+0x3c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a0b      	ldr	r2, [pc, #44]	@ (80010bc <HAL_Init+0x3c>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001094:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001096:	2003      	movs	r0, #3
 8001098:	f000 f920 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800109c:	2000      	movs	r0, #0
 800109e:	f000 f80f 	bl	80010c0 <HAL_InitTick>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	e001      	b.n	80010b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ae:	f7ff fdfb 	bl	8000ca8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010b2:	79fb      	ldrb	r3, [r7, #7]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40022000 	.word	0x40022000

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <HAL_InitTick+0x6c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d023      	beq.n	800111c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <HAL_InitTick+0x70>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <HAL_InitTick+0x6c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f91d 	bl	800132a <HAL_SYSTICK_Config>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10f      	bne.n	8001116 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d809      	bhi.n	8001110 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f000 f8f5 	bl	80012f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001108:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <HAL_InitTick+0x74>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e007      	b.n	8001120 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e004      	b.n	8001120 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	e001      	b.n	8001120 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	20000000 	.word	0x20000000
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	@ (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008
 800115c:	200001e0 	.word	0x200001e0

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200001e0 	.word	0x200001e0

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	@ (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	@ (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	@ 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	@ 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff47 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff5c 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff8e 	bl	8001230 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5d 	bl	80011dc <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffb0 	bl	8001298 <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001352:	e17f      	b.n	8001654 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2101      	movs	r1, #1
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8171 	beq.w	800164e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b01      	cmp	r3, #1
 8001376:	d005      	beq.n	8001384 <HAL_GPIO_Init+0x40>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d130      	bne.n	80013e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ba:	2201      	movs	r2, #1
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	f003 0201 	and.w	r2, r3, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d118      	bne.n	8001424 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013f8:	2201      	movs	r2, #1
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	f003 0201 	and.w	r2, r3, #1
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b03      	cmp	r3, #3
 800142e:	d017      	beq.n	8001460 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d123      	bne.n	80014b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	08da      	lsrs	r2, r3, #3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3208      	adds	r2, #8
 8001474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	08da      	lsrs	r2, r3, #3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3208      	adds	r2, #8
 80014ae:	6939      	ldr	r1, [r7, #16]
 80014b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0203 	and.w	r2, r3, #3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80ac 	beq.w	800164e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001674 <HAL_GPIO_Init+0x330>)
 80014f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001674 <HAL_GPIO_Init+0x330>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6613      	str	r3, [r2, #96]	@ 0x60
 8001502:	4b5c      	ldr	r3, [pc, #368]	@ (8001674 <HAL_GPIO_Init+0x330>)
 8001504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800150e:	4a5a      	ldr	r2, [pc, #360]	@ (8001678 <HAL_GPIO_Init+0x334>)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	3302      	adds	r3, #2
 8001516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	220f      	movs	r2, #15
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001538:	d025      	beq.n	8001586 <HAL_GPIO_Init+0x242>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4f      	ldr	r2, [pc, #316]	@ (800167c <HAL_GPIO_Init+0x338>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d01f      	beq.n	8001582 <HAL_GPIO_Init+0x23e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4e      	ldr	r2, [pc, #312]	@ (8001680 <HAL_GPIO_Init+0x33c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d019      	beq.n	800157e <HAL_GPIO_Init+0x23a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4d      	ldr	r2, [pc, #308]	@ (8001684 <HAL_GPIO_Init+0x340>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_GPIO_Init+0x236>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4c      	ldr	r2, [pc, #304]	@ (8001688 <HAL_GPIO_Init+0x344>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00d      	beq.n	8001576 <HAL_GPIO_Init+0x232>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4b      	ldr	r2, [pc, #300]	@ (800168c <HAL_GPIO_Init+0x348>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_Init+0x22e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4a      	ldr	r2, [pc, #296]	@ (8001690 <HAL_GPIO_Init+0x34c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_GPIO_Init+0x22a>
 800156a:	2306      	movs	r3, #6
 800156c:	e00c      	b.n	8001588 <HAL_GPIO_Init+0x244>
 800156e:	2307      	movs	r3, #7
 8001570:	e00a      	b.n	8001588 <HAL_GPIO_Init+0x244>
 8001572:	2305      	movs	r3, #5
 8001574:	e008      	b.n	8001588 <HAL_GPIO_Init+0x244>
 8001576:	2304      	movs	r3, #4
 8001578:	e006      	b.n	8001588 <HAL_GPIO_Init+0x244>
 800157a:	2303      	movs	r3, #3
 800157c:	e004      	b.n	8001588 <HAL_GPIO_Init+0x244>
 800157e:	2302      	movs	r3, #2
 8001580:	e002      	b.n	8001588 <HAL_GPIO_Init+0x244>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <HAL_GPIO_Init+0x244>
 8001586:	2300      	movs	r3, #0
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	f002 0203 	and.w	r2, r2, #3
 800158e:	0092      	lsls	r2, r2, #2
 8001590:	4093      	lsls	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001598:	4937      	ldr	r1, [pc, #220]	@ (8001678 <HAL_GPIO_Init+0x334>)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	3302      	adds	r3, #2
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001694 <HAL_GPIO_Init+0x350>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ca:	4a32      	ldr	r2, [pc, #200]	@ (8001694 <HAL_GPIO_Init+0x350>)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015d0:	4b30      	ldr	r3, [pc, #192]	@ (8001694 <HAL_GPIO_Init+0x350>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f4:	4a27      	ldr	r2, [pc, #156]	@ (8001694 <HAL_GPIO_Init+0x350>)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015fa:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <HAL_GPIO_Init+0x350>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800161e:	4a1d      	ldr	r2, [pc, #116]	@ (8001694 <HAL_GPIO_Init+0x350>)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <HAL_GPIO_Init+0x350>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001648:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <HAL_GPIO_Init+0x350>)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa22 f303 	lsr.w	r3, r2, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	f47f ae78 	bne.w	8001354 <HAL_GPIO_Init+0x10>
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	40010000 	.word	0x40010000
 800167c:	48000400 	.word	0x48000400
 8001680:	48000800 	.word	0x48000800
 8001684:	48000c00 	.word	0x48000c00
 8001688:	48001000 	.word	0x48001000
 800168c:	48001400 	.word	0x48001400
 8001690:	48001800 	.word	0x48001800
 8001694:	40010400 	.word	0x40010400

08001698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
 80016a4:	4613      	mov	r3, r2
 80016a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a8:	787b      	ldrb	r3, [r7, #1]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016b4:	e002      	b.n	80016bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016b6:	887a      	ldrh	r2, [r7, #2]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016cc:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40007000 	.word	0x40007000

080016e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016f2:	d130      	bne.n	8001756 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f4:	4b23      	ldr	r3, [pc, #140]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001700:	d038      	beq.n	8001774 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001702:	4b20      	ldr	r3, [pc, #128]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800170a:	4a1e      	ldr	r2, [pc, #120]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001710:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001712:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2232      	movs	r2, #50	@ 0x32
 8001718:	fb02 f303 	mul.w	r3, r2, r3
 800171c:	4a1b      	ldr	r2, [pc, #108]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	0c9b      	lsrs	r3, r3, #18
 8001724:	3301      	adds	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001728:	e002      	b.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3b01      	subs	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800173c:	d102      	bne.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x60>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f2      	bne.n	800172a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800174c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001750:	d110      	bne.n	8001774 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e00f      	b.n	8001776 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001756:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800175e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001762:	d007      	beq.n	8001774 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001764:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800176c:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001772:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40007000 	.word	0x40007000
 8001788:	20000000 	.word	0x20000000
 800178c:	431bde83 	.word	0x431bde83

08001790 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e3ca      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a2:	4b97      	ldr	r3, [pc, #604]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ac:	4b94      	ldr	r3, [pc, #592]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80e4 	beq.w	800198c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <HAL_RCC_OscConfig+0x4a>
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	f040 808b 	bne.w	80018e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	f040 8087 	bne.w	80018e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017da:	4b89      	ldr	r3, [pc, #548]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_RCC_OscConfig+0x62>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e3a2      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1a      	ldr	r2, [r3, #32]
 80017f6:	4b82      	ldr	r3, [pc, #520]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d004      	beq.n	800180c <HAL_RCC_OscConfig+0x7c>
 8001802:	4b7f      	ldr	r3, [pc, #508]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800180a:	e005      	b.n	8001818 <HAL_RCC_OscConfig+0x88>
 800180c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800180e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001818:	4293      	cmp	r3, r2
 800181a:	d223      	bcs.n	8001864 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fd55 	bl	80022d0 <RCC_SetFlashLatencyFromMSIRange>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e383      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001830:	4b73      	ldr	r3, [pc, #460]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a72      	ldr	r2, [pc, #456]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b70      	ldr	r3, [pc, #448]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	496d      	ldr	r1, [pc, #436]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800184e:	4b6c      	ldr	r3, [pc, #432]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	4968      	ldr	r1, [pc, #416]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800185e:	4313      	orrs	r3, r2
 8001860:	604b      	str	r3, [r1, #4]
 8001862:	e025      	b.n	80018b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001864:	4b66      	ldr	r3, [pc, #408]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a65      	ldr	r2, [pc, #404]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800186a:	f043 0308 	orr.w	r3, r3, #8
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b63      	ldr	r3, [pc, #396]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4960      	ldr	r1, [pc, #384]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001882:	4b5f      	ldr	r3, [pc, #380]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	495b      	ldr	r1, [pc, #364]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d109      	bne.n	80018b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fd15 	bl	80022d0 <RCC_SetFlashLatencyFromMSIRange>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e343      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018b0:	f000 fc4a 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 80018b4:	4602      	mov	r2, r0
 80018b6:	4b52      	ldr	r3, [pc, #328]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	4950      	ldr	r1, [pc, #320]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80018c2:	5ccb      	ldrb	r3, [r1, r3]
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
 80018cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001a08 <HAL_RCC_OscConfig+0x278>)
 80018ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018d0:	4b4e      	ldr	r3, [pc, #312]	@ (8001a0c <HAL_RCC_OscConfig+0x27c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fbf3 	bl	80010c0 <HAL_InitTick>
 80018da:	4603      	mov	r3, r0
 80018dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d052      	beq.n	800198a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	e327      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d032      	beq.n	8001956 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018f0:	4b43      	ldr	r3, [pc, #268]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a42      	ldr	r2, [pc, #264]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fc30 	bl	8001160 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001904:	f7ff fc2c 	bl	8001160 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e310      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001916:	4b3a      	ldr	r3, [pc, #232]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001922:	4b37      	ldr	r3, [pc, #220]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a36      	ldr	r2, [pc, #216]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b34      	ldr	r3, [pc, #208]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4931      	ldr	r1, [pc, #196]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001940:	4b2f      	ldr	r3, [pc, #188]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	492c      	ldr	r1, [pc, #176]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
 8001954:	e01a      	b.n	800198c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001956:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a29      	ldr	r2, [pc, #164]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800195c:	f023 0301 	bic.w	r3, r3, #1
 8001960:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001962:	f7ff fbfd 	bl	8001160 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800196a:	f7ff fbf9 	bl	8001160 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e2dd      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800197c:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f0      	bne.n	800196a <HAL_RCC_OscConfig+0x1da>
 8001988:	e000      	b.n	800198c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800198a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d074      	beq.n	8001a82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b08      	cmp	r3, #8
 800199c:	d005      	beq.n	80019aa <HAL_RCC_OscConfig+0x21a>
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	d10e      	bne.n	80019c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d10b      	bne.n	80019c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d064      	beq.n	8001a80 <HAL_RCC_OscConfig+0x2f0>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d160      	bne.n	8001a80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e2ba      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x24a>
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80019d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e026      	b.n	8001a28 <HAL_RCC_OscConfig+0x298>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019e2:	d115      	bne.n	8001a10 <HAL_RCC_OscConfig+0x280>
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a05      	ldr	r2, [pc, #20]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80019ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b03      	ldr	r3, [pc, #12]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a02      	ldr	r2, [pc, #8]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e014      	b.n	8001a28 <HAL_RCC_OscConfig+0x298>
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	08004ee4 	.word	0x08004ee4
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004
 8001a10:	4ba0      	ldr	r3, [pc, #640]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a9f      	ldr	r2, [pc, #636]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b9d      	ldr	r3, [pc, #628]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a9c      	ldr	r2, [pc, #624]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d013      	beq.n	8001a58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff fb96 	bl	8001160 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff fb92 	bl	8001160 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	@ 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e276      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a4a:	4b92      	ldr	r3, [pc, #584]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x2a8>
 8001a56:	e014      	b.n	8001a82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff fb82 	bl	8001160 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff fb7e 	bl	8001160 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	@ 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e262      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a72:	4b88      	ldr	r3, [pc, #544]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x2d0>
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d060      	beq.n	8001b50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x310>
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d119      	bne.n	8001ace <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d116      	bne.n	8001ace <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa0:	4b7c      	ldr	r3, [pc, #496]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x328>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e23f      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	4b76      	ldr	r3, [pc, #472]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	061b      	lsls	r3, r3, #24
 8001ac6:	4973      	ldr	r1, [pc, #460]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001acc:	e040      	b.n	8001b50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d023      	beq.n	8001b1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad6:	4b6f      	ldr	r3, [pc, #444]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a6e      	ldr	r2, [pc, #440]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fb3d 	bl	8001160 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aea:	f7ff fb39 	bl	8001160 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e21d      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afc:	4b65      	ldr	r3, [pc, #404]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b08:	4b62      	ldr	r3, [pc, #392]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	061b      	lsls	r3, r3, #24
 8001b16:	495f      	ldr	r1, [pc, #380]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
 8001b1c:	e018      	b.n	8001b50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a5c      	ldr	r2, [pc, #368]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fb19 	bl	8001160 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff fb15 	bl	8001160 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e1f9      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b44:	4b53      	ldr	r3, [pc, #332]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f0      	bne.n	8001b32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d03c      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b64:	4b4b      	ldr	r3, [pc, #300]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7ff faf4 	bl	8001160 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7c:	f7ff faf0 	bl	8001160 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e1d4      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8e:	4b41      	ldr	r3, [pc, #260]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0ef      	beq.n	8001b7c <HAL_RCC_OscConfig+0x3ec>
 8001b9c:	e01b      	b.n	8001bd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ba4:	4a3b      	ldr	r2, [pc, #236]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff fad7 	bl	8001160 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fad3 	bl	8001160 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e1b7      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc8:	4b32      	ldr	r3, [pc, #200]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1ef      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80a6 	beq.w	8001d30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001be8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10d      	bne.n	8001c10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	4b27      	ldr	r3, [pc, #156]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf8:	4a26      	ldr	r2, [pc, #152]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c00:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c10:	4b21      	ldr	r3, [pc, #132]	@ (8001c98 <HAL_RCC_OscConfig+0x508>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d118      	bne.n	8001c4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <HAL_RCC_OscConfig+0x508>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1d      	ldr	r2, [pc, #116]	@ (8001c98 <HAL_RCC_OscConfig+0x508>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c28:	f7ff fa9a 	bl	8001160 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c30:	f7ff fa96 	bl	8001160 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e17a      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <HAL_RCC_OscConfig+0x508>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d108      	bne.n	8001c68 <HAL_RCC_OscConfig+0x4d8>
 8001c56:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c66:	e029      	b.n	8001cbc <HAL_RCC_OscConfig+0x52c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	d115      	bne.n	8001c9c <HAL_RCC_OscConfig+0x50c>
 8001c70:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c76:	4a07      	ldr	r2, [pc, #28]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c80:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c86:	4a03      	ldr	r2, [pc, #12]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c90:	e014      	b.n	8001cbc <HAL_RCC_OscConfig+0x52c>
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40007000 	.word	0x40007000
 8001c9c:	4b9c      	ldr	r3, [pc, #624]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca2:	4a9b      	ldr	r2, [pc, #620]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cac:	4b98      	ldr	r3, [pc, #608]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb2:	4a97      	ldr	r2, [pc, #604]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d016      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7ff fa4c 	bl	8001160 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fa48 	bl	8001160 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e12a      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce2:	4b8b      	ldr	r3, [pc, #556]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ed      	beq.n	8001ccc <HAL_RCC_OscConfig+0x53c>
 8001cf0:	e015      	b.n	8001d1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fa35 	bl	8001160 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7ff fa31 	bl	8001160 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e113      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d10:	4b7f      	ldr	r3, [pc, #508]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1ed      	bne.n	8001cfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d105      	bne.n	8001d30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d24:	4b7a      	ldr	r3, [pc, #488]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	4a79      	ldr	r2, [pc, #484]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80fe 	beq.w	8001f36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	f040 80d0 	bne.w	8001ee4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d44:	4b72      	ldr	r3, [pc, #456]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 0203 	and.w	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d130      	bne.n	8001dba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	3b01      	subs	r3, #1
 8001d64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d127      	bne.n	8001dba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d11f      	bne.n	8001dba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d84:	2a07      	cmp	r2, #7
 8001d86:	bf14      	ite	ne
 8001d88:	2201      	movne	r2, #1
 8001d8a:	2200      	moveq	r2, #0
 8001d8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d113      	bne.n	8001dba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d9c:	085b      	lsrs	r3, r3, #1
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d109      	bne.n	8001dba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	085b      	lsrs	r3, r3, #1
 8001db2:	3b01      	subs	r3, #1
 8001db4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d06e      	beq.n	8001e98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	2b0c      	cmp	r3, #12
 8001dbe:	d069      	beq.n	8001e94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dc0:	4b53      	ldr	r3, [pc, #332]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dcc:	4b50      	ldr	r3, [pc, #320]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0ad      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a4b      	ldr	r2, [pc, #300]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001de6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001de8:	f7ff f9ba 	bl	8001160 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df0:	f7ff f9b6 	bl	8001160 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e09a      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e02:	4b43      	ldr	r3, [pc, #268]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0e:	4b40      	ldr	r3, [pc, #256]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	4b40      	ldr	r3, [pc, #256]	@ (8001f14 <HAL_RCC_OscConfig+0x784>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e1e:	3a01      	subs	r2, #1
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	4311      	orrs	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e28:	0212      	lsls	r2, r2, #8
 8001e2a:	4311      	orrs	r1, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e30:	0852      	lsrs	r2, r2, #1
 8001e32:	3a01      	subs	r2, #1
 8001e34:	0552      	lsls	r2, r2, #21
 8001e36:	4311      	orrs	r1, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e3c:	0852      	lsrs	r2, r2, #1
 8001e3e:	3a01      	subs	r2, #1
 8001e40:	0652      	lsls	r2, r2, #25
 8001e42:	4311      	orrs	r1, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e48:	0912      	lsrs	r2, r2, #4
 8001e4a:	0452      	lsls	r2, r2, #17
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	4930      	ldr	r1, [pc, #192]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e54:	4b2e      	ldr	r3, [pc, #184]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a2d      	ldr	r2, [pc, #180]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b2b      	ldr	r3, [pc, #172]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a2a      	ldr	r2, [pc, #168]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e6c:	f7ff f978 	bl	8001160 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f974 	bl	8001160 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e058      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b22      	ldr	r3, [pc, #136]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e92:	e050      	b.n	8001f36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e04f      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e98:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d148      	bne.n	8001f36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001eaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb0:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a16      	ldr	r2, [pc, #88]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001eb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ebc:	f7ff f950 	bl	8001160 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7ff f94c 	bl	8001160 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e030      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x734>
 8001ee2:	e028      	b.n	8001f36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d023      	beq.n	8001f32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eea:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a08      	ldr	r2, [pc, #32]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001ef0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7ff f933 	bl	8001160 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001efc:	e00c      	b.n	8001f18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efe:	f7ff f92f 	bl	8001160 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d905      	bls.n	8001f18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e013      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f18:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <HAL_RCC_OscConfig+0x7b0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ec      	bne.n	8001efe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_RCC_OscConfig+0x7b0>)
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	4905      	ldr	r1, [pc, #20]	@ (8001f40 <HAL_RCC_OscConfig+0x7b0>)
 8001f2a:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <HAL_RCC_OscConfig+0x7b4>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
 8001f30:	e001      	b.n	8001f36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	feeefffc 	.word	0xfeeefffc

08001f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0e7      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b75      	ldr	r3, [pc, #468]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d910      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	4b72      	ldr	r3, [pc, #456]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 0207 	bic.w	r2, r3, #7
 8001f72:	4970      	ldr	r1, [pc, #448]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7a:	4b6e      	ldr	r3, [pc, #440]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0cf      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d010      	beq.n	8001fba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	4b66      	ldr	r3, [pc, #408]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d908      	bls.n	8001fba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa8:	4b63      	ldr	r3, [pc, #396]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4960      	ldr	r1, [pc, #384]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d04c      	beq.n	8002060 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fce:	4b5a      	ldr	r3, [pc, #360]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d121      	bne.n	800201e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0a6      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe6:	4b54      	ldr	r3, [pc, #336]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d115      	bne.n	800201e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e09a      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e08e      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800200e:	4b4a      	ldr	r3, [pc, #296]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e086      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800201e:	4b46      	ldr	r3, [pc, #280]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f023 0203 	bic.w	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4943      	ldr	r1, [pc, #268]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	4313      	orrs	r3, r2
 800202e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002030:	f7ff f896 	bl	8001160 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	e00a      	b.n	800204e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002038:	f7ff f892 	bl	8001160 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e06e      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	4b3a      	ldr	r3, [pc, #232]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 020c 	and.w	r2, r3, #12
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	429a      	cmp	r2, r3
 800205e:	d1eb      	bne.n	8002038 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d010      	beq.n	800208e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	4b31      	ldr	r3, [pc, #196]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002078:	429a      	cmp	r2, r3
 800207a:	d208      	bcs.n	800208e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800207c:	4b2e      	ldr	r3, [pc, #184]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	492b      	ldr	r1, [pc, #172]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800208e:	4b29      	ldr	r3, [pc, #164]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d210      	bcs.n	80020be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209c:	4b25      	ldr	r3, [pc, #148]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 0207 	bic.w	r2, r3, #7
 80020a4:	4923      	ldr	r1, [pc, #140]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ac:	4b21      	ldr	r3, [pc, #132]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d001      	beq.n	80020be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e036      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d008      	beq.n	80020dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	4918      	ldr	r1, [pc, #96]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d009      	beq.n	80020fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e8:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4910      	ldr	r1, [pc, #64]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020fc:	f000 f824 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	490b      	ldr	r1, [pc, #44]	@ (800213c <HAL_RCC_ClockConfig+0x1f4>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
 8002118:	4a09      	ldr	r2, [pc, #36]	@ (8002140 <HAL_RCC_ClockConfig+0x1f8>)
 800211a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800211c:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <HAL_RCC_ClockConfig+0x1fc>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe ffcd 	bl	80010c0 <HAL_InitTick>
 8002126:	4603      	mov	r3, r0
 8002128:	72fb      	strb	r3, [r7, #11]

  return status;
 800212a:	7afb      	ldrb	r3, [r7, #11]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40022000 	.word	0x40022000
 8002138:	40021000 	.word	0x40021000
 800213c:	08004ee4 	.word	0x08004ee4
 8002140:	20000000 	.word	0x20000000
 8002144:	20000004 	.word	0x20000004

08002148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	@ 0x24
 800214c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002156:	4b3e      	ldr	r3, [pc, #248]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002160:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x34>
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d121      	bne.n	80021ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d11e      	bne.n	80021ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800217c:	4b34      	ldr	r3, [pc, #208]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d107      	bne.n	8002198 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002188:	4b31      	ldr	r3, [pc, #196]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 800218a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	e005      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002198:	4b2d      	ldr	r3, [pc, #180]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d102      	bne.n	80021c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021c0:	4b25      	ldr	r3, [pc, #148]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x110>)
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	e004      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021cc:	4b23      	ldr	r3, [pc, #140]	@ (800225c <HAL_RCC_GetSysClockFreq+0x114>)
 80021ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2b0c      	cmp	r3, #12
 80021d4:	d134      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d003      	beq.n	80021ee <HAL_RCC_GetSysClockFreq+0xa6>
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d003      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0xac>
 80021ec:	e005      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x110>)
 80021f0:	617b      	str	r3, [r7, #20]
      break;
 80021f2:	e005      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021f4:	4b19      	ldr	r3, [pc, #100]	@ (800225c <HAL_RCC_GetSysClockFreq+0x114>)
 80021f6:	617b      	str	r3, [r7, #20]
      break;
 80021f8:	e002      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	617b      	str	r3, [r7, #20]
      break;
 80021fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002200:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	3301      	adds	r3, #1
 800220c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	fb03 f202 	mul.w	r2, r3, r2
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	fbb2 f3f3 	udiv	r3, r2, r3
 8002224:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002226:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	0e5b      	lsrs	r3, r3, #25
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	3301      	adds	r3, #1
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002240:	69bb      	ldr	r3, [r7, #24]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	@ 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	08004efc 	.word	0x08004efc
 8002258:	00f42400 	.word	0x00f42400
 800225c:	007a1200 	.word	0x007a1200

08002260 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002264:	4b03      	ldr	r3, [pc, #12]	@ (8002274 <HAL_RCC_GetHCLKFreq+0x14>)
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000000 	.word	0x20000000

08002278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800227c:	f7ff fff0 	bl	8002260 <HAL_RCC_GetHCLKFreq>
 8002280:	4602      	mov	r2, r0
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	4904      	ldr	r1, [pc, #16]	@ (80022a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800228e:	5ccb      	ldrb	r3, [r1, r3]
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000
 80022a0:	08004ef4 	.word	0x08004ef4

080022a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022a8:	f7ff ffda 	bl	8002260 <HAL_RCC_GetHCLKFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	0adb      	lsrs	r3, r3, #11
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	4904      	ldr	r1, [pc, #16]	@ (80022cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08004ef4 	.word	0x08004ef4

080022d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022e8:	f7ff f9ee 	bl	80016c8 <HAL_PWREx_GetVoltageRange>
 80022ec:	6178      	str	r0, [r7, #20]
 80022ee:	e014      	b.n	800231a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022f0:	4b25      	ldr	r3, [pc, #148]	@ (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f4:	4a24      	ldr	r2, [pc, #144]	@ (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80022fc:	4b22      	ldr	r3, [pc, #136]	@ (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002308:	f7ff f9de 	bl	80016c8 <HAL_PWREx_GetVoltageRange>
 800230c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800230e:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002312:	4a1d      	ldr	r2, [pc, #116]	@ (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002318:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002320:	d10b      	bne.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b80      	cmp	r3, #128	@ 0x80
 8002326:	d919      	bls.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2ba0      	cmp	r3, #160	@ 0xa0
 800232c:	d902      	bls.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800232e:	2302      	movs	r3, #2
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	e013      	b.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002334:	2301      	movs	r3, #1
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e010      	b.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b80      	cmp	r3, #128	@ 0x80
 800233e:	d902      	bls.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002340:	2303      	movs	r3, #3
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	e00a      	b.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b80      	cmp	r3, #128	@ 0x80
 800234a:	d102      	bne.n	8002352 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800234c:	2302      	movs	r3, #2
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	e004      	b.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b70      	cmp	r3, #112	@ 0x70
 8002356:	d101      	bne.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002358:	2301      	movs	r3, #1
 800235a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 0207 	bic.w	r2, r3, #7
 8002364:	4909      	ldr	r1, [pc, #36]	@ (800238c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800236c:	4b07      	ldr	r3, [pc, #28]	@ (800238c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	429a      	cmp	r2, r3
 8002378:	d001      	beq.n	800237e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	40022000 	.word	0x40022000

08002390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002398:	2300      	movs	r3, #0
 800239a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800239c:	2300      	movs	r3, #0
 800239e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d041      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023b4:	d02a      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023ba:	d824      	bhi.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023c0:	d008      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023c6:	d81e      	bhi.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023d0:	d010      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023d2:	e018      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023d4:	4b86      	ldr	r3, [pc, #536]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a85      	ldr	r2, [pc, #532]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023e0:	e015      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fabb 	bl	8002964 <RCCEx_PLLSAI1_Config>
 80023ee:	4603      	mov	r3, r0
 80023f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023f2:	e00c      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3320      	adds	r3, #32
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fba6 	bl	8002b4c <RCCEx_PLLSAI2_Config>
 8002400:	4603      	mov	r3, r0
 8002402:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002404:	e003      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	74fb      	strb	r3, [r7, #19]
      break;
 800240a:	e000      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800240c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002414:	4b76      	ldr	r3, [pc, #472]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002422:	4973      	ldr	r1, [pc, #460]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800242a:	e001      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d041      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002440:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002444:	d02a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002446:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800244a:	d824      	bhi.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800244c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002450:	d008      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002452:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002456:	d81e      	bhi.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002460:	d010      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002462:	e018      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002464:	4b62      	ldr	r3, [pc, #392]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a61      	ldr	r2, [pc, #388]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002470:	e015      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3304      	adds	r3, #4
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fa73 	bl	8002964 <RCCEx_PLLSAI1_Config>
 800247e:	4603      	mov	r3, r0
 8002480:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002482:	e00c      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3320      	adds	r3, #32
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fb5e 	bl	8002b4c <RCCEx_PLLSAI2_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002494:	e003      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	74fb      	strb	r3, [r7, #19]
      break;
 800249a:	e000      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800249c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10b      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024a4:	4b52      	ldr	r3, [pc, #328]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024b2:	494f      	ldr	r1, [pc, #316]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024ba:	e001      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80a0 	beq.w	800260e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024d2:	4b47      	ldr	r3, [pc, #284]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00d      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	4b41      	ldr	r3, [pc, #260]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ec:	4a40      	ldr	r2, [pc, #256]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80024f4:	4b3e      	ldr	r3, [pc, #248]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002500:	2301      	movs	r3, #1
 8002502:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002504:	4b3b      	ldr	r3, [pc, #236]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a3a      	ldr	r2, [pc, #232]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800250a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800250e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002510:	f7fe fe26 	bl	8001160 <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002516:	e009      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002518:	f7fe fe22 	bl	8001160 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d902      	bls.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	74fb      	strb	r3, [r7, #19]
        break;
 800252a:	e005      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800252c:	4b31      	ldr	r3, [pc, #196]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ef      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d15c      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800253e:	4b2c      	ldr	r3, [pc, #176]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002548:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01f      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	429a      	cmp	r2, r3
 800255a:	d019      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800255c:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002566:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002568:	4b21      	ldr	r3, [pc, #132]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256e:	4a20      	ldr	r2, [pc, #128]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002578:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257e:	4a1c      	ldr	r2, [pc, #112]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002588:	4a19      	ldr	r2, [pc, #100]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d016      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fde1 	bl	8001160 <HAL_GetTick>
 800259e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a0:	e00b      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fddd 	bl	8001160 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d902      	bls.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	74fb      	strb	r3, [r7, #19]
            break;
 80025b8:	e006      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ba:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ec      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ce:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025de:	4904      	ldr	r1, [pc, #16]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025e6:	e009      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	74bb      	strb	r3, [r7, #18]
 80025ec:	e006      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025fc:	7c7b      	ldrb	r3, [r7, #17]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d105      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002602:	4b9e      	ldr	r3, [pc, #632]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	4a9d      	ldr	r2, [pc, #628]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800260c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800261a:	4b98      	ldr	r3, [pc, #608]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002620:	f023 0203 	bic.w	r2, r3, #3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002628:	4994      	ldr	r1, [pc, #592]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800263c:	4b8f      	ldr	r3, [pc, #572]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002642:	f023 020c 	bic.w	r2, r3, #12
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264a:	498c      	ldr	r1, [pc, #560]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800265e:	4b87      	ldr	r3, [pc, #540]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002664:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	4983      	ldr	r1, [pc, #524]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002680:	4b7e      	ldr	r3, [pc, #504]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002686:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	497b      	ldr	r1, [pc, #492]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026a2:	4b76      	ldr	r3, [pc, #472]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b0:	4972      	ldr	r1, [pc, #456]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026c4:	4b6d      	ldr	r3, [pc, #436]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d2:	496a      	ldr	r1, [pc, #424]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026e6:	4b65      	ldr	r3, [pc, #404]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f4:	4961      	ldr	r1, [pc, #388]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002708:	4b5c      	ldr	r3, [pc, #368]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002716:	4959      	ldr	r1, [pc, #356]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800272a:	4b54      	ldr	r3, [pc, #336]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002730:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002738:	4950      	ldr	r1, [pc, #320]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800274c:	4b4b      	ldr	r3, [pc, #300]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002752:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275a:	4948      	ldr	r1, [pc, #288]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800276e:	4b43      	ldr	r3, [pc, #268]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002774:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277c:	493f      	ldr	r1, [pc, #252]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d028      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002790:	4b3a      	ldr	r3, [pc, #232]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002796:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800279e:	4937      	ldr	r1, [pc, #220]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027ae:	d106      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b0:	4b32      	ldr	r3, [pc, #200]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4a31      	ldr	r2, [pc, #196]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027ba:	60d3      	str	r3, [r2, #12]
 80027bc:	e011      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027c6:	d10c      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	2101      	movs	r1, #1
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f8c8 	bl	8002964 <RCCEx_PLLSAI1_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027de:	7cfb      	ldrb	r3, [r7, #19]
 80027e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d028      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027ee:	4b23      	ldr	r3, [pc, #140]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fc:	491f      	ldr	r1, [pc, #124]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800280c:	d106      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800280e:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4a1a      	ldr	r2, [pc, #104]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002818:	60d3      	str	r3, [r2, #12]
 800281a:	e011      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002820:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002824:	d10c      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	2101      	movs	r1, #1
 800282c:	4618      	mov	r0, r3
 800282e:	f000 f899 	bl	8002964 <RCCEx_PLLSAI1_Config>
 8002832:	4603      	mov	r3, r0
 8002834:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002836:	7cfb      	ldrb	r3, [r7, #19]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d02b      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800284c:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002852:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800285a:	4908      	ldr	r1, [pc, #32]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800286a:	d109      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800286c:	4b03      	ldr	r3, [pc, #12]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4a02      	ldr	r2, [pc, #8]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002872:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002876:	60d3      	str	r3, [r2, #12]
 8002878:	e014      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002884:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002888:	d10c      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3304      	adds	r3, #4
 800288e:	2101      	movs	r1, #1
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f867 	bl	8002964 <RCCEx_PLLSAI1_Config>
 8002896:	4603      	mov	r3, r0
 8002898:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800289a:	7cfb      	ldrb	r3, [r7, #19]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d02f      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028be:	4928      	ldr	r1, [pc, #160]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028ce:	d10d      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	2102      	movs	r1, #2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f844 	bl	8002964 <RCCEx_PLLSAI1_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d014      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028e6:	7cfb      	ldrb	r3, [r7, #19]
 80028e8:	74bb      	strb	r3, [r7, #18]
 80028ea:	e011      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028f4:	d10c      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3320      	adds	r3, #32
 80028fa:	2102      	movs	r1, #2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 f925 	bl	8002b4c <RCCEx_PLLSAI2_Config>
 8002902:	4603      	mov	r3, r0
 8002904:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002906:	7cfb      	ldrb	r3, [r7, #19]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800291c:	4b10      	ldr	r3, [pc, #64]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002922:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800292a:	490d      	ldr	r1, [pc, #52]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800293e:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002944:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800294e:	4904      	ldr	r1, [pc, #16]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002956:	7cbb      	ldrb	r3, [r7, #18]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000

08002964 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002972:	4b75      	ldr	r3, [pc, #468]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d018      	beq.n	80029b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800297e:	4b72      	ldr	r3, [pc, #456]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0203 	and.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d10d      	bne.n	80029aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
       ||
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002996:	4b6c      	ldr	r3, [pc, #432]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
       ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d047      	beq.n	8002a3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	e044      	b.n	8002a3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d018      	beq.n	80029ea <RCCEx_PLLSAI1_Config+0x86>
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d825      	bhi.n	8002a08 <RCCEx_PLLSAI1_Config+0xa4>
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d002      	beq.n	80029c6 <RCCEx_PLLSAI1_Config+0x62>
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d009      	beq.n	80029d8 <RCCEx_PLLSAI1_Config+0x74>
 80029c4:	e020      	b.n	8002a08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029c6:	4b60      	ldr	r3, [pc, #384]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d11d      	bne.n	8002a0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d6:	e01a      	b.n	8002a0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d116      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e8:	e013      	b.n	8002a12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ea:	4b57      	ldr	r3, [pc, #348]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10f      	bne.n	8002a16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029f6:	4b54      	ldr	r3, [pc, #336]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a06:	e006      	b.n	8002a16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a0c:	e004      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e002      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a12:	bf00      	nop
 8002a14:	e000      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10d      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6819      	ldr	r1, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	430b      	orrs	r3, r1
 8002a34:	4944      	ldr	r1, [pc, #272]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d17d      	bne.n	8002b3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a40:	4b41      	ldr	r3, [pc, #260]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a40      	ldr	r2, [pc, #256]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fb88 	bl	8001160 <HAL_GetTick>
 8002a50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a52:	e009      	b.n	8002a68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a54:	f7fe fb84 	bl	8001160 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d902      	bls.n	8002a68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	73fb      	strb	r3, [r7, #15]
        break;
 8002a66:	e005      	b.n	8002a74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a68:	4b37      	ldr	r3, [pc, #220]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1ef      	bne.n	8002a54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d160      	bne.n	8002b3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d111      	bne.n	8002aa4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a80:	4b31      	ldr	r3, [pc, #196]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6892      	ldr	r2, [r2, #8]
 8002a90:	0211      	lsls	r1, r2, #8
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68d2      	ldr	r2, [r2, #12]
 8002a96:	0912      	lsrs	r2, r2, #4
 8002a98:	0452      	lsls	r2, r2, #17
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	492a      	ldr	r1, [pc, #168]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	610b      	str	r3, [r1, #16]
 8002aa2:	e027      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d112      	bne.n	8002ad0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aaa:	4b27      	ldr	r3, [pc, #156]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ab2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6892      	ldr	r2, [r2, #8]
 8002aba:	0211      	lsls	r1, r2, #8
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6912      	ldr	r2, [r2, #16]
 8002ac0:	0852      	lsrs	r2, r2, #1
 8002ac2:	3a01      	subs	r2, #1
 8002ac4:	0552      	lsls	r2, r2, #21
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	491f      	ldr	r1, [pc, #124]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	610b      	str	r3, [r1, #16]
 8002ace:	e011      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ad8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6892      	ldr	r2, [r2, #8]
 8002ae0:	0211      	lsls	r1, r2, #8
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6952      	ldr	r2, [r2, #20]
 8002ae6:	0852      	lsrs	r2, r2, #1
 8002ae8:	3a01      	subs	r2, #1
 8002aea:	0652      	lsls	r2, r2, #25
 8002aec:	430a      	orrs	r2, r1
 8002aee:	4916      	ldr	r1, [pc, #88]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002af4:	4b14      	ldr	r3, [pc, #80]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a13      	ldr	r2, [pc, #76]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe fb2e 	bl	8001160 <HAL_GetTick>
 8002b04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b06:	e009      	b.n	8002b1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b08:	f7fe fb2a 	bl	8001160 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d902      	bls.n	8002b1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	73fb      	strb	r3, [r7, #15]
          break;
 8002b1a:	e005      	b.n	8002b28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0ef      	beq.n	8002b08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b2e:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	4904      	ldr	r1, [pc, #16]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000

08002b4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d018      	beq.n	8002b98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b66:	4b67      	ldr	r3, [pc, #412]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0203 	and.w	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d10d      	bne.n	8002b92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
       ||
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b7e:	4b61      	ldr	r3, [pc, #388]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d047      	beq.n	8002c22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	e044      	b.n	8002c22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d018      	beq.n	8002bd2 <RCCEx_PLLSAI2_Config+0x86>
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d825      	bhi.n	8002bf0 <RCCEx_PLLSAI2_Config+0xa4>
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d002      	beq.n	8002bae <RCCEx_PLLSAI2_Config+0x62>
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d009      	beq.n	8002bc0 <RCCEx_PLLSAI2_Config+0x74>
 8002bac:	e020      	b.n	8002bf0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bae:	4b55      	ldr	r3, [pc, #340]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d11d      	bne.n	8002bf6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bbe:	e01a      	b.n	8002bf6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bc0:	4b50      	ldr	r3, [pc, #320]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d116      	bne.n	8002bfa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd0:	e013      	b.n	8002bfa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bd2:	4b4c      	ldr	r3, [pc, #304]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bde:	4b49      	ldr	r3, [pc, #292]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bee:	e006      	b.n	8002bfe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf4:	e004      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e002      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e000      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bfe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10d      	bne.n	8002c22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c06:	4b3f      	ldr	r3, [pc, #252]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6819      	ldr	r1, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	4939      	ldr	r1, [pc, #228]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d167      	bne.n	8002cf8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c28:	4b36      	ldr	r3, [pc, #216]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a35      	ldr	r2, [pc, #212]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c34:	f7fe fa94 	bl	8001160 <HAL_GetTick>
 8002c38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c3a:	e009      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c3c:	f7fe fa90 	bl	8001160 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d902      	bls.n	8002c50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c4e:	e005      	b.n	8002c5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c50:	4b2c      	ldr	r3, [pc, #176]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1ef      	bne.n	8002c3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d14a      	bne.n	8002cf8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d111      	bne.n	8002c8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c68:	4b26      	ldr	r3, [pc, #152]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6892      	ldr	r2, [r2, #8]
 8002c78:	0211      	lsls	r1, r2, #8
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68d2      	ldr	r2, [r2, #12]
 8002c7e:	0912      	lsrs	r2, r2, #4
 8002c80:	0452      	lsls	r2, r2, #17
 8002c82:	430a      	orrs	r2, r1
 8002c84:	491f      	ldr	r1, [pc, #124]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	614b      	str	r3, [r1, #20]
 8002c8a:	e011      	b.n	8002cb0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6892      	ldr	r2, [r2, #8]
 8002c9c:	0211      	lsls	r1, r2, #8
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6912      	ldr	r2, [r2, #16]
 8002ca2:	0852      	lsrs	r2, r2, #1
 8002ca4:	3a01      	subs	r2, #1
 8002ca6:	0652      	lsls	r2, r2, #25
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	4916      	ldr	r1, [pc, #88]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cb0:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a13      	ldr	r2, [pc, #76]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fa50 	bl	8001160 <HAL_GetTick>
 8002cc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cc2:	e009      	b.n	8002cd8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cc4:	f7fe fa4c 	bl	8001160 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d902      	bls.n	8002cd8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	73fb      	strb	r3, [r7, #15]
          break;
 8002cd6:	e005      	b.n	8002ce4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ef      	beq.n	8002cc4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cea:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4904      	ldr	r1, [pc, #16]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000

08002d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e049      	b.n	8002dae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fd ffde 	bl	8000cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f000 fd9e 	bl	8003888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e049      	b.n	8002e5c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d106      	bne.n	8002de2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f841 	bl	8002e64 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3304      	adds	r3, #4
 8002df2:	4619      	mov	r1, r3
 8002df4:	4610      	mov	r0, r2
 8002df6:	f000 fd47 	bl	8003888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d109      	bne.n	8002e9c <HAL_TIM_OC_Start+0x24>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	bf14      	ite	ne
 8002e94:	2301      	movne	r3, #1
 8002e96:	2300      	moveq	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e03c      	b.n	8002f16 <HAL_TIM_OC_Start+0x9e>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d109      	bne.n	8002eb6 <HAL_TIM_OC_Start+0x3e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	bf14      	ite	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	2300      	moveq	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	e02f      	b.n	8002f16 <HAL_TIM_OC_Start+0x9e>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d109      	bne.n	8002ed0 <HAL_TIM_OC_Start+0x58>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	bf14      	ite	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	2300      	moveq	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	e022      	b.n	8002f16 <HAL_TIM_OC_Start+0x9e>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	d109      	bne.n	8002eea <HAL_TIM_OC_Start+0x72>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	bf14      	ite	ne
 8002ee2:	2301      	movne	r3, #1
 8002ee4:	2300      	moveq	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	e015      	b.n	8002f16 <HAL_TIM_OC_Start+0x9e>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d109      	bne.n	8002f04 <HAL_TIM_OC_Start+0x8c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	e008      	b.n	8002f16 <HAL_TIM_OC_Start+0x9e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e09c      	b.n	8003058 <HAL_TIM_OC_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d104      	bne.n	8002f2e <HAL_TIM_OC_Start+0xb6>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f2c:	e023      	b.n	8002f76 <HAL_TIM_OC_Start+0xfe>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d104      	bne.n	8002f3e <HAL_TIM_OC_Start+0xc6>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f3c:	e01b      	b.n	8002f76 <HAL_TIM_OC_Start+0xfe>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d104      	bne.n	8002f4e <HAL_TIM_OC_Start+0xd6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f4c:	e013      	b.n	8002f76 <HAL_TIM_OC_Start+0xfe>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b0c      	cmp	r3, #12
 8002f52:	d104      	bne.n	8002f5e <HAL_TIM_OC_Start+0xe6>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f5c:	e00b      	b.n	8002f76 <HAL_TIM_OC_Start+0xfe>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b10      	cmp	r3, #16
 8002f62:	d104      	bne.n	8002f6e <HAL_TIM_OC_Start+0xf6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f6c:	e003      	b.n	8002f76 <HAL_TIM_OC_Start+0xfe>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 f92b 	bl	80041da <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a35      	ldr	r2, [pc, #212]	@ (8003060 <HAL_TIM_OC_Start+0x1e8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_TIM_OC_Start+0x13e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a34      	ldr	r2, [pc, #208]	@ (8003064 <HAL_TIM_OC_Start+0x1ec>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00e      	beq.n	8002fb6 <HAL_TIM_OC_Start+0x13e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a32      	ldr	r2, [pc, #200]	@ (8003068 <HAL_TIM_OC_Start+0x1f0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d009      	beq.n	8002fb6 <HAL_TIM_OC_Start+0x13e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a31      	ldr	r2, [pc, #196]	@ (800306c <HAL_TIM_OC_Start+0x1f4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d004      	beq.n	8002fb6 <HAL_TIM_OC_Start+0x13e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a2f      	ldr	r2, [pc, #188]	@ (8003070 <HAL_TIM_OC_Start+0x1f8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <HAL_TIM_OC_Start+0x142>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_TIM_OC_Start+0x144>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a22      	ldr	r2, [pc, #136]	@ (8003060 <HAL_TIM_OC_Start+0x1e8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01d      	beq.n	8003016 <HAL_TIM_OC_Start+0x19e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe2:	d018      	beq.n	8003016 <HAL_TIM_OC_Start+0x19e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a22      	ldr	r2, [pc, #136]	@ (8003074 <HAL_TIM_OC_Start+0x1fc>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <HAL_TIM_OC_Start+0x19e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a21      	ldr	r2, [pc, #132]	@ (8003078 <HAL_TIM_OC_Start+0x200>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00e      	beq.n	8003016 <HAL_TIM_OC_Start+0x19e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800307c <HAL_TIM_OC_Start+0x204>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d009      	beq.n	8003016 <HAL_TIM_OC_Start+0x19e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a17      	ldr	r2, [pc, #92]	@ (8003064 <HAL_TIM_OC_Start+0x1ec>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d004      	beq.n	8003016 <HAL_TIM_OC_Start+0x19e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a15      	ldr	r2, [pc, #84]	@ (8003068 <HAL_TIM_OC_Start+0x1f0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d115      	bne.n	8003042 <HAL_TIM_OC_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	4b18      	ldr	r3, [pc, #96]	@ (8003080 <HAL_TIM_OC_Start+0x208>)
 800301e:	4013      	ands	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b06      	cmp	r3, #6
 8003026:	d015      	beq.n	8003054 <HAL_TIM_OC_Start+0x1dc>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800302e:	d011      	beq.n	8003054 <HAL_TIM_OC_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003040:	e008      	b.n	8003054 <HAL_TIM_OC_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e000      	b.n	8003056 <HAL_TIM_OC_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003054:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40012c00 	.word	0x40012c00
 8003064:	40013400 	.word	0x40013400
 8003068:	40014000 	.word	0x40014000
 800306c:	40014400 	.word	0x40014400
 8003070:	40014800 	.word	0x40014800
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	00010007 	.word	0x00010007

08003084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e049      	b.n	800312a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f841 	bl	8003132 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3304      	adds	r3, #4
 80030c0:	4619      	mov	r1, r3
 80030c2:	4610      	mov	r0, r2
 80030c4:	f000 fbe0 	bl	8003888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d109      	bne.n	800316c <HAL_TIM_PWM_Start+0x24>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e03c      	b.n	80031e6 <HAL_TIM_PWM_Start+0x9e>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b04      	cmp	r3, #4
 8003170:	d109      	bne.n	8003186 <HAL_TIM_PWM_Start+0x3e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	bf14      	ite	ne
 800317e:	2301      	movne	r3, #1
 8003180:	2300      	moveq	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	e02f      	b.n	80031e6 <HAL_TIM_PWM_Start+0x9e>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d109      	bne.n	80031a0 <HAL_TIM_PWM_Start+0x58>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e022      	b.n	80031e6 <HAL_TIM_PWM_Start+0x9e>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	d109      	bne.n	80031ba <HAL_TIM_PWM_Start+0x72>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	bf14      	ite	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	2300      	moveq	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	e015      	b.n	80031e6 <HAL_TIM_PWM_Start+0x9e>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d109      	bne.n	80031d4 <HAL_TIM_PWM_Start+0x8c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e008      	b.n	80031e6 <HAL_TIM_PWM_Start+0x9e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	bf14      	ite	ne
 80031e0:	2301      	movne	r3, #1
 80031e2:	2300      	moveq	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e09c      	b.n	8003328 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <HAL_TIM_PWM_Start+0xb6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031fc:	e023      	b.n	8003246 <HAL_TIM_PWM_Start+0xfe>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d104      	bne.n	800320e <HAL_TIM_PWM_Start+0xc6>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800320c:	e01b      	b.n	8003246 <HAL_TIM_PWM_Start+0xfe>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d104      	bne.n	800321e <HAL_TIM_PWM_Start+0xd6>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800321c:	e013      	b.n	8003246 <HAL_TIM_PWM_Start+0xfe>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b0c      	cmp	r3, #12
 8003222:	d104      	bne.n	800322e <HAL_TIM_PWM_Start+0xe6>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800322c:	e00b      	b.n	8003246 <HAL_TIM_PWM_Start+0xfe>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b10      	cmp	r3, #16
 8003232:	d104      	bne.n	800323e <HAL_TIM_PWM_Start+0xf6>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800323c:	e003      	b.n	8003246 <HAL_TIM_PWM_Start+0xfe>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2201      	movs	r2, #1
 800324c:	6839      	ldr	r1, [r7, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 ffc3 	bl	80041da <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a35      	ldr	r2, [pc, #212]	@ (8003330 <HAL_TIM_PWM_Start+0x1e8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_TIM_PWM_Start+0x13e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a34      	ldr	r2, [pc, #208]	@ (8003334 <HAL_TIM_PWM_Start+0x1ec>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00e      	beq.n	8003286 <HAL_TIM_PWM_Start+0x13e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a32      	ldr	r2, [pc, #200]	@ (8003338 <HAL_TIM_PWM_Start+0x1f0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d009      	beq.n	8003286 <HAL_TIM_PWM_Start+0x13e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a31      	ldr	r2, [pc, #196]	@ (800333c <HAL_TIM_PWM_Start+0x1f4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_TIM_PWM_Start+0x13e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a2f      	ldr	r2, [pc, #188]	@ (8003340 <HAL_TIM_PWM_Start+0x1f8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d101      	bne.n	800328a <HAL_TIM_PWM_Start+0x142>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_TIM_PWM_Start+0x144>
 800328a:	2300      	movs	r3, #0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800329e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a22      	ldr	r2, [pc, #136]	@ (8003330 <HAL_TIM_PWM_Start+0x1e8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01d      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x19e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b2:	d018      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x19e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a22      	ldr	r2, [pc, #136]	@ (8003344 <HAL_TIM_PWM_Start+0x1fc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x19e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a21      	ldr	r2, [pc, #132]	@ (8003348 <HAL_TIM_PWM_Start+0x200>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00e      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x19e>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1f      	ldr	r2, [pc, #124]	@ (800334c <HAL_TIM_PWM_Start+0x204>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d009      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x19e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a17      	ldr	r2, [pc, #92]	@ (8003334 <HAL_TIM_PWM_Start+0x1ec>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x19e>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a15      	ldr	r2, [pc, #84]	@ (8003338 <HAL_TIM_PWM_Start+0x1f0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d115      	bne.n	8003312 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	4b18      	ldr	r3, [pc, #96]	@ (8003350 <HAL_TIM_PWM_Start+0x208>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b06      	cmp	r3, #6
 80032f6:	d015      	beq.n	8003324 <HAL_TIM_PWM_Start+0x1dc>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032fe:	d011      	beq.n	8003324 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003310:	e008      	b.n	8003324 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e000      	b.n	8003326 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003324:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40013400 	.word	0x40013400
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800
 8003344:	40000400 	.word	0x40000400
 8003348:	40000800 	.word	0x40000800
 800334c:	40000c00 	.word	0x40000c00
 8003350:	00010007 	.word	0x00010007

08003354 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_TIM_OC_ConfigChannel+0x1e>
 800336e:	2302      	movs	r3, #2
 8003370:	e066      	b.n	8003440 <HAL_TIM_OC_ConfigChannel+0xec>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b14      	cmp	r3, #20
 800337e:	d857      	bhi.n	8003430 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003380:	a201      	add	r2, pc, #4	@ (adr r2, 8003388 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	080033dd 	.word	0x080033dd
 800338c:	08003431 	.word	0x08003431
 8003390:	08003431 	.word	0x08003431
 8003394:	08003431 	.word	0x08003431
 8003398:	080033eb 	.word	0x080033eb
 800339c:	08003431 	.word	0x08003431
 80033a0:	08003431 	.word	0x08003431
 80033a4:	08003431 	.word	0x08003431
 80033a8:	080033f9 	.word	0x080033f9
 80033ac:	08003431 	.word	0x08003431
 80033b0:	08003431 	.word	0x08003431
 80033b4:	08003431 	.word	0x08003431
 80033b8:	08003407 	.word	0x08003407
 80033bc:	08003431 	.word	0x08003431
 80033c0:	08003431 	.word	0x08003431
 80033c4:	08003431 	.word	0x08003431
 80033c8:	08003415 	.word	0x08003415
 80033cc:	08003431 	.word	0x08003431
 80033d0:	08003431 	.word	0x08003431
 80033d4:	08003431 	.word	0x08003431
 80033d8:	08003423 	.word	0x08003423
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 faf6 	bl	80039d4 <TIM_OC1_SetConfig>
      break;
 80033e8:	e025      	b.n	8003436 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fb7f 	bl	8003af4 <TIM_OC2_SetConfig>
      break;
 80033f6:	e01e      	b.n	8003436 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fc02 	bl	8003c08 <TIM_OC3_SetConfig>
      break;
 8003404:	e017      	b.n	8003436 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68b9      	ldr	r1, [r7, #8]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fc83 	bl	8003d18 <TIM_OC4_SetConfig>
      break;
 8003412:	e010      	b.n	8003436 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fce6 	bl	8003dec <TIM_OC5_SetConfig>
      break;
 8003420:	e009      	b.n	8003436 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fd43 	bl	8003eb4 <TIM_OC6_SetConfig>
      break;
 800342e:	e002      	b.n	8003436 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	75fb      	strb	r3, [r7, #23]
      break;
 8003434:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800343e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003462:	2302      	movs	r3, #2
 8003464:	e0ff      	b.n	8003666 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b14      	cmp	r3, #20
 8003472:	f200 80f0 	bhi.w	8003656 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003476:	a201      	add	r2, pc, #4	@ (adr r2, 800347c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347c:	080034d1 	.word	0x080034d1
 8003480:	08003657 	.word	0x08003657
 8003484:	08003657 	.word	0x08003657
 8003488:	08003657 	.word	0x08003657
 800348c:	08003511 	.word	0x08003511
 8003490:	08003657 	.word	0x08003657
 8003494:	08003657 	.word	0x08003657
 8003498:	08003657 	.word	0x08003657
 800349c:	08003553 	.word	0x08003553
 80034a0:	08003657 	.word	0x08003657
 80034a4:	08003657 	.word	0x08003657
 80034a8:	08003657 	.word	0x08003657
 80034ac:	08003593 	.word	0x08003593
 80034b0:	08003657 	.word	0x08003657
 80034b4:	08003657 	.word	0x08003657
 80034b8:	08003657 	.word	0x08003657
 80034bc:	080035d5 	.word	0x080035d5
 80034c0:	08003657 	.word	0x08003657
 80034c4:	08003657 	.word	0x08003657
 80034c8:	08003657 	.word	0x08003657
 80034cc:	08003615 	.word	0x08003615
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fa7c 	bl	80039d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0208 	orr.w	r2, r2, #8
 80034ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0204 	bic.w	r2, r2, #4
 80034fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6999      	ldr	r1, [r3, #24]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	619a      	str	r2, [r3, #24]
      break;
 800350e:	e0a5      	b.n	800365c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	4618      	mov	r0, r3
 8003518:	f000 faec 	bl	8003af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800352a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6999      	ldr	r1, [r3, #24]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	021a      	lsls	r2, r3, #8
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	619a      	str	r2, [r3, #24]
      break;
 8003550:	e084      	b.n	800365c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fb55 	bl	8003c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0208 	orr.w	r2, r2, #8
 800356c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0204 	bic.w	r2, r2, #4
 800357c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69d9      	ldr	r1, [r3, #28]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	61da      	str	r2, [r3, #28]
      break;
 8003590:	e064      	b.n	800365c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fbbd 	bl	8003d18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69d9      	ldr	r1, [r3, #28]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	021a      	lsls	r2, r3, #8
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	61da      	str	r2, [r3, #28]
      break;
 80035d2:	e043      	b.n	800365c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fc06 	bl	8003dec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0208 	orr.w	r2, r2, #8
 80035ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0204 	bic.w	r2, r2, #4
 80035fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003612:	e023      	b.n	800365c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fc4a 	bl	8003eb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800362e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800363e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	021a      	lsls	r2, r3, #8
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003654:	e002      	b.n	800365c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
      break;
 800365a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003664:	7dfb      	ldrb	r3, [r7, #23]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop

08003670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_TIM_ConfigClockSource+0x1c>
 8003688:	2302      	movs	r3, #2
 800368a:	e0b6      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x18a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c8:	d03e      	beq.n	8003748 <HAL_TIM_ConfigClockSource+0xd8>
 80036ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ce:	f200 8087 	bhi.w	80037e0 <HAL_TIM_ConfigClockSource+0x170>
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d6:	f000 8086 	beq.w	80037e6 <HAL_TIM_ConfigClockSource+0x176>
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036de:	d87f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x170>
 80036e0:	2b70      	cmp	r3, #112	@ 0x70
 80036e2:	d01a      	beq.n	800371a <HAL_TIM_ConfigClockSource+0xaa>
 80036e4:	2b70      	cmp	r3, #112	@ 0x70
 80036e6:	d87b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x170>
 80036e8:	2b60      	cmp	r3, #96	@ 0x60
 80036ea:	d050      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x11e>
 80036ec:	2b60      	cmp	r3, #96	@ 0x60
 80036ee:	d877      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x170>
 80036f0:	2b50      	cmp	r3, #80	@ 0x50
 80036f2:	d03c      	beq.n	800376e <HAL_TIM_ConfigClockSource+0xfe>
 80036f4:	2b50      	cmp	r3, #80	@ 0x50
 80036f6:	d873      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x170>
 80036f8:	2b40      	cmp	r3, #64	@ 0x40
 80036fa:	d058      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x13e>
 80036fc:	2b40      	cmp	r3, #64	@ 0x40
 80036fe:	d86f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x170>
 8003700:	2b30      	cmp	r3, #48	@ 0x30
 8003702:	d064      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15e>
 8003704:	2b30      	cmp	r3, #48	@ 0x30
 8003706:	d86b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x170>
 8003708:	2b20      	cmp	r3, #32
 800370a:	d060      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15e>
 800370c:	2b20      	cmp	r3, #32
 800370e:	d867      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x170>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05c      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15e>
 8003714:	2b10      	cmp	r3, #16
 8003716:	d05a      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15e>
 8003718:	e062      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800372a:	f000 fd36 	bl	800419a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800373c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	609a      	str	r2, [r3, #8]
      break;
 8003746:	e04f      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003758:	f000 fd1f 	bl	800419a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800376a:	609a      	str	r2, [r3, #8]
      break;
 800376c:	e03c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800377a:	461a      	mov	r2, r3
 800377c:	f000 fc93 	bl	80040a6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2150      	movs	r1, #80	@ 0x50
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fcec 	bl	8004164 <TIM_ITRx_SetConfig>
      break;
 800378c:	e02c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800379a:	461a      	mov	r2, r3
 800379c:	f000 fcb2 	bl	8004104 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2160      	movs	r1, #96	@ 0x60
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fcdc 	bl	8004164 <TIM_ITRx_SetConfig>
      break;
 80037ac:	e01c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ba:	461a      	mov	r2, r3
 80037bc:	f000 fc73 	bl	80040a6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2140      	movs	r1, #64	@ 0x40
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fccc 	bl	8004164 <TIM_ITRx_SetConfig>
      break;
 80037cc:	e00c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f000 fcc3 	bl	8004164 <TIM_ITRx_SetConfig>
      break;
 80037de:	e003      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	e000      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80037e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_TIM_SlaveConfigSynchro+0x18>
 8003816:	2302      	movs	r3, #2
 8003818:	e031      	b.n	800387e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800382a:	6839      	ldr	r1, [r7, #0]
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fba7 	bl	8003f80 <TIM_SlaveTimer_SetConfig>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d009      	beq.n	800384c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e018      	b.n	800387e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800385a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800386a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a46      	ldr	r2, [pc, #280]	@ (80039b4 <TIM_Base_SetConfig+0x12c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d013      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a6:	d00f      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a43      	ldr	r2, [pc, #268]	@ (80039b8 <TIM_Base_SetConfig+0x130>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00b      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a42      	ldr	r2, [pc, #264]	@ (80039bc <TIM_Base_SetConfig+0x134>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d007      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a41      	ldr	r2, [pc, #260]	@ (80039c0 <TIM_Base_SetConfig+0x138>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d003      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a40      	ldr	r2, [pc, #256]	@ (80039c4 <TIM_Base_SetConfig+0x13c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d108      	bne.n	80038da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a35      	ldr	r2, [pc, #212]	@ (80039b4 <TIM_Base_SetConfig+0x12c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01f      	beq.n	8003922 <TIM_Base_SetConfig+0x9a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e8:	d01b      	beq.n	8003922 <TIM_Base_SetConfig+0x9a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a32      	ldr	r2, [pc, #200]	@ (80039b8 <TIM_Base_SetConfig+0x130>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d017      	beq.n	8003922 <TIM_Base_SetConfig+0x9a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a31      	ldr	r2, [pc, #196]	@ (80039bc <TIM_Base_SetConfig+0x134>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <TIM_Base_SetConfig+0x9a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a30      	ldr	r2, [pc, #192]	@ (80039c0 <TIM_Base_SetConfig+0x138>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00f      	beq.n	8003922 <TIM_Base_SetConfig+0x9a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a2f      	ldr	r2, [pc, #188]	@ (80039c4 <TIM_Base_SetConfig+0x13c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00b      	beq.n	8003922 <TIM_Base_SetConfig+0x9a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2e      	ldr	r2, [pc, #184]	@ (80039c8 <TIM_Base_SetConfig+0x140>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <TIM_Base_SetConfig+0x9a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2d      	ldr	r2, [pc, #180]	@ (80039cc <TIM_Base_SetConfig+0x144>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <TIM_Base_SetConfig+0x9a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2c      	ldr	r2, [pc, #176]	@ (80039d0 <TIM_Base_SetConfig+0x148>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d108      	bne.n	8003934 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a16      	ldr	r2, [pc, #88]	@ (80039b4 <TIM_Base_SetConfig+0x12c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00f      	beq.n	8003980 <TIM_Base_SetConfig+0xf8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a18      	ldr	r2, [pc, #96]	@ (80039c4 <TIM_Base_SetConfig+0x13c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00b      	beq.n	8003980 <TIM_Base_SetConfig+0xf8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a17      	ldr	r2, [pc, #92]	@ (80039c8 <TIM_Base_SetConfig+0x140>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_Base_SetConfig+0xf8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a16      	ldr	r2, [pc, #88]	@ (80039cc <TIM_Base_SetConfig+0x144>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0xf8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a15      	ldr	r2, [pc, #84]	@ (80039d0 <TIM_Base_SetConfig+0x148>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d103      	bne.n	8003988 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d105      	bne.n	80039a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f023 0201 	bic.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	611a      	str	r2, [r3, #16]
  }
}
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800
 80039c0:	40000c00 	.word	0x40000c00
 80039c4:	40013400 	.word	0x40013400
 80039c8:	40014000 	.word	0x40014000
 80039cc:	40014400 	.word	0x40014400
 80039d0:	40014800 	.word	0x40014800

080039d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f023 0201 	bic.w	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0303 	bic.w	r3, r3, #3
 8003a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f023 0302 	bic.w	r3, r3, #2
 8003a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae0 <TIM_OC1_SetConfig+0x10c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00f      	beq.n	8003a54 <TIM_OC1_SetConfig+0x80>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a2b      	ldr	r2, [pc, #172]	@ (8003ae4 <TIM_OC1_SetConfig+0x110>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00b      	beq.n	8003a54 <TIM_OC1_SetConfig+0x80>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae8 <TIM_OC1_SetConfig+0x114>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d007      	beq.n	8003a54 <TIM_OC1_SetConfig+0x80>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a29      	ldr	r2, [pc, #164]	@ (8003aec <TIM_OC1_SetConfig+0x118>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d003      	beq.n	8003a54 <TIM_OC1_SetConfig+0x80>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a28      	ldr	r2, [pc, #160]	@ (8003af0 <TIM_OC1_SetConfig+0x11c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d10c      	bne.n	8003a6e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f023 0308 	bic.w	r3, r3, #8
 8003a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f023 0304 	bic.w	r3, r3, #4
 8003a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae0 <TIM_OC1_SetConfig+0x10c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00f      	beq.n	8003a96 <TIM_OC1_SetConfig+0xc2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae4 <TIM_OC1_SetConfig+0x110>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <TIM_OC1_SetConfig+0xc2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a19      	ldr	r2, [pc, #100]	@ (8003ae8 <TIM_OC1_SetConfig+0x114>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_OC1_SetConfig+0xc2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a18      	ldr	r2, [pc, #96]	@ (8003aec <TIM_OC1_SetConfig+0x118>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_OC1_SetConfig+0xc2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a17      	ldr	r2, [pc, #92]	@ (8003af0 <TIM_OC1_SetConfig+0x11c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d111      	bne.n	8003aba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	621a      	str	r2, [r3, #32]
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40012c00 	.word	0x40012c00
 8003ae4:	40013400 	.word	0x40013400
 8003ae8:	40014000 	.word	0x40014000
 8003aec:	40014400 	.word	0x40014400
 8003af0:	40014800 	.word	0x40014800

08003af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f023 0210 	bic.w	r2, r3, #16
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f023 0320 	bic.w	r3, r3, #32
 8003b42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a28      	ldr	r2, [pc, #160]	@ (8003bf4 <TIM_OC2_SetConfig+0x100>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_OC2_SetConfig+0x6c>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a27      	ldr	r2, [pc, #156]	@ (8003bf8 <TIM_OC2_SetConfig+0x104>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d10d      	bne.n	8003b7c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf4 <TIM_OC2_SetConfig+0x100>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00f      	beq.n	8003ba4 <TIM_OC2_SetConfig+0xb0>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a1c      	ldr	r2, [pc, #112]	@ (8003bf8 <TIM_OC2_SetConfig+0x104>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00b      	beq.n	8003ba4 <TIM_OC2_SetConfig+0xb0>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bfc <TIM_OC2_SetConfig+0x108>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d007      	beq.n	8003ba4 <TIM_OC2_SetConfig+0xb0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a1a      	ldr	r2, [pc, #104]	@ (8003c00 <TIM_OC2_SetConfig+0x10c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_OC2_SetConfig+0xb0>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a19      	ldr	r2, [pc, #100]	@ (8003c04 <TIM_OC2_SetConfig+0x110>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d113      	bne.n	8003bcc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003baa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40013400 	.word	0x40013400
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	40014400 	.word	0x40014400
 8003c04:	40014800 	.word	0x40014800

08003c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0303 	bic.w	r3, r3, #3
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a27      	ldr	r2, [pc, #156]	@ (8003d04 <TIM_OC3_SetConfig+0xfc>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <TIM_OC3_SetConfig+0x6a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a26      	ldr	r2, [pc, #152]	@ (8003d08 <TIM_OC3_SetConfig+0x100>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d10d      	bne.n	8003c8e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1c      	ldr	r2, [pc, #112]	@ (8003d04 <TIM_OC3_SetConfig+0xfc>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00f      	beq.n	8003cb6 <TIM_OC3_SetConfig+0xae>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a1b      	ldr	r2, [pc, #108]	@ (8003d08 <TIM_OC3_SetConfig+0x100>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00b      	beq.n	8003cb6 <TIM_OC3_SetConfig+0xae>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8003d0c <TIM_OC3_SetConfig+0x104>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <TIM_OC3_SetConfig+0xae>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a19      	ldr	r2, [pc, #100]	@ (8003d10 <TIM_OC3_SetConfig+0x108>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d003      	beq.n	8003cb6 <TIM_OC3_SetConfig+0xae>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a18      	ldr	r2, [pc, #96]	@ (8003d14 <TIM_OC3_SetConfig+0x10c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d113      	bne.n	8003cde <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	621a      	str	r2, [r3, #32]
}
 8003cf8:	bf00      	nop
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40013400 	.word	0x40013400
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	40014400 	.word	0x40014400
 8003d14:	40014800 	.word	0x40014800

08003d18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	031b      	lsls	r3, r3, #12
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a18      	ldr	r2, [pc, #96]	@ (8003dd8 <TIM_OC4_SetConfig+0xc0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00f      	beq.n	8003d9c <TIM_OC4_SetConfig+0x84>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a17      	ldr	r2, [pc, #92]	@ (8003ddc <TIM_OC4_SetConfig+0xc4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00b      	beq.n	8003d9c <TIM_OC4_SetConfig+0x84>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a16      	ldr	r2, [pc, #88]	@ (8003de0 <TIM_OC4_SetConfig+0xc8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d007      	beq.n	8003d9c <TIM_OC4_SetConfig+0x84>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a15      	ldr	r2, [pc, #84]	@ (8003de4 <TIM_OC4_SetConfig+0xcc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d003      	beq.n	8003d9c <TIM_OC4_SetConfig+0x84>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a14      	ldr	r2, [pc, #80]	@ (8003de8 <TIM_OC4_SetConfig+0xd0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d109      	bne.n	8003db0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003da2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	019b      	lsls	r3, r3, #6
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	40013400 	.word	0x40013400
 8003de0:	40014000 	.word	0x40014000
 8003de4:	40014400 	.word	0x40014400
 8003de8:	40014800 	.word	0x40014800

08003dec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003e30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	041b      	lsls	r3, r3, #16
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a17      	ldr	r2, [pc, #92]	@ (8003ea0 <TIM_OC5_SetConfig+0xb4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00f      	beq.n	8003e66 <TIM_OC5_SetConfig+0x7a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a16      	ldr	r2, [pc, #88]	@ (8003ea4 <TIM_OC5_SetConfig+0xb8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00b      	beq.n	8003e66 <TIM_OC5_SetConfig+0x7a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a15      	ldr	r2, [pc, #84]	@ (8003ea8 <TIM_OC5_SetConfig+0xbc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d007      	beq.n	8003e66 <TIM_OC5_SetConfig+0x7a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a14      	ldr	r2, [pc, #80]	@ (8003eac <TIM_OC5_SetConfig+0xc0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d003      	beq.n	8003e66 <TIM_OC5_SetConfig+0x7a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a13      	ldr	r2, [pc, #76]	@ (8003eb0 <TIM_OC5_SetConfig+0xc4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d109      	bne.n	8003e7a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	621a      	str	r2, [r3, #32]
}
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40013400 	.word	0x40013400
 8003ea8:	40014000 	.word	0x40014000
 8003eac:	40014400 	.word	0x40014400
 8003eb0:	40014800 	.word	0x40014800

08003eb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	051b      	lsls	r3, r3, #20
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a18      	ldr	r2, [pc, #96]	@ (8003f6c <TIM_OC6_SetConfig+0xb8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00f      	beq.n	8003f30 <TIM_OC6_SetConfig+0x7c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a17      	ldr	r2, [pc, #92]	@ (8003f70 <TIM_OC6_SetConfig+0xbc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00b      	beq.n	8003f30 <TIM_OC6_SetConfig+0x7c>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a16      	ldr	r2, [pc, #88]	@ (8003f74 <TIM_OC6_SetConfig+0xc0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d007      	beq.n	8003f30 <TIM_OC6_SetConfig+0x7c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a15      	ldr	r2, [pc, #84]	@ (8003f78 <TIM_OC6_SetConfig+0xc4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <TIM_OC6_SetConfig+0x7c>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a14      	ldr	r2, [pc, #80]	@ (8003f7c <TIM_OC6_SetConfig+0xc8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d109      	bne.n	8003f44 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	029b      	lsls	r3, r3, #10
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40013400 	.word	0x40013400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800

08003f80 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f9c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fae:	f023 0307 	bic.w	r3, r3, #7
 8003fb2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b70      	cmp	r3, #112	@ 0x70
 8003fcc:	d01a      	beq.n	8004004 <TIM_SlaveTimer_SetConfig+0x84>
 8003fce:	2b70      	cmp	r3, #112	@ 0x70
 8003fd0:	d860      	bhi.n	8004094 <TIM_SlaveTimer_SetConfig+0x114>
 8003fd2:	2b60      	cmp	r3, #96	@ 0x60
 8003fd4:	d054      	beq.n	8004080 <TIM_SlaveTimer_SetConfig+0x100>
 8003fd6:	2b60      	cmp	r3, #96	@ 0x60
 8003fd8:	d85c      	bhi.n	8004094 <TIM_SlaveTimer_SetConfig+0x114>
 8003fda:	2b50      	cmp	r3, #80	@ 0x50
 8003fdc:	d046      	beq.n	800406c <TIM_SlaveTimer_SetConfig+0xec>
 8003fde:	2b50      	cmp	r3, #80	@ 0x50
 8003fe0:	d858      	bhi.n	8004094 <TIM_SlaveTimer_SetConfig+0x114>
 8003fe2:	2b40      	cmp	r3, #64	@ 0x40
 8003fe4:	d019      	beq.n	800401a <TIM_SlaveTimer_SetConfig+0x9a>
 8003fe6:	2b40      	cmp	r3, #64	@ 0x40
 8003fe8:	d854      	bhi.n	8004094 <TIM_SlaveTimer_SetConfig+0x114>
 8003fea:	2b30      	cmp	r3, #48	@ 0x30
 8003fec:	d055      	beq.n	800409a <TIM_SlaveTimer_SetConfig+0x11a>
 8003fee:	2b30      	cmp	r3, #48	@ 0x30
 8003ff0:	d850      	bhi.n	8004094 <TIM_SlaveTimer_SetConfig+0x114>
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d051      	beq.n	800409a <TIM_SlaveTimer_SetConfig+0x11a>
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d84c      	bhi.n	8004094 <TIM_SlaveTimer_SetConfig+0x114>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d04d      	beq.n	800409a <TIM_SlaveTimer_SetConfig+0x11a>
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d04b      	beq.n	800409a <TIM_SlaveTimer_SetConfig+0x11a>
 8004002:	e047      	b.n	8004094 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004014:	f000 f8c1 	bl	800419a <TIM_ETR_SetConfig>
      break;
 8004018:	e040      	b.n	800409c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b05      	cmp	r3, #5
 8004020:	d101      	bne.n	8004026 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e03b      	b.n	800409e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800404c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	4313      	orrs	r3, r2
 8004058:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	621a      	str	r2, [r3, #32]
      break;
 800406a:	e017      	b.n	800409c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004078:	461a      	mov	r2, r3
 800407a:	f000 f814 	bl	80040a6 <TIM_TI1_ConfigInputStage>
      break;
 800407e:	e00d      	b.n	800409c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800408c:	461a      	mov	r2, r3
 800408e:	f000 f839 	bl	8004104 <TIM_TI2_ConfigInputStage>
      break;
 8004092:	e003      	b.n	800409c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
      break;
 8004098:	e000      	b.n	800409c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800409a:	bf00      	nop
  }

  return status;
 800409c:	7dfb      	ldrb	r3, [r7, #23]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b087      	sub	sp, #28
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f023 0201 	bic.w	r2, r3, #1
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f023 030a 	bic.w	r3, r3, #10
 80040e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	621a      	str	r2, [r3, #32]
}
 80040f8:	bf00      	nop
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f023 0210 	bic.w	r2, r3, #16
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800412e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	031b      	lsls	r3, r3, #12
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004140:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	621a      	str	r2, [r3, #32]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800417a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	f043 0307 	orr.w	r3, r3, #7
 8004186:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	609a      	str	r2, [r3, #8]
}
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800419a:	b480      	push	{r7}
 800419c:	b087      	sub	sp, #28
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	021a      	lsls	r2, r3, #8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	431a      	orrs	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	609a      	str	r2, [r3, #8]
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041da:	b480      	push	{r7}
 80041dc:	b087      	sub	sp, #28
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	2201      	movs	r2, #1
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1a      	ldr	r2, [r3, #32]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	43db      	mvns	r3, r3
 80041fc:	401a      	ands	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1a      	ldr	r2, [r3, #32]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	431a      	orrs	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004238:	2302      	movs	r3, #2
 800423a:	e068      	b.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a2e      	ldr	r2, [pc, #184]	@ (800431c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a2d      	ldr	r2, [pc, #180]	@ (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d108      	bne.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004276:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004288:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1e      	ldr	r2, [pc, #120]	@ (800431c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d01d      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ae:	d018      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004324 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1a      	ldr	r2, [pc, #104]	@ (8004328 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00e      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a18      	ldr	r2, [pc, #96]	@ (800432c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d009      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a13      	ldr	r2, [pc, #76]	@ (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d004      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a14      	ldr	r2, [pc, #80]	@ (8004330 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10c      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40013400 	.word	0x40013400
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800
 800432c:	40000c00 	.word	0x40000c00
 8004330:	40014000 	.word	0x40014000

08004334 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800434c:	2302      	movs	r3, #2
 800434e:	e065      	b.n	800441c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a16      	ldr	r2, [pc, #88]	@ (8004428 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a14      	ldr	r2, [pc, #80]	@ (800442c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d115      	bne.n	800440a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	051b      	lsls	r3, r3, #20
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40013400 	.word	0x40013400

08004430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e040      	b.n	80044c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fc fd4c 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2224      	movs	r2, #36	@ 0x24
 800445c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fae0 	bl	8004a3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f825 	bl	80044cc <UART_SetConfig>
 8004482:	4603      	mov	r3, r0
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e01b      	b.n	80044c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800449a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fb5f 	bl	8004b80 <UART_CheckIdleState>
 80044c2:	4603      	mov	r3, r0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044d0:	b08a      	sub	sp, #40	@ 0x28
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4ba4      	ldr	r3, [pc, #656]	@ (800478c <UART_SetConfig+0x2c0>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004504:	430b      	orrs	r3, r1
 8004506:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a99      	ldr	r2, [pc, #612]	@ (8004790 <UART_SetConfig+0x2c4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004534:	4313      	orrs	r3, r2
 8004536:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a90      	ldr	r2, [pc, #576]	@ (8004794 <UART_SetConfig+0x2c8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d126      	bne.n	80045a4 <UART_SetConfig+0xd8>
 8004556:	4b90      	ldr	r3, [pc, #576]	@ (8004798 <UART_SetConfig+0x2cc>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b03      	cmp	r3, #3
 8004562:	d81b      	bhi.n	800459c <UART_SetConfig+0xd0>
 8004564:	a201      	add	r2, pc, #4	@ (adr r2, 800456c <UART_SetConfig+0xa0>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	0800457d 	.word	0x0800457d
 8004570:	0800458d 	.word	0x0800458d
 8004574:	08004585 	.word	0x08004585
 8004578:	08004595 	.word	0x08004595
 800457c:	2301      	movs	r3, #1
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004582:	e116      	b.n	80047b2 <UART_SetConfig+0x2e6>
 8004584:	2302      	movs	r3, #2
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800458a:	e112      	b.n	80047b2 <UART_SetConfig+0x2e6>
 800458c:	2304      	movs	r3, #4
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004592:	e10e      	b.n	80047b2 <UART_SetConfig+0x2e6>
 8004594:	2308      	movs	r3, #8
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800459a:	e10a      	b.n	80047b2 <UART_SetConfig+0x2e6>
 800459c:	2310      	movs	r3, #16
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a2:	e106      	b.n	80047b2 <UART_SetConfig+0x2e6>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a7c      	ldr	r2, [pc, #496]	@ (800479c <UART_SetConfig+0x2d0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d138      	bne.n	8004620 <UART_SetConfig+0x154>
 80045ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004798 <UART_SetConfig+0x2cc>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b4:	f003 030c 	and.w	r3, r3, #12
 80045b8:	2b0c      	cmp	r3, #12
 80045ba:	d82d      	bhi.n	8004618 <UART_SetConfig+0x14c>
 80045bc:	a201      	add	r2, pc, #4	@ (adr r2, 80045c4 <UART_SetConfig+0xf8>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045f9 	.word	0x080045f9
 80045c8:	08004619 	.word	0x08004619
 80045cc:	08004619 	.word	0x08004619
 80045d0:	08004619 	.word	0x08004619
 80045d4:	08004609 	.word	0x08004609
 80045d8:	08004619 	.word	0x08004619
 80045dc:	08004619 	.word	0x08004619
 80045e0:	08004619 	.word	0x08004619
 80045e4:	08004601 	.word	0x08004601
 80045e8:	08004619 	.word	0x08004619
 80045ec:	08004619 	.word	0x08004619
 80045f0:	08004619 	.word	0x08004619
 80045f4:	08004611 	.word	0x08004611
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fe:	e0d8      	b.n	80047b2 <UART_SetConfig+0x2e6>
 8004600:	2302      	movs	r3, #2
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004606:	e0d4      	b.n	80047b2 <UART_SetConfig+0x2e6>
 8004608:	2304      	movs	r3, #4
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460e:	e0d0      	b.n	80047b2 <UART_SetConfig+0x2e6>
 8004610:	2308      	movs	r3, #8
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004616:	e0cc      	b.n	80047b2 <UART_SetConfig+0x2e6>
 8004618:	2310      	movs	r3, #16
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461e:	e0c8      	b.n	80047b2 <UART_SetConfig+0x2e6>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a5e      	ldr	r2, [pc, #376]	@ (80047a0 <UART_SetConfig+0x2d4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d125      	bne.n	8004676 <UART_SetConfig+0x1aa>
 800462a:	4b5b      	ldr	r3, [pc, #364]	@ (8004798 <UART_SetConfig+0x2cc>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004630:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004634:	2b30      	cmp	r3, #48	@ 0x30
 8004636:	d016      	beq.n	8004666 <UART_SetConfig+0x19a>
 8004638:	2b30      	cmp	r3, #48	@ 0x30
 800463a:	d818      	bhi.n	800466e <UART_SetConfig+0x1a2>
 800463c:	2b20      	cmp	r3, #32
 800463e:	d00a      	beq.n	8004656 <UART_SetConfig+0x18a>
 8004640:	2b20      	cmp	r3, #32
 8004642:	d814      	bhi.n	800466e <UART_SetConfig+0x1a2>
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <UART_SetConfig+0x182>
 8004648:	2b10      	cmp	r3, #16
 800464a:	d008      	beq.n	800465e <UART_SetConfig+0x192>
 800464c:	e00f      	b.n	800466e <UART_SetConfig+0x1a2>
 800464e:	2300      	movs	r3, #0
 8004650:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004654:	e0ad      	b.n	80047b2 <UART_SetConfig+0x2e6>
 8004656:	2302      	movs	r3, #2
 8004658:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800465c:	e0a9      	b.n	80047b2 <UART_SetConfig+0x2e6>
 800465e:	2304      	movs	r3, #4
 8004660:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004664:	e0a5      	b.n	80047b2 <UART_SetConfig+0x2e6>
 8004666:	2308      	movs	r3, #8
 8004668:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466c:	e0a1      	b.n	80047b2 <UART_SetConfig+0x2e6>
 800466e:	2310      	movs	r3, #16
 8004670:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004674:	e09d      	b.n	80047b2 <UART_SetConfig+0x2e6>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a4a      	ldr	r2, [pc, #296]	@ (80047a4 <UART_SetConfig+0x2d8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d125      	bne.n	80046cc <UART_SetConfig+0x200>
 8004680:	4b45      	ldr	r3, [pc, #276]	@ (8004798 <UART_SetConfig+0x2cc>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004686:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800468a:	2bc0      	cmp	r3, #192	@ 0xc0
 800468c:	d016      	beq.n	80046bc <UART_SetConfig+0x1f0>
 800468e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004690:	d818      	bhi.n	80046c4 <UART_SetConfig+0x1f8>
 8004692:	2b80      	cmp	r3, #128	@ 0x80
 8004694:	d00a      	beq.n	80046ac <UART_SetConfig+0x1e0>
 8004696:	2b80      	cmp	r3, #128	@ 0x80
 8004698:	d814      	bhi.n	80046c4 <UART_SetConfig+0x1f8>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <UART_SetConfig+0x1d8>
 800469e:	2b40      	cmp	r3, #64	@ 0x40
 80046a0:	d008      	beq.n	80046b4 <UART_SetConfig+0x1e8>
 80046a2:	e00f      	b.n	80046c4 <UART_SetConfig+0x1f8>
 80046a4:	2300      	movs	r3, #0
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046aa:	e082      	b.n	80047b2 <UART_SetConfig+0x2e6>
 80046ac:	2302      	movs	r3, #2
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b2:	e07e      	b.n	80047b2 <UART_SetConfig+0x2e6>
 80046b4:	2304      	movs	r3, #4
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ba:	e07a      	b.n	80047b2 <UART_SetConfig+0x2e6>
 80046bc:	2308      	movs	r3, #8
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c2:	e076      	b.n	80047b2 <UART_SetConfig+0x2e6>
 80046c4:	2310      	movs	r3, #16
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ca:	e072      	b.n	80047b2 <UART_SetConfig+0x2e6>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a35      	ldr	r2, [pc, #212]	@ (80047a8 <UART_SetConfig+0x2dc>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d12a      	bne.n	800472c <UART_SetConfig+0x260>
 80046d6:	4b30      	ldr	r3, [pc, #192]	@ (8004798 <UART_SetConfig+0x2cc>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046e4:	d01a      	beq.n	800471c <UART_SetConfig+0x250>
 80046e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ea:	d81b      	bhi.n	8004724 <UART_SetConfig+0x258>
 80046ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f0:	d00c      	beq.n	800470c <UART_SetConfig+0x240>
 80046f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f6:	d815      	bhi.n	8004724 <UART_SetConfig+0x258>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <UART_SetConfig+0x238>
 80046fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004700:	d008      	beq.n	8004714 <UART_SetConfig+0x248>
 8004702:	e00f      	b.n	8004724 <UART_SetConfig+0x258>
 8004704:	2300      	movs	r3, #0
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470a:	e052      	b.n	80047b2 <UART_SetConfig+0x2e6>
 800470c:	2302      	movs	r3, #2
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004712:	e04e      	b.n	80047b2 <UART_SetConfig+0x2e6>
 8004714:	2304      	movs	r3, #4
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471a:	e04a      	b.n	80047b2 <UART_SetConfig+0x2e6>
 800471c:	2308      	movs	r3, #8
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004722:	e046      	b.n	80047b2 <UART_SetConfig+0x2e6>
 8004724:	2310      	movs	r3, #16
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472a:	e042      	b.n	80047b2 <UART_SetConfig+0x2e6>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a17      	ldr	r2, [pc, #92]	@ (8004790 <UART_SetConfig+0x2c4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d13a      	bne.n	80047ac <UART_SetConfig+0x2e0>
 8004736:	4b18      	ldr	r3, [pc, #96]	@ (8004798 <UART_SetConfig+0x2cc>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004740:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004744:	d01a      	beq.n	800477c <UART_SetConfig+0x2b0>
 8004746:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800474a:	d81b      	bhi.n	8004784 <UART_SetConfig+0x2b8>
 800474c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004750:	d00c      	beq.n	800476c <UART_SetConfig+0x2a0>
 8004752:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004756:	d815      	bhi.n	8004784 <UART_SetConfig+0x2b8>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <UART_SetConfig+0x298>
 800475c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004760:	d008      	beq.n	8004774 <UART_SetConfig+0x2a8>
 8004762:	e00f      	b.n	8004784 <UART_SetConfig+0x2b8>
 8004764:	2300      	movs	r3, #0
 8004766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476a:	e022      	b.n	80047b2 <UART_SetConfig+0x2e6>
 800476c:	2302      	movs	r3, #2
 800476e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004772:	e01e      	b.n	80047b2 <UART_SetConfig+0x2e6>
 8004774:	2304      	movs	r3, #4
 8004776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477a:	e01a      	b.n	80047b2 <UART_SetConfig+0x2e6>
 800477c:	2308      	movs	r3, #8
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004782:	e016      	b.n	80047b2 <UART_SetConfig+0x2e6>
 8004784:	2310      	movs	r3, #16
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800478a:	e012      	b.n	80047b2 <UART_SetConfig+0x2e6>
 800478c:	efff69f3 	.word	0xefff69f3
 8004790:	40008000 	.word	0x40008000
 8004794:	40013800 	.word	0x40013800
 8004798:	40021000 	.word	0x40021000
 800479c:	40004400 	.word	0x40004400
 80047a0:	40004800 	.word	0x40004800
 80047a4:	40004c00 	.word	0x40004c00
 80047a8:	40005000 	.word	0x40005000
 80047ac:	2310      	movs	r3, #16
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a9f      	ldr	r2, [pc, #636]	@ (8004a34 <UART_SetConfig+0x568>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d17a      	bne.n	80048b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d824      	bhi.n	800480e <UART_SetConfig+0x342>
 80047c4:	a201      	add	r2, pc, #4	@ (adr r2, 80047cc <UART_SetConfig+0x300>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080047f1 	.word	0x080047f1
 80047d0:	0800480f 	.word	0x0800480f
 80047d4:	080047f9 	.word	0x080047f9
 80047d8:	0800480f 	.word	0x0800480f
 80047dc:	080047ff 	.word	0x080047ff
 80047e0:	0800480f 	.word	0x0800480f
 80047e4:	0800480f 	.word	0x0800480f
 80047e8:	0800480f 	.word	0x0800480f
 80047ec:	08004807 	.word	0x08004807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f0:	f7fd fd42 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 80047f4:	61f8      	str	r0, [r7, #28]
        break;
 80047f6:	e010      	b.n	800481a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f8:	4b8f      	ldr	r3, [pc, #572]	@ (8004a38 <UART_SetConfig+0x56c>)
 80047fa:	61fb      	str	r3, [r7, #28]
        break;
 80047fc:	e00d      	b.n	800481a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047fe:	f7fd fca3 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8004802:	61f8      	str	r0, [r7, #28]
        break;
 8004804:	e009      	b.n	800481a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800480a:	61fb      	str	r3, [r7, #28]
        break;
 800480c:	e005      	b.n	800481a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004818:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80fb 	beq.w	8004a18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	4413      	add	r3, r2
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	429a      	cmp	r2, r3
 8004830:	d305      	bcc.n	800483e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	429a      	cmp	r2, r3
 800483c:	d903      	bls.n	8004846 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004844:	e0e8      	b.n	8004a18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	2200      	movs	r2, #0
 800484a:	461c      	mov	r4, r3
 800484c:	4615      	mov	r5, r2
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	022b      	lsls	r3, r5, #8
 8004858:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800485c:	0222      	lsls	r2, r4, #8
 800485e:	68f9      	ldr	r1, [r7, #12]
 8004860:	6849      	ldr	r1, [r1, #4]
 8004862:	0849      	lsrs	r1, r1, #1
 8004864:	2000      	movs	r0, #0
 8004866:	4688      	mov	r8, r1
 8004868:	4681      	mov	r9, r0
 800486a:	eb12 0a08 	adds.w	sl, r2, r8
 800486e:	eb43 0b09 	adc.w	fp, r3, r9
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004880:	4650      	mov	r0, sl
 8004882:	4659      	mov	r1, fp
 8004884:	f7fb fca0 	bl	80001c8 <__aeabi_uldivmod>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4613      	mov	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004896:	d308      	bcc.n	80048aa <UART_SetConfig+0x3de>
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800489e:	d204      	bcs.n	80048aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	60da      	str	r2, [r3, #12]
 80048a8:	e0b6      	b.n	8004a18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048b0:	e0b2      	b.n	8004a18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ba:	d15e      	bne.n	800497a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80048bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d828      	bhi.n	8004916 <UART_SetConfig+0x44a>
 80048c4:	a201      	add	r2, pc, #4	@ (adr r2, 80048cc <UART_SetConfig+0x400>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	080048f9 	.word	0x080048f9
 80048d4:	08004901 	.word	0x08004901
 80048d8:	08004917 	.word	0x08004917
 80048dc:	08004907 	.word	0x08004907
 80048e0:	08004917 	.word	0x08004917
 80048e4:	08004917 	.word	0x08004917
 80048e8:	08004917 	.word	0x08004917
 80048ec:	0800490f 	.word	0x0800490f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f0:	f7fd fcc2 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 80048f4:	61f8      	str	r0, [r7, #28]
        break;
 80048f6:	e014      	b.n	8004922 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048f8:	f7fd fcd4 	bl	80022a4 <HAL_RCC_GetPCLK2Freq>
 80048fc:	61f8      	str	r0, [r7, #28]
        break;
 80048fe:	e010      	b.n	8004922 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004900:	4b4d      	ldr	r3, [pc, #308]	@ (8004a38 <UART_SetConfig+0x56c>)
 8004902:	61fb      	str	r3, [r7, #28]
        break;
 8004904:	e00d      	b.n	8004922 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004906:	f7fd fc1f 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 800490a:	61f8      	str	r0, [r7, #28]
        break;
 800490c:	e009      	b.n	8004922 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004912:	61fb      	str	r3, [r7, #28]
        break;
 8004914:	e005      	b.n	8004922 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d077      	beq.n	8004a18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	005a      	lsls	r2, r3, #1
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	441a      	add	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	2b0f      	cmp	r3, #15
 8004942:	d916      	bls.n	8004972 <UART_SetConfig+0x4a6>
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800494a:	d212      	bcs.n	8004972 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	b29b      	uxth	r3, r3
 8004950:	f023 030f 	bic.w	r3, r3, #15
 8004954:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	b29b      	uxth	r3, r3
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	b29a      	uxth	r2, r3
 8004962:	8afb      	ldrh	r3, [r7, #22]
 8004964:	4313      	orrs	r3, r2
 8004966:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	8afa      	ldrh	r2, [r7, #22]
 800496e:	60da      	str	r2, [r3, #12]
 8004970:	e052      	b.n	8004a18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004978:	e04e      	b.n	8004a18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800497a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800497e:	2b08      	cmp	r3, #8
 8004980:	d827      	bhi.n	80049d2 <UART_SetConfig+0x506>
 8004982:	a201      	add	r2, pc, #4	@ (adr r2, 8004988 <UART_SetConfig+0x4bc>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	080049ad 	.word	0x080049ad
 800498c:	080049b5 	.word	0x080049b5
 8004990:	080049bd 	.word	0x080049bd
 8004994:	080049d3 	.word	0x080049d3
 8004998:	080049c3 	.word	0x080049c3
 800499c:	080049d3 	.word	0x080049d3
 80049a0:	080049d3 	.word	0x080049d3
 80049a4:	080049d3 	.word	0x080049d3
 80049a8:	080049cb 	.word	0x080049cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049ac:	f7fd fc64 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 80049b0:	61f8      	str	r0, [r7, #28]
        break;
 80049b2:	e014      	b.n	80049de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b4:	f7fd fc76 	bl	80022a4 <HAL_RCC_GetPCLK2Freq>
 80049b8:	61f8      	str	r0, [r7, #28]
        break;
 80049ba:	e010      	b.n	80049de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004a38 <UART_SetConfig+0x56c>)
 80049be:	61fb      	str	r3, [r7, #28]
        break;
 80049c0:	e00d      	b.n	80049de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049c2:	f7fd fbc1 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 80049c6:	61f8      	str	r0, [r7, #28]
        break;
 80049c8:	e009      	b.n	80049de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ce:	61fb      	str	r3, [r7, #28]
        break;
 80049d0:	e005      	b.n	80049de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049dc:	bf00      	nop
    }

    if (pclk != 0U)
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d019      	beq.n	8004a18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	085a      	lsrs	r2, r3, #1
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	441a      	add	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b0f      	cmp	r3, #15
 80049fc:	d909      	bls.n	8004a12 <UART_SetConfig+0x546>
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a04:	d205      	bcs.n	8004a12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60da      	str	r2, [r3, #12]
 8004a10:	e002      	b.n	8004a18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3728      	adds	r7, #40	@ 0x28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a32:	bf00      	nop
 8004a34:	40008000 	.word	0x40008000
 8004a38:	00f42400 	.word	0x00f42400

08004a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01a      	beq.n	8004b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b3a:	d10a      	bne.n	8004b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
  }
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b098      	sub	sp, #96	@ 0x60
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b90:	f7fc fae6 	bl	8001160 <HAL_GetTick>
 8004b94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d12e      	bne.n	8004c02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bac:	2200      	movs	r2, #0
 8004bae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f88c 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d021      	beq.n	8004c02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bde:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e6      	bne.n	8004bbe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e062      	b.n	8004cc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d149      	bne.n	8004ca4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f856 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d03c      	beq.n	8004ca4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	623b      	str	r3, [r7, #32]
   return(result);
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e6      	bne.n	8004c2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3308      	adds	r3, #8
 8004c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	e853 3f00 	ldrex	r3, [r3]
 8004c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0301 	bic.w	r3, r3, #1
 8004c72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3308      	adds	r3, #8
 8004c7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c7c:	61fa      	str	r2, [r7, #28]
 8004c7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	69b9      	ldr	r1, [r7, #24]
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	e841 2300 	strex	r3, r2, [r1]
 8004c88:	617b      	str	r3, [r7, #20]
   return(result);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e5      	bne.n	8004c5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e011      	b.n	8004cc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3758      	adds	r7, #88	@ 0x58
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce0:	e04f      	b.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d04b      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cea:	f7fc fa39 	bl	8001160 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e04e      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d037      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b80      	cmp	r3, #128	@ 0x80
 8004d16:	d034      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b40      	cmp	r3, #64	@ 0x40
 8004d1c:	d031      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d110      	bne.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2208      	movs	r2, #8
 8004d32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f838 	bl	8004daa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e029      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d5c:	d111      	bne.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f81e 	bl	8004daa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e00f      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d0a0      	beq.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b095      	sub	sp, #84	@ 0x54
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e6      	bne.n	8004db2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3308      	adds	r3, #8
 8004e02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e5      	bne.n	8004de4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d118      	bne.n	8004e52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f023 0310 	bic.w	r3, r3, #16
 8004e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e3e:	61bb      	str	r3, [r7, #24]
 8004e40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6979      	ldr	r1, [r7, #20]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e6      	bne.n	8004e20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e66:	bf00      	nop
 8004e68:	3754      	adds	r7, #84	@ 0x54
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <memset>:
 8004e72:	4402      	add	r2, r0
 8004e74:	4603      	mov	r3, r0
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d100      	bne.n	8004e7c <memset+0xa>
 8004e7a:	4770      	bx	lr
 8004e7c:	f803 1b01 	strb.w	r1, [r3], #1
 8004e80:	e7f9      	b.n	8004e76 <memset+0x4>
	...

08004e84 <__libc_init_array>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	4d0d      	ldr	r5, [pc, #52]	@ (8004ebc <__libc_init_array+0x38>)
 8004e88:	4c0d      	ldr	r4, [pc, #52]	@ (8004ec0 <__libc_init_array+0x3c>)
 8004e8a:	1b64      	subs	r4, r4, r5
 8004e8c:	10a4      	asrs	r4, r4, #2
 8004e8e:	2600      	movs	r6, #0
 8004e90:	42a6      	cmp	r6, r4
 8004e92:	d109      	bne.n	8004ea8 <__libc_init_array+0x24>
 8004e94:	4d0b      	ldr	r5, [pc, #44]	@ (8004ec4 <__libc_init_array+0x40>)
 8004e96:	4c0c      	ldr	r4, [pc, #48]	@ (8004ec8 <__libc_init_array+0x44>)
 8004e98:	f000 f818 	bl	8004ecc <_init>
 8004e9c:	1b64      	subs	r4, r4, r5
 8004e9e:	10a4      	asrs	r4, r4, #2
 8004ea0:	2600      	movs	r6, #0
 8004ea2:	42a6      	cmp	r6, r4
 8004ea4:	d105      	bne.n	8004eb2 <__libc_init_array+0x2e>
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eac:	4798      	blx	r3
 8004eae:	3601      	adds	r6, #1
 8004eb0:	e7ee      	b.n	8004e90 <__libc_init_array+0xc>
 8004eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb6:	4798      	blx	r3
 8004eb8:	3601      	adds	r6, #1
 8004eba:	e7f2      	b.n	8004ea2 <__libc_init_array+0x1e>
 8004ebc:	08004f34 	.word	0x08004f34
 8004ec0:	08004f34 	.word	0x08004f34
 8004ec4:	08004f34 	.word	0x08004f34
 8004ec8:	08004f38 	.word	0x08004f38

08004ecc <_init>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	bf00      	nop
 8004ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed2:	bc08      	pop	{r3}
 8004ed4:	469e      	mov	lr, r3
 8004ed6:	4770      	bx	lr

08004ed8 <_fini>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	bf00      	nop
 8004edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ede:	bc08      	pop	{r3}
 8004ee0:	469e      	mov	lr, r3
 8004ee2:	4770      	bx	lr
