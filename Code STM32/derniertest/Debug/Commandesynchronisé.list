
Commandesynchronis√©.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a030  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800a1c0  0800a1c0  0000b1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a594  0800a594  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a594  0800a594  0000b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a59c  0800a59c  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a59c  0800a59c  0000b59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5a0  0800a5a0  0000b5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a5a4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200001d8  0800a77c  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800a77c  0000c504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001465c  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ba  00000000  00000000  00020864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00022f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ecf  00000000  00000000  00024210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294cc  00000000  00000000  000250df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ca9  00000000  00000000  0004e5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010758e  00000000  00000000  00063254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a7e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062d4  00000000  00000000  0016a828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00170afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1a8 	.word	0x0800a1a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a1a8 	.word	0x0800a1a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <HAL_TIM_OC_DelayElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a35      	ldr	r2, [pc, #212]	@ (8000fb8 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d163      	bne.n	8000fae <HAL_TIM_OC_DelayElapsedCallback+0xda>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7f1b      	ldrb	r3, [r3, #28]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d15f      	bne.n	8000fae <HAL_TIM_OC_DelayElapsedCallback+0xda>
    {
        static uint8_t high = 1;
        if(high){
 8000eee:	4b33      	ldr	r3, [pc, #204]	@ (8000fbc <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d026      	beq.n	8000f44 <HAL_TIM_OC_DelayElapsedCallback+0x70>
            HAL_ADC_Start(&hadc1);
 8000ef6:	4832      	ldr	r0, [pc, #200]	@ (8000fc0 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8000ef8:	f001 f9c2 	bl	8002280 <HAL_ADC_Start>
           // if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
            lastAdcValue = HAL_ADC_GetValue(&hadc1);
 8000efc:	4830      	ldr	r0, [pc, #192]	@ (8000fc0 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8000efe:	f001 faac 	bl	800245a <HAL_ADC_GetValue>
 8000f02:	ee07 0a90 	vmov	s15, r0
 8000f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc4 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000f0c:	edc3 7a00 	vstr	s15, [r3]
            HAL_ADC_Stop(&hadc1);
 8000f10:	482b      	ldr	r0, [pc, #172]	@ (8000fc0 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8000f12:	f001 fa6f 	bl	80023f4 <HAL_ADC_Stop>
            sprintf(msg, "ADC= %.2f\r\n", lastAdcValue);
 8000f16:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc4 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fb14 	bl	8000548 <__aeabi_f2d>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4928      	ldr	r1, [pc, #160]	@ (8000fc8 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000f26:	4829      	ldr	r0, [pc, #164]	@ (8000fcc <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000f28:	f007 f80c 	bl	8007f44 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f2c:	4827      	ldr	r0, [pc, #156]	@ (8000fcc <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000f2e:	f7ff f99f 	bl	8000270 <strlen>
 8000f32:	4603      	mov	r3, r0
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	4924      	ldr	r1, [pc, #144]	@ (8000fcc <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000f3c:	4824      	ldr	r0, [pc, #144]	@ (8000fd0 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000f3e:	f005 fd8d 	bl	8006a5c <HAL_UART_Transmit>
 8000f42:	e02d      	b.n	8000fa0 <HAL_TIM_OC_DelayElapsedCallback+0xcc>
        }
        else {
        	float pwmduty=(lastAdcValue * htim2.Init.Period) / 4095;
 8000f44:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f50:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000f52:	edd3 7a00 	vldr	s15, [r3]
 8000f56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f5a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8000fd8 <HAL_TIM_OC_DelayElapsedCallback+0x104>
 8000f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f62:	edc7 7a03 	vstr	s15, [r7, #12]
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,pwmduty);
 8000f66:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f72:	ee17 2a90 	vmov	r2, s15
 8000f76:	639a      	str	r2, [r3, #56]	@ 0x38
        	sprintf(msg,"pwm= %.2f\r\n",pwmduty);
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff fae5 	bl	8000548 <__aeabi_f2d>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4916      	ldr	r1, [pc, #88]	@ (8000fdc <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000f84:	4811      	ldr	r0, [pc, #68]	@ (8000fcc <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000f86:	f006 ffdd 	bl	8007f44 <siprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t *)msg,  strlen(msg), HAL_MAX_DELAY);
 8000f8a:	4810      	ldr	r0, [pc, #64]	@ (8000fcc <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000f8c:	f7ff f970 	bl	8000270 <strlen>
 8000f90:	4603      	mov	r3, r0
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	490c      	ldr	r1, [pc, #48]	@ (8000fcc <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000f9c:	f005 fd5e 	bl	8006a5c <HAL_UART_Transmit>
        }
        high ^= 1;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	f083 0301 	eor.w	r3, r3, #1
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 8000fac:	701a      	strb	r2, [r3, #0]
    }
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40000400 	.word	0x40000400
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	2000022c 	.word	0x2000022c
 8000fc4:	200001f4 	.word	0x200001f4
 8000fc8:	0800a1c0 	.word	0x0800a1c0
 8000fcc:	200001f8 	.word	0x200001f8
 8000fd0:	20000328 	.word	0x20000328
 8000fd4:	20000290 	.word	0x20000290
 8000fd8:	457ff000 	.word	0x457ff000
 8000fdc:	0800a1cc 	.word	0x0800a1cc

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
int main(void)
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fec:	f000 fd38 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff0:	f000 f818 	bl	8001024 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff4:	f000 f9fe 	bl	80013f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff8:	f000 f9cc 	bl	8001394 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ffc:	f000 f864 	bl	80010c8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001000:	f000 f950 	bl	80012a4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001004:	f000 f8d8 	bl	80011b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // G√©n√©ration du toggle sur TIM3 CH1
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001008:	2100      	movs	r1, #0
 800100a:	4804      	ldr	r0, [pc, #16]	@ (800101c <main+0x3c>)
 800100c:	f004 f9b2 	bl	8005374 <HAL_TIM_OC_Start_IT>


  // Pr√©parer ADC1 au trigger interne
  //HAL_ADC_Start_IT(&hadc1);
  //HAL_ADC_Start(&hadc1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001010:	2104      	movs	r1, #4
 8001012:	4803      	ldr	r0, [pc, #12]	@ (8001020 <main+0x40>)
 8001014:	f004 fb64 	bl	80056e0 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <main+0x38>
 800101c:	200002dc 	.word	0x200002dc
 8001020:	20000290 	.word	0x20000290

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b096      	sub	sp, #88	@ 0x58
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	2244      	movs	r2, #68	@ 0x44
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f006 ffeb 	bl	800800e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	463b      	mov	r3, r7
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001046:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800104a:	f002 fdc9 	bl	8003be0 <HAL_PWREx_ControlVoltageScaling>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001054:	f000 fa34 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001058:	2302      	movs	r3, #2
 800105a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001060:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001062:	2310      	movs	r3, #16
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001066:	2302      	movs	r3, #2
 8001068:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800106a:	2302      	movs	r3, #2
 800106c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001072:	230a      	movs	r3, #10
 8001074:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001076:	2307      	movs	r3, #7
 8001078:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800107a:	2302      	movs	r3, #2
 800107c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800107e:	2302      	movs	r3, #2
 8001080:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4618      	mov	r0, r3
 8001088:	f002 fe00 	bl	8003c8c <HAL_RCC_OscConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001092:	f000 fa15 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001096:	230f      	movs	r3, #15
 8001098:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109a:	2303      	movs	r3, #3
 800109c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	2104      	movs	r1, #4
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 f9c8 	bl	8004444 <HAL_RCC_ClockConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010ba:	f000 fa01 	bl	80014c0 <Error_Handler>
  }
}
 80010be:	bf00      	nop
 80010c0:	3758      	adds	r7, #88	@ 0x58
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	@ 0x28
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
 80010e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ea:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <MX_ADC1_Init+0xe4>)
 80010ec:	4a30      	ldr	r2, [pc, #192]	@ (80011b0 <MX_ADC1_Init+0xe8>)
 80010ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010f0:	4b2e      	ldr	r3, [pc, #184]	@ (80011ac <MX_ADC1_Init+0xe4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010f6:	4b2d      	ldr	r3, [pc, #180]	@ (80011ac <MX_ADC1_Init+0xe4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fc:	4b2b      	ldr	r3, [pc, #172]	@ (80011ac <MX_ADC1_Init+0xe4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001102:	4b2a      	ldr	r3, [pc, #168]	@ (80011ac <MX_ADC1_Init+0xe4>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001108:	4b28      	ldr	r3, [pc, #160]	@ (80011ac <MX_ADC1_Init+0xe4>)
 800110a:	2204      	movs	r2, #4
 800110c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800110e:	4b27      	ldr	r3, [pc, #156]	@ (80011ac <MX_ADC1_Init+0xe4>)
 8001110:	2200      	movs	r2, #0
 8001112:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001114:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <MX_ADC1_Init+0xe4>)
 8001116:	2200      	movs	r2, #0
 8001118:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800111a:	4b24      	ldr	r3, [pc, #144]	@ (80011ac <MX_ADC1_Init+0xe4>)
 800111c:	2201      	movs	r2, #1
 800111e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001120:	4b22      	ldr	r3, [pc, #136]	@ (80011ac <MX_ADC1_Init+0xe4>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8001128:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <MX_ADC1_Init+0xe4>)
 800112a:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800112e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001130:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <MX_ADC1_Init+0xe4>)
 8001132:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001136:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001138:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <MX_ADC1_Init+0xe4>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <MX_ADC1_Init+0xe4>)
 8001142:	2200      	movs	r2, #0
 8001144:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001146:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <MX_ADC1_Init+0xe4>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800114e:	4817      	ldr	r0, [pc, #92]	@ (80011ac <MX_ADC1_Init+0xe4>)
 8001150:	f000 ff46 	bl	8001fe0 <HAL_ADC_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800115a:	f000 f9b1 	bl	80014c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	4810      	ldr	r0, [pc, #64]	@ (80011ac <MX_ADC1_Init+0xe4>)
 800116a:	f002 f9a7 	bl	80034bc <HAL_ADCEx_MultiModeConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001174:	f000 f9a4 	bl	80014c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_ADC1_Init+0xec>)
 800117a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800117c:	2306      	movs	r3, #6
 800117e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001184:	237f      	movs	r3, #127	@ 0x7f
 8001186:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001188:	2304      	movs	r3, #4
 800118a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	@ (80011ac <MX_ADC1_Init+0xe4>)
 8001196:	f001 fba5 	bl	80028e4 <HAL_ADC_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80011a0:	f000 f98e 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	@ 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000022c 	.word	0x2000022c
 80011b0:	50040000 	.word	0x50040000
 80011b4:	08600004 	.word	0x08600004

080011b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08e      	sub	sp, #56	@ 0x38
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]
 80011e6:	615a      	str	r2, [r3, #20]
 80011e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ea:	4b2d      	ldr	r3, [pc, #180]	@ (80012a0 <MX_TIM2_Init+0xe8>)
 80011ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011f2:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <MX_TIM2_Init+0xe8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b29      	ldr	r3, [pc, #164]	@ (80012a0 <MX_TIM2_Init+0xe8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 80011fe:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <MX_TIM2_Init+0xe8>)
 8001200:	f240 128f 	movw	r2, #399	@ 0x18f
 8001204:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001206:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <MX_TIM2_Init+0xe8>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120c:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <MX_TIM2_Init+0xe8>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001212:	4823      	ldr	r0, [pc, #140]	@ (80012a0 <MX_TIM2_Init+0xe8>)
 8001214:	f003 fff6 	bl	8005204 <HAL_TIM_Base_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800121e:	f000 f94f 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001226:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001228:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800122c:	4619      	mov	r1, r3
 800122e:	481c      	ldr	r0, [pc, #112]	@ (80012a0 <MX_TIM2_Init+0xe8>)
 8001230:	f004 fdf2 	bl	8005e18 <HAL_TIM_ConfigClockSource>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800123a:	f000 f941 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800123e:	4818      	ldr	r0, [pc, #96]	@ (80012a0 <MX_TIM2_Init+0xe8>)
 8001240:	f004 f9ec 	bl	800561c <HAL_TIM_PWM_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800124a:	f000 f939 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	4810      	ldr	r0, [pc, #64]	@ (80012a0 <MX_TIM2_Init+0xe8>)
 800125e:	f005 fb09 	bl	8006874 <HAL_TIMEx_MasterConfigSynchronization>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001268:	f000 f92a 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126c:	2360      	movs	r3, #96	@ 0x60
 800126e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	2204      	movs	r2, #4
 8001280:	4619      	mov	r1, r3
 8001282:	4807      	ldr	r0, [pc, #28]	@ (80012a0 <MX_TIM2_Init+0xe8>)
 8001284:	f004 fcb4 	bl	8005bf0 <HAL_TIM_PWM_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800128e:	f000 f917 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001292:	4803      	ldr	r0, [pc, #12]	@ (80012a0 <MX_TIM2_Init+0xe8>)
 8001294:	f000 f9e8 	bl	8001668 <HAL_TIM_MspPostInit>

}
 8001298:	bf00      	nop
 800129a:	3738      	adds	r7, #56	@ 0x38
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000290 	.word	0x20000290

080012a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	@ 0x38
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]
 80012d2:	615a      	str	r2, [r3, #20]
 80012d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d6:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <MX_TIM3_Init+0xe8>)
 80012d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001390 <MX_TIM3_Init+0xec>)
 80012da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012dc:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <MX_TIM3_Init+0xe8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e2:	4b2a      	ldr	r3, [pc, #168]	@ (800138c <MX_TIM3_Init+0xe8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 399;
 80012e8:	4b28      	ldr	r3, [pc, #160]	@ (800138c <MX_TIM3_Init+0xe8>)
 80012ea:	f240 128f 	movw	r2, #399	@ 0x18f
 80012ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f0:	4b26      	ldr	r3, [pc, #152]	@ (800138c <MX_TIM3_Init+0xe8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	4b25      	ldr	r3, [pc, #148]	@ (800138c <MX_TIM3_Init+0xe8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012fc:	4823      	ldr	r0, [pc, #140]	@ (800138c <MX_TIM3_Init+0xe8>)
 80012fe:	f003 ff81 	bl	8005204 <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001308:	f000 f8da 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001312:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001316:	4619      	mov	r1, r3
 8001318:	481c      	ldr	r0, [pc, #112]	@ (800138c <MX_TIM3_Init+0xe8>)
 800131a:	f004 fd7d 	bl	8005e18 <HAL_TIM_ConfigClockSource>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001324:	f000 f8cc 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001328:	4818      	ldr	r0, [pc, #96]	@ (800138c <MX_TIM3_Init+0xe8>)
 800132a:	f003 ffc2 	bl	80052b2 <HAL_TIM_OC_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001334:	f000 f8c4 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001338:	2340      	movs	r3, #64	@ 0x40
 800133a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	4811      	ldr	r0, [pc, #68]	@ (800138c <MX_TIM3_Init+0xe8>)
 8001348:	f005 fa94 	bl	8006874 <HAL_TIMEx_MasterConfigSynchronization>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001352:	f000 f8b5 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001356:	2330      	movs	r3, #48	@ 0x30
 8001358:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001366:	463b      	mov	r3, r7
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	4807      	ldr	r0, [pc, #28]	@ (800138c <MX_TIM3_Init+0xe8>)
 800136e:	f004 fbc5 	bl	8005afc <HAL_TIM_OC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001378:	f000 f8a2 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <MX_TIM3_Init+0xe8>)
 800137e:	f000 f973 	bl	8001668 <HAL_TIM_MspPostInit>

}
 8001382:	bf00      	nop
 8001384:	3738      	adds	r7, #56	@ 0x38
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200002dc 	.word	0x200002dc
 8001390:	40000400 	.word	0x40000400

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 800139a:	4a15      	ldr	r2, [pc, #84]	@ (80013f0 <MX_USART2_UART_Init+0x5c>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139e:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013d8:	f005 faf2 	bl	80069c0 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013e2:	f000 f86d 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000328 	.word	0x20000328
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	4b2b      	ldr	r3, [pc, #172]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	4a2a      	ldr	r2, [pc, #168]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001416:	4b28      	ldr	r3, [pc, #160]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	4b25      	ldr	r3, [pc, #148]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	4a24      	ldr	r2, [pc, #144]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800142c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142e:	4b22      	ldr	r3, [pc, #136]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	4a1e      	ldr	r2, [pc, #120]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	4a18      	ldr	r2, [pc, #96]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2120      	movs	r1, #32
 800146e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001472:	f002 fb8f 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001476:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800147c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	480b      	ldr	r0, [pc, #44]	@ (80014bc <MX_GPIO_Init+0xc8>)
 800148e:	f002 f9d7 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001492:	2320      	movs	r3, #32
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ac:	f002 f9c8 	bl	8003840 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	@ 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40021000 	.word	0x40021000
 80014bc:	48000800 	.word	0x48000800

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <Error_Handler+0x8>

080014cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <HAL_MspInit+0x44>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001510 <HAL_MspInit+0x44>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80014de:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <HAL_MspInit+0x44>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <HAL_MspInit+0x44>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	4a08      	ldr	r2, [pc, #32]	@ (8001510 <HAL_MspInit+0x44>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_MspInit+0x44>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b0ac      	sub	sp, #176	@ 0xb0
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2288      	movs	r2, #136	@ 0x88
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f006 fd6a 	bl	800800e <memset>
  if(hadc->Instance==ADC1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a2b      	ldr	r2, [pc, #172]	@ (80015ec <HAL_ADC_MspInit+0xd8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d14e      	bne.n	80015e2 <HAL_ADC_MspInit+0xce>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001544:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001548:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800154a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800154e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001552:	2302      	movs	r3, #2
 8001554:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001556:	2301      	movs	r3, #1
 8001558:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800155a:	2308      	movs	r3, #8
 800155c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800155e:	2307      	movs	r3, #7
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001562:	2302      	movs	r3, #2
 8001564:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001566:	2302      	movs	r3, #2
 8001568:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800156a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800156e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4618      	mov	r0, r3
 8001576:	f003 f989 	bl	800488c <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001580:	f7ff ff9e 	bl	80014c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001584:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <HAL_ADC_MspInit+0xdc>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001588:	4a19      	ldr	r2, [pc, #100]	@ (80015f0 <HAL_ADC_MspInit+0xdc>)
 800158a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800158e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_ADC_MspInit+0xdc>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159c:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <HAL_ADC_MspInit+0xdc>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a0:	4a13      	ldr	r2, [pc, #76]	@ (80015f0 <HAL_ADC_MspInit+0xdc>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <HAL_ADC_MspInit+0xdc>)
 80015aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015ba:	230b      	movs	r3, #11
 80015bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015ca:	4619      	mov	r1, r3
 80015cc:	4809      	ldr	r0, [pc, #36]	@ (80015f4 <HAL_ADC_MspInit+0xe0>)
 80015ce:	f002 f937 	bl	8003840 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2012      	movs	r0, #18
 80015d8:	f002 f8fb 	bl	80037d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015dc:	2012      	movs	r0, #18
 80015de:	f002 f914 	bl	800380a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015e2:	bf00      	nop
 80015e4:	37b0      	adds	r7, #176	@ 0xb0
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	50040000 	.word	0x50040000
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48000800 	.word	0x48000800

080015f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001608:	d10c      	bne.n	8001624 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_TIM_Base_MspInit+0x68>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	4a14      	ldr	r2, [pc, #80]	@ (8001660 <HAL_TIM_Base_MspInit+0x68>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6593      	str	r3, [r2, #88]	@ 0x58
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_TIM_Base_MspInit+0x68>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001622:	e018      	b.n	8001656 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0e      	ldr	r2, [pc, #56]	@ (8001664 <HAL_TIM_Base_MspInit+0x6c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d113      	bne.n	8001656 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <HAL_TIM_Base_MspInit+0x68>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001632:	4a0b      	ldr	r2, [pc, #44]	@ (8001660 <HAL_TIM_Base_MspInit+0x68>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6593      	str	r3, [r2, #88]	@ 0x58
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <HAL_TIM_Base_MspInit+0x68>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	201d      	movs	r0, #29
 800164c:	f002 f8c1 	bl	80037d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001650:	201d      	movs	r0, #29
 8001652:	f002 f8da 	bl	800380a <HAL_NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	40000400 	.word	0x40000400

08001668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001688:	d11d      	bne.n	80016c6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <HAL_TIM_MspPostInit+0xac>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	4a21      	ldr	r2, [pc, #132]	@ (8001714 <HAL_TIM_MspPostInit+0xac>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001696:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <HAL_TIM_MspPostInit+0xac>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016a2:	2302      	movs	r3, #2
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016b2:	2301      	movs	r3, #1
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c0:	f002 f8be 	bl	8003840 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016c4:	e021      	b.n	800170a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a13      	ldr	r2, [pc, #76]	@ (8001718 <HAL_TIM_MspPostInit+0xb0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d11c      	bne.n	800170a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <HAL_TIM_MspPostInit+0xac>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001714 <HAL_TIM_MspPostInit+0xac>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001714 <HAL_TIM_MspPostInit+0xac>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016e8:	2340      	movs	r3, #64	@ 0x40
 80016ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016f8:	2302      	movs	r3, #2
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001706:	f002 f89b 	bl	8003840 <HAL_GPIO_Init>
}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	@ 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	40000400 	.word	0x40000400

0800171c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0ac      	sub	sp, #176	@ 0xb0
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2288      	movs	r2, #136	@ 0x88
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f006 fc66 	bl	800800e <memset>
  if(huart->Instance==USART2)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a21      	ldr	r2, [pc, #132]	@ (80017cc <HAL_UART_MspInit+0xb0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d13b      	bne.n	80017c4 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800174c:	2302      	movs	r3, #2
 800174e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001750:	2300      	movs	r3, #0
 8001752:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4618      	mov	r0, r3
 800175a:	f003 f897 	bl	800488c <HAL_RCCEx_PeriphCLKConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001764:	f7ff feac 	bl	80014c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001768:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <HAL_UART_MspInit+0xb4>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176c:	4a18      	ldr	r2, [pc, #96]	@ (80017d0 <HAL_UART_MspInit+0xb4>)
 800176e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001772:	6593      	str	r3, [r2, #88]	@ 0x58
 8001774:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <HAL_UART_MspInit+0xb4>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <HAL_UART_MspInit+0xb4>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001784:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <HAL_UART_MspInit+0xb4>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178c:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <HAL_UART_MspInit+0xb4>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001798:	230c      	movs	r3, #12
 800179a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017b0:	2307      	movs	r3, #7
 80017b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017ba:	4619      	mov	r1, r3
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c0:	f002 f83e 	bl	8003840 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80017c4:	bf00      	nop
 80017c6:	37b0      	adds	r7, #176	@ 0xb0
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40004400 	.word	0x40004400
 80017d0:	40021000 	.word	0x40021000

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <NMI_Handler+0x4>

080017dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <MemManage_Handler+0x4>

080017ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182a:	f000 f975 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <ADC1_2_IRQHandler+0x10>)
 800183a:	f000 fe1b 	bl	8002474 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000022c 	.word	0x2000022c

08001848 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <TIM3_IRQHandler+0x10>)
 800184e:	f004 f84d 	bl	80058ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200002dc 	.word	0x200002dc

0800185c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return 1;
 8001860:	2301      	movs	r3, #1
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_kill>:

int _kill(int pid, int sig)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001876:	f006 fc1d 	bl	80080b4 <__errno>
 800187a:	4603      	mov	r3, r0
 800187c:	2216      	movs	r2, #22
 800187e:	601a      	str	r2, [r3, #0]
  return -1;
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <_exit>:

void _exit (int status)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ffe7 	bl	800186c <_kill>
  while (1) {}    /* Make sure we hang here */
 800189e:	bf00      	nop
 80018a0:	e7fd      	b.n	800189e <_exit+0x12>

080018a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e00a      	b.n	80018ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018b4:	f3af 8000 	nop.w
 80018b8:	4601      	mov	r1, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	60ba      	str	r2, [r7, #8]
 80018c0:	b2ca      	uxtb	r2, r1
 80018c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3301      	adds	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	dbf0      	blt.n	80018b4 <_read+0x12>
  }

  return len;
 80018d2:	687b      	ldr	r3, [r7, #4]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e009      	b.n	8001902 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	60ba      	str	r2, [r7, #8]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	dbf1      	blt.n	80018ee <_write+0x12>
  }
  return len;
 800190a:	687b      	ldr	r3, [r7, #4]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_close>:

int _close(int file)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800193c:	605a      	str	r2, [r3, #4]
  return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_isatty>:

int _isatty(int file)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001954:	2301      	movs	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	@ (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	@ (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f006 fb82 	bl	80080b4 <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	@ (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20018000 	.word	0x20018000
 80019dc:	00000400 	.word	0x00000400
 80019e0:	200003b0 	.word	0x200003b0
 80019e4:	20000508 	.word	0x20000508

080019e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <SystemInit+0x20>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019f2:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <SystemInit+0x20>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a10:	f7ff ffea 	bl	80019e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480c      	ldr	r0, [pc, #48]	@ (8001a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a16:	490d      	ldr	r1, [pc, #52]	@ (8001a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <LoopForever+0xe>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a58 <LoopForever+0x16>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f006 fb41 	bl	80080c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3e:	f7ff facf 	bl	8000fe0 <main>

08001a42 <LoopForever>:

LoopForever:
    b LoopForever
 8001a42:	e7fe      	b.n	8001a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001a50:	0800a5a4 	.word	0x0800a5a4
  ldr r2, =_sbss
 8001a54:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a58:	20000504 	.word	0x20000504

08001a5c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC3_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <HAL_Init+0x3c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a9c <HAL_Init+0x3c>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a76:	2003      	movs	r0, #3
 8001a78:	f001 fea0 	bl	80037bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f000 f80f 	bl	8001aa0 <HAL_InitTick>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	71fb      	strb	r3, [r7, #7]
 8001a8c:	e001      	b.n	8001a92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a8e:	f7ff fd1d 	bl	80014cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a92:	79fb      	ldrb	r3, [r7, #7]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40022000 	.word	0x40022000

08001aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001aac:	4b17      	ldr	r3, [pc, #92]	@ (8001b0c <HAL_InitTick+0x6c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d023      	beq.n	8001afc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ab4:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <HAL_InitTick+0x70>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <HAL_InitTick+0x6c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f001 feab 	bl	8003826 <HAL_SYSTICK_Config>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10f      	bne.n	8001af6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d809      	bhi.n	8001af0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f001 fe75 	bl	80037d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <HAL_InitTick+0x74>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e007      	b.n	8001b00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e004      	b.n	8001b00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e001      	b.n	8001b00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2000000c 	.word	0x2000000c
 8001b10:	20000004 	.word	0x20000004
 8001b14:	20000008 	.word	0x20000008

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	2000000c 	.word	0x2000000c
 8001b3c:	200003b4 	.word	0x200003b4

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	@ (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200003b4 	.word	0x200003b4

08001b58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	609a      	str	r2, [r3, #8]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	609a      	str	r2, [r3, #8]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3360      	adds	r3, #96	@ 0x60
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <LL_ADC_SetOffset+0x44>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bf8:	bf00      	nop
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	03fff000 	.word	0x03fff000

08001c08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3360      	adds	r3, #96	@ 0x60
 8001c16:	461a      	mov	r2, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3360      	adds	r3, #96	@ 0x60
 8001c44:	461a      	mov	r2, r3
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c5e:	bf00      	nop
 8001c60:	371c      	adds	r7, #28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	3330      	adds	r3, #48	@ 0x30
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	f003 030c 	and.w	r3, r3, #12
 8001cac:	4413      	add	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	211f      	movs	r1, #31
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	0e9b      	lsrs	r3, r3, #26
 8001cc8:	f003 011f 	and.w	r1, r3, #31
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b087      	sub	sp, #28
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3314      	adds	r3, #20
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	0e5b      	lsrs	r3, r3, #25
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	4413      	add	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	0d1b      	lsrs	r3, r3, #20
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	2107      	movs	r1, #7
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	401a      	ands	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	0d1b      	lsrs	r3, r3, #20
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	431a      	orrs	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	401a      	ands	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0318 	and.w	r3, r3, #24
 8001d86:	4908      	ldr	r1, [pc, #32]	@ (8001da8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d88:	40d9      	lsrs	r1, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	400b      	ands	r3, r1
 8001d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d92:	431a      	orrs	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	0007ffff 	.word	0x0007ffff

08001dac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 031f 	and.w	r3, r3, #31
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001df4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6093      	str	r3, [r2, #8]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e1c:	d101      	bne.n	8001e22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e44:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e6c:	d101      	bne.n	8001e72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001eb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ebc:	f043 0202 	orr.w	r2, r3, #2
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <LL_ADC_IsEnabled+0x18>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <LL_ADC_IsEnabled+0x1a>
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d101      	bne.n	8001f0e <LL_ADC_IsDisableOngoing+0x18>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <LL_ADC_IsDisableOngoing+0x1a>
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f30:	f043 0204 	orr.w	r2, r3, #4
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f58:	f043 0210 	orr.w	r2, r3, #16
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d101      	bne.n	8001f84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fa2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fa6:	f043 0220 	orr.w	r2, r3, #32
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d101      	bne.n	8001fd2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b089      	sub	sp, #36	@ 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e130      	b.n	800225c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fa83 	bl	8001514 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fef1 	bl	8001e08 <LL_ADC_IsDeepPowerDownEnabled>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d004      	beq.n	8002036 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fed7 	bl	8001de4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff0c 	bl	8001e58 <LL_ADC_IsInternalRegulatorEnabled>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d115      	bne.n	8002072 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fef0 	bl	8001e30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002050:	4b84      	ldr	r3, [pc, #528]	@ (8002264 <HAL_ADC_Init+0x284>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	099b      	lsrs	r3, r3, #6
 8002056:	4a84      	ldr	r2, [pc, #528]	@ (8002268 <HAL_ADC_Init+0x288>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	099b      	lsrs	r3, r3, #6
 800205e:	3301      	adds	r3, #1
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002064:	e002      	b.n	800206c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3b01      	subs	r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f9      	bne.n	8002066 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff feee 	bl	8001e58 <LL_ADC_IsInternalRegulatorEnabled>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10d      	bne.n	800209e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002086:	f043 0210 	orr.w	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002092:	f043 0201 	orr.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff62 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 80020a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f040 80c9 	bne.w	800224a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 80c5 	bne.w	800224a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80020c8:	f043 0202 	orr.w	r2, r3, #2
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fefb 	bl	8001ed0 <LL_ADC_IsEnabled>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d115      	bne.n	800210c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020e0:	4862      	ldr	r0, [pc, #392]	@ (800226c <HAL_ADC_Init+0x28c>)
 80020e2:	f7ff fef5 	bl	8001ed0 <LL_ADC_IsEnabled>
 80020e6:	4604      	mov	r4, r0
 80020e8:	4861      	ldr	r0, [pc, #388]	@ (8002270 <HAL_ADC_Init+0x290>)
 80020ea:	f7ff fef1 	bl	8001ed0 <LL_ADC_IsEnabled>
 80020ee:	4603      	mov	r3, r0
 80020f0:	431c      	orrs	r4, r3
 80020f2:	4860      	ldr	r0, [pc, #384]	@ (8002274 <HAL_ADC_Init+0x294>)
 80020f4:	f7ff feec 	bl	8001ed0 <LL_ADC_IsEnabled>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4323      	orrs	r3, r4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4619      	mov	r1, r3
 8002106:	485c      	ldr	r0, [pc, #368]	@ (8002278 <HAL_ADC_Init+0x298>)
 8002108:	f7ff fd26 	bl	8001b58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7e5b      	ldrb	r3, [r3, #25]
 8002110:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002116:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800211c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002122:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800212a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d106      	bne.n	8002148 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213e:	3b01      	subs	r3, #1
 8002140:	045b      	lsls	r3, r3, #17
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	2b00      	cmp	r3, #0
 800214e:	d009      	beq.n	8002164 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002154:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	4b44      	ldr	r3, [pc, #272]	@ (800227c <HAL_ADC_Init+0x29c>)
 800216c:	4013      	ands	r3, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	69b9      	ldr	r1, [r7, #24]
 8002174:	430b      	orrs	r3, r1
 8002176:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff1c 	bl	8001fba <LL_ADC_INJ_IsConversionOngoing>
 8002182:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d13d      	bne.n	8002206 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d13a      	bne.n	8002206 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002194:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800219c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021ac:	f023 0302 	bic.w	r3, r3, #2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	69b9      	ldr	r1, [r7, #24]
 80021b6:	430b      	orrs	r3, r1
 80021b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d118      	bne.n	80021f6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80021ce:	f023 0304 	bic.w	r3, r3, #4
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021da:	4311      	orrs	r1, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80021e0:	4311      	orrs	r1, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021e6:	430a      	orrs	r2, r1
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	611a      	str	r2, [r3, #16]
 80021f4:	e007      	b.n	8002206 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0201 	bic.w	r2, r2, #1
 8002204:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d10c      	bne.n	8002228 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	f023 010f 	bic.w	r1, r3, #15
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	631a      	str	r2, [r3, #48]	@ 0x30
 8002226:	e007      	b.n	8002238 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 020f 	bic.w	r2, r2, #15
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223c:	f023 0303 	bic.w	r3, r3, #3
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54
 8002248:	e007      	b.n	800225a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224e:	f043 0210 	orr.w	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800225a:	7ffb      	ldrb	r3, [r7, #31]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3724      	adds	r7, #36	@ 0x24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd90      	pop	{r4, r7, pc}
 8002264:	20000004 	.word	0x20000004
 8002268:	053e2d63 	.word	0x053e2d63
 800226c:	50040000 	.word	0x50040000
 8002270:	50040100 	.word	0x50040100
 8002274:	50040200 	.word	0x50040200
 8002278:	50040300 	.word	0x50040300
 800227c:	fff0c007 	.word	0xfff0c007

08002280 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002288:	4857      	ldr	r0, [pc, #348]	@ (80023e8 <HAL_ADC_Start+0x168>)
 800228a:	f7ff fd8f 	bl	8001dac <LL_ADC_GetMultimode>
 800228e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fe69 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	f040 809c 	bne.w	80023da <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_ADC_Start+0x30>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e097      	b.n	80023e0 <HAL_ADC_Start+0x160>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 ffc1 	bl	8003240 <ADC_Enable>
 80022be:	4603      	mov	r3, r0
 80022c0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022c2:	7dfb      	ldrb	r3, [r7, #23]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f040 8083 	bne.w	80023d0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022d2:	f023 0301 	bic.w	r3, r3, #1
 80022d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a42      	ldr	r2, [pc, #264]	@ (80023ec <HAL_ADC_Start+0x16c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d002      	beq.n	80022ee <HAL_ADC_Start+0x6e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	e000      	b.n	80022f0 <HAL_ADC_Start+0x70>
 80022ee:	4b40      	ldr	r3, [pc, #256]	@ (80023f0 <HAL_ADC_Start+0x170>)
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d002      	beq.n	80022fe <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002302:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002316:	d106      	bne.n	8002326 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231c:	f023 0206 	bic.w	r2, r3, #6
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	659a      	str	r2, [r3, #88]	@ 0x58
 8002324:	e002      	b.n	800232c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	221c      	movs	r2, #28
 8002332:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a2a      	ldr	r2, [pc, #168]	@ (80023ec <HAL_ADC_Start+0x16c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d002      	beq.n	800234c <HAL_ADC_Start+0xcc>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	e000      	b.n	800234e <HAL_ADC_Start+0xce>
 800234c:	4b28      	ldr	r3, [pc, #160]	@ (80023f0 <HAL_ADC_Start+0x170>)
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	4293      	cmp	r3, r2
 8002354:	d008      	beq.n	8002368 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	2b05      	cmp	r3, #5
 8002360:	d002      	beq.n	8002368 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	2b09      	cmp	r3, #9
 8002366:	d114      	bne.n	8002392 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800237e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fdc6 	bl	8001f1c <LL_ADC_REG_StartConversion>
 8002390:	e025      	b.n	80023de <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002396:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a12      	ldr	r2, [pc, #72]	@ (80023ec <HAL_ADC_Start+0x16c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d002      	beq.n	80023ae <HAL_ADC_Start+0x12e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	e000      	b.n	80023b0 <HAL_ADC_Start+0x130>
 80023ae:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <HAL_ADC_Start+0x170>)
 80023b0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00f      	beq.n	80023de <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80023ce:	e006      	b.n	80023de <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80023d8:	e001      	b.n	80023de <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023da:	2302      	movs	r3, #2
 80023dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023de:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	50040300 	.word	0x50040300
 80023ec:	50040100 	.word	0x50040100
 80023f0:	50040000 	.word	0x50040000

080023f4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_ADC_Stop+0x16>
 8002406:	2302      	movs	r3, #2
 8002408:	e023      	b.n	8002452 <HAL_ADC_Stop+0x5e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002412:	2103      	movs	r1, #3
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fe57 	bl	80030c8 <ADC_ConversionStop>
 800241a:	4603      	mov	r3, r0
 800241c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d111      	bne.n	8002448 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 ff91 	bl	800334c <ADC_Disable>
 800242a:	4603      	mov	r3, r0
 800242c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002438:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	f043 0201 	orr.w	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	@ 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002490:	4882      	ldr	r0, [pc, #520]	@ (800269c <HAL_ADC_IRQHandler+0x228>)
 8002492:	f7ff fc8b 	bl	8001dac <LL_ADC_GetMultimode>
 8002496:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d017      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x5e>
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d012      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024bc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 ffee 	bl	80034a6 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2202      	movs	r2, #2
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <HAL_ADC_IRQHandler+0x72>
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8083 	beq.w	80025f8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d07d      	beq.n	80025f8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800250c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fba6 	bl	8001c6a <LL_ADC_REG_IsTriggerSourceSWStart>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d062      	beq.n	80025ea <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a5d      	ldr	r2, [pc, #372]	@ (80026a0 <HAL_ADC_IRQHandler+0x22c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d002      	beq.n	8002534 <HAL_ADC_IRQHandler+0xc0>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	e000      	b.n	8002536 <HAL_ADC_IRQHandler+0xc2>
 8002534:	4b5b      	ldr	r3, [pc, #364]	@ (80026a4 <HAL_ADC_IRQHandler+0x230>)
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	4293      	cmp	r3, r2
 800253c:	d008      	beq.n	8002550 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b05      	cmp	r3, #5
 8002548:	d002      	beq.n	8002550 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b09      	cmp	r3, #9
 800254e:	d104      	bne.n	800255a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	623b      	str	r3, [r7, #32]
 8002558:	e00c      	b.n	8002574 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a50      	ldr	r2, [pc, #320]	@ (80026a0 <HAL_ADC_IRQHandler+0x22c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d002      	beq.n	800256a <HAL_ADC_IRQHandler+0xf6>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	e000      	b.n	800256c <HAL_ADC_IRQHandler+0xf8>
 800256a:	4b4e      	ldr	r3, [pc, #312]	@ (80026a4 <HAL_ADC_IRQHandler+0x230>)
 800256c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d135      	bne.n	80025ea <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b08      	cmp	r3, #8
 800258a:	d12e      	bne.n	80025ea <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fceb 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d11a      	bne.n	80025d2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 020c 	bic.w	r2, r2, #12
 80025aa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d112      	bne.n	80025ea <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c8:	f043 0201 	orr.w	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80025d0:	e00b      	b.n	80025ea <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d6:	f043 0210 	orr.w	r2, r3, #16
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e2:	f043 0201 	orr.w	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f95c 	bl	80028a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	220c      	movs	r2, #12
 80025f6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <HAL_ADC_IRQHandler+0x198>
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10b      	bne.n	8002624 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 809f 	beq.w	8002756 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8099 	beq.w	8002756 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002634:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fb51 	bl	8001ce8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002646:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fb0c 	bl	8001c6a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002652:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a11      	ldr	r2, [pc, #68]	@ (80026a0 <HAL_ADC_IRQHandler+0x22c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d002      	beq.n	8002664 <HAL_ADC_IRQHandler+0x1f0>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	e000      	b.n	8002666 <HAL_ADC_IRQHandler+0x1f2>
 8002664:	4b0f      	ldr	r3, [pc, #60]	@ (80026a4 <HAL_ADC_IRQHandler+0x230>)
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	4293      	cmp	r3, r2
 800266c:	d008      	beq.n	8002680 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b06      	cmp	r3, #6
 8002678:	d002      	beq.n	8002680 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b07      	cmp	r3, #7
 800267e:	d104      	bne.n	800268a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	623b      	str	r3, [r7, #32]
 8002688:	e013      	b.n	80026b2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <HAL_ADC_IRQHandler+0x22c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d009      	beq.n	80026a8 <HAL_ADC_IRQHandler+0x234>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	e007      	b.n	80026aa <HAL_ADC_IRQHandler+0x236>
 800269a:	bf00      	nop
 800269c:	50040300 	.word	0x50040300
 80026a0:	50040100 	.word	0x50040100
 80026a4:	50040000 	.word	0x50040000
 80026a8:	4b7d      	ldr	r3, [pc, #500]	@ (80028a0 <HAL_ADC_IRQHandler+0x42c>)
 80026aa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d047      	beq.n	8002748 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <HAL_ADC_IRQHandler+0x25e>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d03f      	beq.n	8002748 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d13a      	bne.n	8002748 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026dc:	2b40      	cmp	r3, #64	@ 0x40
 80026de:	d133      	bne.n	8002748 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d12e      	bne.n	8002748 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fc63 	bl	8001fba <LL_ADC_INJ_IsConversionOngoing>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d11a      	bne.n	8002730 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002708:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d112      	bne.n	8002748 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	655a      	str	r2, [r3, #84]	@ 0x54
 800272e:	e00b      	b.n	8002748 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002734:	f043 0210 	orr.w	r2, r3, #16
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fe84 	bl	8003456 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2260      	movs	r2, #96	@ 0x60
 8002754:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275c:	2b00      	cmp	r3, #0
 800275e:	d011      	beq.n	8002784 <HAL_ADC_IRQHandler+0x310>
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00c      	beq.n	8002784 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f8a0 	bl	80028bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2280      	movs	r2, #128	@ 0x80
 8002782:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d012      	beq.n	80027b4 <HAL_ADC_IRQHandler+0x340>
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fe6a 	bl	800347e <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d012      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x370>
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00d      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fe5c 	bl	8003492 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d036      	beq.n	800285c <HAL_ADC_IRQHandler+0x3e8>
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d031      	beq.n	800285c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002800:	2301      	movs	r3, #1
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
 8002804:	e014      	b.n	8002830 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800280c:	4825      	ldr	r0, [pc, #148]	@ (80028a4 <HAL_ADC_IRQHandler+0x430>)
 800280e:	f7ff fadb 	bl	8001dc8 <LL_ADC_GetMultiDMATransfer>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00b      	beq.n	8002830 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002818:	2301      	movs	r3, #1
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
 800281c:	e008      	b.n	8002830 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800282c:	2301      	movs	r3, #1
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	2b01      	cmp	r3, #1
 8002834:	d10e      	bne.n	8002854 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002846:	f043 0202 	orr.w	r2, r3, #2
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f83e 	bl	80028d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2210      	movs	r2, #16
 800285a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002862:	2b00      	cmp	r3, #0
 8002864:	d018      	beq.n	8002898 <HAL_ADC_IRQHandler+0x424>
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002874:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002880:	f043 0208 	orr.w	r2, r3, #8
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002890:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fde9 	bl	800346a <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002898:	bf00      	nop
 800289a:	3728      	adds	r7, #40	@ 0x28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	50040000 	.word	0x50040000
 80028a4:	50040300 	.word	0x50040300

080028a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b0b6      	sub	sp, #216	@ 0xd8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x22>
 8002902:	2302      	movs	r3, #2
 8002904:	e3c9      	b.n	800309a <HAL_ADC_ConfigChannel+0x7b6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fb2a 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 83aa 	bne.w	8003074 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b05      	cmp	r3, #5
 800292e:	d824      	bhi.n	800297a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	3b02      	subs	r3, #2
 8002936:	2b03      	cmp	r3, #3
 8002938:	d81b      	bhi.n	8002972 <HAL_ADC_ConfigChannel+0x8e>
 800293a:	a201      	add	r2, pc, #4	@ (adr r2, 8002940 <HAL_ADC_ConfigChannel+0x5c>)
 800293c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002940:	08002951 	.word	0x08002951
 8002944:	08002959 	.word	0x08002959
 8002948:	08002961 	.word	0x08002961
 800294c:	08002969 	.word	0x08002969
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002950:	230c      	movs	r3, #12
 8002952:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002956:	e010      	b.n	800297a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002958:	2312      	movs	r3, #18
 800295a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800295e:	e00c      	b.n	800297a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002960:	2318      	movs	r3, #24
 8002962:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002966:	e008      	b.n	800297a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002968:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800296c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002970:	e003      	b.n	800297a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002972:	2306      	movs	r3, #6
 8002974:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002978:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002988:	f7ff f982 	bl	8001c90 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff faeb 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 8002996:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fb0b 	bl	8001fba <LL_ADC_INJ_IsConversionOngoing>
 80029a4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 81a4 	bne.w	8002cfa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 819f 	bne.w	8002cfa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6819      	ldr	r1, [r3, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	461a      	mov	r2, r3
 80029ca:	f7ff f9a0 	bl	8001d0e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	08db      	lsrs	r3, r3, #3
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d00a      	beq.n	8002a06 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6919      	ldr	r1, [r3, #16]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a00:	f7ff f8de 	bl	8001bc0 <LL_ADC_SetOffset>
 8002a04:	e179      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff f8fb 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x14e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff f8f0 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	0e9b      	lsrs	r3, r3, #26
 8002a2c:	f003 021f 	and.w	r2, r3, #31
 8002a30:	e01e      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x18c>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f8e5 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002a60:	2320      	movs	r3, #32
 8002a62:	e004      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002a64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x1a4>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0e9b      	lsrs	r3, r3, #26
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	e018      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1d6>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002a9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002aa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002aac:	2320      	movs	r3, #32
 8002aae:	e004      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002ab0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d106      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff f8b4 	bl	8001c34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff f898 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x214>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f88d 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	0e9b      	lsrs	r3, r3, #26
 8002af2:	f003 021f 	and.w	r2, r3, #31
 8002af6:	e01e      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x252>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2101      	movs	r1, #1
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f882 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002b16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002b1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002b26:	2320      	movs	r3, #32
 8002b28:	e004      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002b2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x26a>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0e9b      	lsrs	r3, r3, #26
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	e018      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x29c>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002b62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b66:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002b6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002b72:	2320      	movs	r3, #32
 8002b74:	e004      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002b76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d106      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f851 	bl	8001c34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2102      	movs	r1, #2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff f835 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x2da>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2102      	movs	r1, #2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f82a 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	0e9b      	lsrs	r3, r3, #26
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	e01e      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x318>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff f81f 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002be0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e004      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d105      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x330>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0e9b      	lsrs	r3, r3, #26
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	e014      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x35a>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002c22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e004      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002c34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c38:	fab3 f383 	clz	r3, r3
 8002c3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d106      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	2102      	movs	r1, #2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fff2 	bl	8001c34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2103      	movs	r1, #3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe ffd6 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10a      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x398>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2103      	movs	r1, #3
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe ffcb 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002c72:	4603      	mov	r3, r0
 8002c74:	0e9b      	lsrs	r3, r3, #26
 8002c76:	f003 021f 	and.w	r2, r3, #31
 8002c7a:	e017      	b.n	8002cac <HAL_ADC_ConfigChannel+0x3c8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2103      	movs	r1, #3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe ffc0 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c96:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002c98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	e003      	b.n	8002caa <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002ca2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x3e0>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0e9b      	lsrs	r3, r3, #26
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	e011      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x404>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002cd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002cd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	e003      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002ce0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d106      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2103      	movs	r1, #3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe ff9d 	bl	8001c34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff f8e6 	bl	8001ed0 <LL_ADC_IsEnabled>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 8140 	bne.w	8002f8c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f7ff f823 	bl	8001d64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	4a8f      	ldr	r2, [pc, #572]	@ (8002f60 <HAL_ADC_ConfigChannel+0x67c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	f040 8131 	bne.w	8002f8c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10b      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x46e>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	0e9b      	lsrs	r3, r3, #26
 8002d40:	3301      	adds	r3, #1
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	2b09      	cmp	r3, #9
 8002d48:	bf94      	ite	ls
 8002d4a:	2301      	movls	r3, #1
 8002d4c:	2300      	movhi	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e019      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x4a2>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002d64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	e003      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	2b09      	cmp	r3, #9
 8002d7e:	bf94      	ite	ls
 8002d80:	2301      	movls	r3, #1
 8002d82:	2300      	movhi	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d079      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d107      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x4c2>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	0e9b      	lsrs	r3, r3, #26
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	069b      	lsls	r3, r3, #26
 8002da0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002da4:	e015      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x4ee>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002db6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	e003      	b.n	8002dca <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002dc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	069b      	lsls	r3, r3, #26
 8002dce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x50e>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	0e9b      	lsrs	r3, r3, #26
 8002de4:	3301      	adds	r3, #1
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	e017      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x53e>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e02:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	e003      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002e0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	ea42 0103 	orr.w	r1, r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x564>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f003 021f 	and.w	r2, r3, #31
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	051b      	lsls	r3, r3, #20
 8002e46:	e018      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x596>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e58:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002e60:	2320      	movs	r3, #32
 8002e62:	e003      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f003 021f 	and.w	r2, r3, #31
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e7a:	430b      	orrs	r3, r1
 8002e7c:	e081      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d107      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x5b6>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	0e9b      	lsrs	r3, r3, #26
 8002e90:	3301      	adds	r3, #1
 8002e92:	069b      	lsls	r3, r3, #26
 8002e94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e98:	e015      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x5e2>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	e003      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	069b      	lsls	r3, r3, #26
 8002ec2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x602>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	0e9b      	lsrs	r3, r3, #26
 8002ed8:	3301      	adds	r3, #1
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2101      	movs	r1, #1
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	e017      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x632>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002efe:	2320      	movs	r3, #32
 8002f00:	e003      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	2101      	movs	r1, #1
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	ea42 0103 	orr.w	r1, r2, r3
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x65e>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f003 021f 	and.w	r2, r3, #31
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	3b1e      	subs	r3, #30
 8002f3a:	051b      	lsls	r3, r3, #20
 8002f3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f40:	e01e      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x69c>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	60fb      	str	r3, [r7, #12]
  return result;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d104      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	e006      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x688>
 8002f5e:	bf00      	nop
 8002f60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f003 021f 	and.w	r2, r3, #31
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	3b1e      	subs	r3, #30
 8002f7a:	051b      	lsls	r3, r3, #20
 8002f7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f80:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f86:	4619      	mov	r1, r3
 8002f88:	f7fe fec1 	bl	8001d0e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4b44      	ldr	r3, [pc, #272]	@ (80030a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d07a      	beq.n	800308e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f98:	4843      	ldr	r0, [pc, #268]	@ (80030a8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f9a:	f7fe fe03 	bl	8001ba4 <LL_ADC_GetCommonPathInternalCh>
 8002f9e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a41      	ldr	r2, [pc, #260]	@ (80030ac <HAL_ADC_ConfigChannel+0x7c8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d12c      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d126      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80030b0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_ADC_ConfigChannel+0x6e8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a3b      	ldr	r2, [pc, #236]	@ (80030b4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d15d      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4834      	ldr	r0, [pc, #208]	@ (80030a8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002fd8:	f7fe fdd1 	bl	8001b7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fdc:	4b36      	ldr	r3, [pc, #216]	@ (80030b8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	4a36      	ldr	r2, [pc, #216]	@ (80030bc <HAL_ADC_ConfigChannel+0x7d8>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ff6:	e002      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f9      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003004:	e040      	b.n	8003088 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2d      	ldr	r2, [pc, #180]	@ (80030c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d118      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003010:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003014:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d112      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a23      	ldr	r2, [pc, #140]	@ (80030b0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d004      	beq.n	8003030 <HAL_ADC_ConfigChannel+0x74c>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a22      	ldr	r2, [pc, #136]	@ (80030b4 <HAL_ADC_ConfigChannel+0x7d0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d12d      	bne.n	800308c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003030:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003034:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003038:	4619      	mov	r1, r3
 800303a:	481b      	ldr	r0, [pc, #108]	@ (80030a8 <HAL_ADC_ConfigChannel+0x7c4>)
 800303c:	f7fe fd9f 	bl	8001b7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003040:	e024      	b.n	800308c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1f      	ldr	r2, [pc, #124]	@ (80030c4 <HAL_ADC_ConfigChannel+0x7e0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d120      	bne.n	800308e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800304c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003050:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d11a      	bne.n	800308e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a14      	ldr	r2, [pc, #80]	@ (80030b0 <HAL_ADC_ConfigChannel+0x7cc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d115      	bne.n	800308e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003062:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003066:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800306a:	4619      	mov	r1, r3
 800306c:	480e      	ldr	r0, [pc, #56]	@ (80030a8 <HAL_ADC_ConfigChannel+0x7c4>)
 800306e:	f7fe fd86 	bl	8001b7e <LL_ADC_SetCommonPathInternalCh>
 8003072:	e00c      	b.n	800308e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003086:	e002      	b.n	800308e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003088:	bf00      	nop
 800308a:	e000      	b.n	800308e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800308c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003096:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800309a:	4618      	mov	r0, r3
 800309c:	37d8      	adds	r7, #216	@ 0xd8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	80080000 	.word	0x80080000
 80030a8:	50040300 	.word	0x50040300
 80030ac:	c7520000 	.word	0xc7520000
 80030b0:	50040000 	.word	0x50040000
 80030b4:	50040200 	.word	0x50040200
 80030b8:	20000004 	.word	0x20000004
 80030bc:	053e2d63 	.word	0x053e2d63
 80030c0:	cb840000 	.word	0xcb840000
 80030c4:	80000001 	.word	0x80000001

080030c8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe ff44 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 80030e4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe ff65 	bl	8001fba <LL_ADC_INJ_IsConversionOngoing>
 80030f0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d103      	bne.n	8003100 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8098 	beq.w	8003230 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d02a      	beq.n	8003164 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7e5b      	ldrb	r3, [r3, #25]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d126      	bne.n	8003164 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7e1b      	ldrb	r3, [r3, #24]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d122      	bne.n	8003164 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800311e:	2301      	movs	r3, #1
 8003120:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003122:	e014      	b.n	800314e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4a45      	ldr	r2, [pc, #276]	@ (800323c <ADC_ConversionStop+0x174>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d90d      	bls.n	8003148 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003130:	f043 0210 	orr.w	r2, r3, #16
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313c:	f043 0201 	orr.w	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e074      	b.n	8003232 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	3301      	adds	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003158:	2b40      	cmp	r3, #64	@ 0x40
 800315a:	d1e3      	bne.n	8003124 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2240      	movs	r2, #64	@ 0x40
 8003162:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d014      	beq.n	8003194 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe fefc 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe feb9 	bl	8001ef6 <LL_ADC_IsDisableOngoing>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fed8 	bl	8001f44 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d014      	beq.n	80031c4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe ff0b 	bl	8001fba <LL_ADC_INJ_IsConversionOngoing>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00c      	beq.n	80031c4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fea1 	bl	8001ef6 <LL_ADC_IsDisableOngoing>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d104      	bne.n	80031c4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fe fee7 	bl	8001f92 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d005      	beq.n	80031d6 <ADC_ConversionStop+0x10e>
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d105      	bne.n	80031dc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80031d0:	230c      	movs	r3, #12
 80031d2:	617b      	str	r3, [r7, #20]
        break;
 80031d4:	e005      	b.n	80031e2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80031d6:	2308      	movs	r3, #8
 80031d8:	617b      	str	r3, [r7, #20]
        break;
 80031da:	e002      	b.n	80031e2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80031dc:	2304      	movs	r3, #4
 80031de:	617b      	str	r3, [r7, #20]
        break;
 80031e0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80031e2:	f7fe fcad 	bl	8001b40 <HAL_GetTick>
 80031e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031e8:	e01b      	b.n	8003222 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80031ea:	f7fe fca9 	bl	8001b40 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d914      	bls.n	8003222 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	4013      	ands	r3, r2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00d      	beq.n	8003222 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320a:	f043 0210 	orr.w	r2, r3, #16
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003216:	f043 0201 	orr.w	r2, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e007      	b.n	8003232 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1dc      	bne.n	80031ea <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	a33fffff 	.word	0xa33fffff

08003240 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003248:	2300      	movs	r3, #0
 800324a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe fe3d 	bl	8001ed0 <LL_ADC_IsEnabled>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d169      	bne.n	8003330 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	4b36      	ldr	r3, [pc, #216]	@ (800333c <ADC_Enable+0xfc>)
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00d      	beq.n	8003286 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326e:	f043 0210 	orr.w	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327a:	f043 0201 	orr.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e055      	b.n	8003332 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fdf8 	bl	8001e80 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003290:	482b      	ldr	r0, [pc, #172]	@ (8003340 <ADC_Enable+0x100>)
 8003292:	f7fe fc87 	bl	8001ba4 <LL_ADC_GetCommonPathInternalCh>
 8003296:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003298:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800329c:	2b00      	cmp	r3, #0
 800329e:	d013      	beq.n	80032c8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032a0:	4b28      	ldr	r3, [pc, #160]	@ (8003344 <ADC_Enable+0x104>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	099b      	lsrs	r3, r3, #6
 80032a6:	4a28      	ldr	r2, [pc, #160]	@ (8003348 <ADC_Enable+0x108>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	099b      	lsrs	r3, r3, #6
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032ba:	e002      	b.n	80032c2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	3b01      	subs	r3, #1
 80032c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f9      	bne.n	80032bc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032c8:	f7fe fc3a 	bl	8001b40 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ce:	e028      	b.n	8003322 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fe fdfb 	bl	8001ed0 <LL_ADC_IsEnabled>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d104      	bne.n	80032ea <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe fdcb 	bl	8001e80 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032ea:	f7fe fc29 	bl	8001b40 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d914      	bls.n	8003322 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	d00d      	beq.n	8003322 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330a:	f043 0210 	orr.w	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003316:	f043 0201 	orr.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e007      	b.n	8003332 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d1cf      	bne.n	80032d0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	8000003f 	.word	0x8000003f
 8003340:	50040300 	.word	0x50040300
 8003344:	20000004 	.word	0x20000004
 8003348:	053e2d63 	.word	0x053e2d63

0800334c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe fdcc 	bl	8001ef6 <LL_ADC_IsDisableOngoing>
 800335e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe fdb3 	bl	8001ed0 <LL_ADC_IsEnabled>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d047      	beq.n	8003400 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d144      	bne.n	8003400 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030d 	and.w	r3, r3, #13
 8003380:	2b01      	cmp	r3, #1
 8003382:	d10c      	bne.n	800339e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe fd8d 	bl	8001ea8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2203      	movs	r2, #3
 8003394:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003396:	f7fe fbd3 	bl	8001b40 <HAL_GetTick>
 800339a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800339c:	e029      	b.n	80033f2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	f043 0210 	orr.w	r2, r3, #16
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e023      	b.n	8003402 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033ba:	f7fe fbc1 	bl	8001b40 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d914      	bls.n	80033f2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00d      	beq.n	80033f2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033da:	f043 0210 	orr.w	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e6:	f043 0201 	orr.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e007      	b.n	8003402 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1dc      	bne.n	80033ba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <LL_ADC_IsEnabled>:
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <LL_ADC_IsEnabled+0x18>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <LL_ADC_IsEnabled+0x1a>
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <LL_ADC_REG_IsConversionOngoing>:
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b04      	cmp	r3, #4
 8003442:	d101      	bne.n	8003448 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80034bc:	b590      	push	{r4, r7, lr}
 80034be:	b09f      	sub	sp, #124	@ 0x7c
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e093      	b.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80034e2:	2300      	movs	r3, #0
 80034e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80034e6:	2300      	movs	r3, #0
 80034e8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a47      	ldr	r2, [pc, #284]	@ (800360c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d102      	bne.n	80034fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034f4:	4b46      	ldr	r3, [pc, #280]	@ (8003610 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	e001      	b.n	80034fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10b      	bne.n	800351c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e072      	b.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff ff86 	bl	8003430 <LL_ADC_REG_IsConversionOngoing>
 8003524:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ff80 	bl	8003430 <LL_ADC_REG_IsConversionOngoing>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d154      	bne.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003538:	2b00      	cmp	r3, #0
 800353a:	d151      	bne.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800353c:	4b35      	ldr	r3, [pc, #212]	@ (8003614 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800353e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d02c      	beq.n	80035a2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003548:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800355a:	035b      	lsls	r3, r3, #13
 800355c:	430b      	orrs	r3, r1
 800355e:	431a      	orrs	r2, r3
 8003560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003562:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003564:	4829      	ldr	r0, [pc, #164]	@ (800360c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003566:	f7ff ff50 	bl	800340a <LL_ADC_IsEnabled>
 800356a:	4604      	mov	r4, r0
 800356c:	4828      	ldr	r0, [pc, #160]	@ (8003610 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800356e:	f7ff ff4c 	bl	800340a <LL_ADC_IsEnabled>
 8003572:	4603      	mov	r3, r0
 8003574:	431c      	orrs	r4, r3
 8003576:	4828      	ldr	r0, [pc, #160]	@ (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003578:	f7ff ff47 	bl	800340a <LL_ADC_IsEnabled>
 800357c:	4603      	mov	r3, r0
 800357e:	4323      	orrs	r3, r4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d137      	bne.n	80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800358c:	f023 030f 	bic.w	r3, r3, #15
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	6811      	ldr	r1, [r2, #0]
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	6892      	ldr	r2, [r2, #8]
 8003598:	430a      	orrs	r2, r1
 800359a:	431a      	orrs	r2, r3
 800359c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800359e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035a0:	e028      	b.n	80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035ac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035ae:	4817      	ldr	r0, [pc, #92]	@ (800360c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035b0:	f7ff ff2b 	bl	800340a <LL_ADC_IsEnabled>
 80035b4:	4604      	mov	r4, r0
 80035b6:	4816      	ldr	r0, [pc, #88]	@ (8003610 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035b8:	f7ff ff27 	bl	800340a <LL_ADC_IsEnabled>
 80035bc:	4603      	mov	r3, r0
 80035be:	431c      	orrs	r4, r3
 80035c0:	4815      	ldr	r0, [pc, #84]	@ (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80035c2:	f7ff ff22 	bl	800340a <LL_ADC_IsEnabled>
 80035c6:	4603      	mov	r3, r0
 80035c8:	4323      	orrs	r3, r4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d112      	bne.n	80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035d6:	f023 030f 	bic.w	r3, r3, #15
 80035da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035dc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035de:	e009      	b.n	80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80035f2:	e000      	b.n	80035f6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80035fe:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003602:	4618      	mov	r0, r3
 8003604:	377c      	adds	r7, #124	@ 0x7c
 8003606:	46bd      	mov	sp, r7
 8003608:	bd90      	pop	{r4, r7, pc}
 800360a:	bf00      	nop
 800360c:	50040000 	.word	0x50040000
 8003610:	50040100 	.word	0x50040100
 8003614:	50040300 	.word	0x50040300
 8003618:	50040200 	.word	0x50040200

0800361c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800362c:	4b0c      	ldr	r3, [pc, #48]	@ (8003660 <__NVIC_SetPriorityGrouping+0x44>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003638:	4013      	ands	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003644:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800364c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800364e:	4a04      	ldr	r2, [pc, #16]	@ (8003660 <__NVIC_SetPriorityGrouping+0x44>)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	60d3      	str	r3, [r2, #12]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003668:	4b04      	ldr	r3, [pc, #16]	@ (800367c <__NVIC_GetPriorityGrouping+0x18>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	0a1b      	lsrs	r3, r3, #8
 800366e:	f003 0307 	and.w	r3, r3, #7
}
 8003672:	4618      	mov	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	2b00      	cmp	r3, #0
 8003690:	db0b      	blt.n	80036aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	f003 021f 	and.w	r2, r3, #31
 8003698:	4907      	ldr	r1, [pc, #28]	@ (80036b8 <__NVIC_EnableIRQ+0x38>)
 800369a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	2001      	movs	r0, #1
 80036a2:	fa00 f202 	lsl.w	r2, r0, r2
 80036a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	e000e100 	.word	0xe000e100

080036bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	6039      	str	r1, [r7, #0]
 80036c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	db0a      	blt.n	80036e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	490c      	ldr	r1, [pc, #48]	@ (8003708 <__NVIC_SetPriority+0x4c>)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	0112      	lsls	r2, r2, #4
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	440b      	add	r3, r1
 80036e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036e4:	e00a      	b.n	80036fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	4908      	ldr	r1, [pc, #32]	@ (800370c <__NVIC_SetPriority+0x50>)
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	3b04      	subs	r3, #4
 80036f4:	0112      	lsls	r2, r2, #4
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	440b      	add	r3, r1
 80036fa:	761a      	strb	r2, [r3, #24]
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	e000e100 	.word	0xe000e100
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	@ 0x24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f1c3 0307 	rsb	r3, r3, #7
 800372a:	2b04      	cmp	r3, #4
 800372c:	bf28      	it	cs
 800372e:	2304      	movcs	r3, #4
 8003730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3304      	adds	r3, #4
 8003736:	2b06      	cmp	r3, #6
 8003738:	d902      	bls.n	8003740 <NVIC_EncodePriority+0x30>
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	3b03      	subs	r3, #3
 800373e:	e000      	b.n	8003742 <NVIC_EncodePriority+0x32>
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003744:	f04f 32ff 	mov.w	r2, #4294967295
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43da      	mvns	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	401a      	ands	r2, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003758:	f04f 31ff 	mov.w	r1, #4294967295
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	fa01 f303 	lsl.w	r3, r1, r3
 8003762:	43d9      	mvns	r1, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003768:	4313      	orrs	r3, r2
         );
}
 800376a:	4618      	mov	r0, r3
 800376c:	3724      	adds	r7, #36	@ 0x24
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3b01      	subs	r3, #1
 8003784:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003788:	d301      	bcc.n	800378e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800378a:	2301      	movs	r3, #1
 800378c:	e00f      	b.n	80037ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800378e:	4a0a      	ldr	r2, [pc, #40]	@ (80037b8 <SysTick_Config+0x40>)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003796:	210f      	movs	r1, #15
 8003798:	f04f 30ff 	mov.w	r0, #4294967295
 800379c:	f7ff ff8e 	bl	80036bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037a0:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <SysTick_Config+0x40>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037a6:	4b04      	ldr	r3, [pc, #16]	@ (80037b8 <SysTick_Config+0x40>)
 80037a8:	2207      	movs	r2, #7
 80037aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	e000e010 	.word	0xe000e010

080037bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ff29 	bl	800361c <__NVIC_SetPriorityGrouping>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b086      	sub	sp, #24
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	4603      	mov	r3, r0
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	607a      	str	r2, [r7, #4]
 80037de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037e4:	f7ff ff3e 	bl	8003664 <__NVIC_GetPriorityGrouping>
 80037e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	68b9      	ldr	r1, [r7, #8]
 80037ee:	6978      	ldr	r0, [r7, #20]
 80037f0:	f7ff ff8e 	bl	8003710 <NVIC_EncodePriority>
 80037f4:	4602      	mov	r2, r0
 80037f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff ff5d 	bl	80036bc <__NVIC_SetPriority>
}
 8003802:	bf00      	nop
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	4603      	mov	r3, r0
 8003812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff ff31 	bl	8003680 <__NVIC_EnableIRQ>
}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff ffa2 	bl	8003778 <SysTick_Config>
 8003834:	4603      	mov	r3, r0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800384e:	e17f      	b.n	8003b50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	2101      	movs	r1, #1
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	4013      	ands	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8171 	beq.w	8003b4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d005      	beq.n	8003880 <HAL_GPIO_Init+0x40>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d130      	bne.n	80038e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	2203      	movs	r2, #3
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038b6:	2201      	movs	r2, #1
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	f003 0201 	and.w	r2, r3, #1
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d118      	bne.n	8003920 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038f4:	2201      	movs	r2, #1
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	08db      	lsrs	r3, r3, #3
 800390a:	f003 0201 	and.w	r2, r3, #1
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b03      	cmp	r3, #3
 800392a:	d017      	beq.n	800395c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2203      	movs	r2, #3
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d123      	bne.n	80039b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	08da      	lsrs	r2, r3, #3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3208      	adds	r2, #8
 8003970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	220f      	movs	r2, #15
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	08da      	lsrs	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3208      	adds	r2, #8
 80039aa:	6939      	ldr	r1, [r7, #16]
 80039ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	2203      	movs	r2, #3
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0203 	and.w	r2, r3, #3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80ac 	beq.w	8003b4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b70 <HAL_GPIO_Init+0x330>)
 80039f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f6:	4a5e      	ldr	r2, [pc, #376]	@ (8003b70 <HAL_GPIO_Init+0x330>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80039fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003b70 <HAL_GPIO_Init+0x330>)
 8003a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a0a:	4a5a      	ldr	r2, [pc, #360]	@ (8003b74 <HAL_GPIO_Init+0x334>)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	3302      	adds	r3, #2
 8003a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	220f      	movs	r2, #15
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a34:	d025      	beq.n	8003a82 <HAL_GPIO_Init+0x242>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a4f      	ldr	r2, [pc, #316]	@ (8003b78 <HAL_GPIO_Init+0x338>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01f      	beq.n	8003a7e <HAL_GPIO_Init+0x23e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4e      	ldr	r2, [pc, #312]	@ (8003b7c <HAL_GPIO_Init+0x33c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d019      	beq.n	8003a7a <HAL_GPIO_Init+0x23a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a4d      	ldr	r2, [pc, #308]	@ (8003b80 <HAL_GPIO_Init+0x340>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_GPIO_Init+0x236>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a4c      	ldr	r2, [pc, #304]	@ (8003b84 <HAL_GPIO_Init+0x344>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00d      	beq.n	8003a72 <HAL_GPIO_Init+0x232>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a4b      	ldr	r2, [pc, #300]	@ (8003b88 <HAL_GPIO_Init+0x348>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <HAL_GPIO_Init+0x22e>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a4a      	ldr	r2, [pc, #296]	@ (8003b8c <HAL_GPIO_Init+0x34c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d101      	bne.n	8003a6a <HAL_GPIO_Init+0x22a>
 8003a66:	2306      	movs	r3, #6
 8003a68:	e00c      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a6a:	2307      	movs	r3, #7
 8003a6c:	e00a      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a6e:	2305      	movs	r3, #5
 8003a70:	e008      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a72:	2304      	movs	r3, #4
 8003a74:	e006      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a76:	2303      	movs	r3, #3
 8003a78:	e004      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e002      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a82:	2300      	movs	r3, #0
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	f002 0203 	and.w	r2, r2, #3
 8003a8a:	0092      	lsls	r2, r2, #2
 8003a8c:	4093      	lsls	r3, r2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a94:	4937      	ldr	r1, [pc, #220]	@ (8003b74 <HAL_GPIO_Init+0x334>)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	089b      	lsrs	r3, r3, #2
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ac6:	4a32      	ldr	r2, [pc, #200]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003acc:	4b30      	ldr	r3, [pc, #192]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003af0:	4a27      	ldr	r2, [pc, #156]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003af6:	4b26      	ldr	r3, [pc, #152]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4013      	ands	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b44:	4a12      	ldr	r2, [pc, #72]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f47f ae78 	bne.w	8003850 <HAL_GPIO_Init+0x10>
  }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40010000 	.word	0x40010000
 8003b78:	48000400 	.word	0x48000400
 8003b7c:	48000800 	.word	0x48000800
 8003b80:	48000c00 	.word	0x48000c00
 8003b84:	48001000 	.word	0x48001000
 8003b88:	48001400 	.word	0x48001400
 8003b8c:	48001800 	.word	0x48001800
 8003b90:	40010400 	.word	0x40010400

08003b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba4:	787b      	ldrb	r3, [r7, #1]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003baa:	887a      	ldrh	r2, [r7, #2]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bb0:	e002      	b.n	8003bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bc8:	4b04      	ldr	r3, [pc, #16]	@ (8003bdc <HAL_PWREx_GetVoltageRange+0x18>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40007000 	.word	0x40007000

08003be0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bee:	d130      	bne.n	8003c52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf0:	4b23      	ldr	r3, [pc, #140]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bfc:	d038      	beq.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bfe:	4b20      	ldr	r3, [pc, #128]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c06:	4a1e      	ldr	r2, [pc, #120]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2232      	movs	r2, #50	@ 0x32
 8003c14:	fb02 f303 	mul.w	r3, r2, r3
 8003c18:	4a1b      	ldr	r2, [pc, #108]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	0c9b      	lsrs	r3, r3, #18
 8003c20:	3301      	adds	r3, #1
 8003c22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c24:	e002      	b.n	8003c2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c2c:	4b14      	ldr	r3, [pc, #80]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c38:	d102      	bne.n	8003c40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f2      	bne.n	8003c26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c40:	4b0f      	ldr	r3, [pc, #60]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4c:	d110      	bne.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e00f      	b.n	8003c72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c52:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c5e:	d007      	beq.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c60:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c68:	4a05      	ldr	r2, [pc, #20]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40007000 	.word	0x40007000
 8003c84:	20000004 	.word	0x20000004
 8003c88:	431bde83 	.word	0x431bde83

08003c8c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e3ca      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c9e:	4b97      	ldr	r3, [pc, #604]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ca8:	4b94      	ldr	r3, [pc, #592]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80e4 	beq.w	8003e88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x4a>
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	f040 808b 	bne.w	8003de4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	f040 8087 	bne.w	8003de4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cd6:	4b89      	ldr	r3, [pc, #548]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_RCC_OscConfig+0x62>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e3a2      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	4b82      	ldr	r3, [pc, #520]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d004      	beq.n	8003d08 <HAL_RCC_OscConfig+0x7c>
 8003cfe:	4b7f      	ldr	r3, [pc, #508]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d06:	e005      	b.n	8003d14 <HAL_RCC_OscConfig+0x88>
 8003d08:	4b7c      	ldr	r3, [pc, #496]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d223      	bcs.n	8003d60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fd55 	bl	80047cc <RCC_SetFlashLatencyFromMSIRange>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e383      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d2c:	4b73      	ldr	r3, [pc, #460]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a72      	ldr	r2, [pc, #456]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d32:	f043 0308 	orr.w	r3, r3, #8
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	4b70      	ldr	r3, [pc, #448]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	496d      	ldr	r1, [pc, #436]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	4968      	ldr	r1, [pc, #416]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	604b      	str	r3, [r1, #4]
 8003d5e:	e025      	b.n	8003dac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d60:	4b66      	ldr	r3, [pc, #408]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a65      	ldr	r2, [pc, #404]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d66:	f043 0308 	orr.w	r3, r3, #8
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	4b63      	ldr	r3, [pc, #396]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	4960      	ldr	r1, [pc, #384]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	495b      	ldr	r1, [pc, #364]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fd15 	bl	80047cc <RCC_SetFlashLatencyFromMSIRange>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e343      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dac:	f000 fc4a 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b52      	ldr	r3, [pc, #328]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	4950      	ldr	r1, [pc, #320]	@ (8003f00 <HAL_RCC_OscConfig+0x274>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc8:	4a4e      	ldr	r2, [pc, #312]	@ (8003f04 <HAL_RCC_OscConfig+0x278>)
 8003dca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8003f08 <HAL_RCC_OscConfig+0x27c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fd fe65 	bl	8001aa0 <HAL_InitTick>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d052      	beq.n	8003e86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	e327      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d032      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dec:	4b43      	ldr	r3, [pc, #268]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a42      	ldr	r2, [pc, #264]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003df8:	f7fd fea2 	bl	8001b40 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e00:	f7fd fe9e 	bl	8001b40 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e310      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e12:	4b3a      	ldr	r3, [pc, #232]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e1e:	4b37      	ldr	r3, [pc, #220]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a36      	ldr	r2, [pc, #216]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e24:	f043 0308 	orr.w	r3, r3, #8
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b34      	ldr	r3, [pc, #208]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	4931      	ldr	r1, [pc, #196]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	492c      	ldr	r1, [pc, #176]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
 8003e50:	e01a      	b.n	8003e88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e52:	4b2a      	ldr	r3, [pc, #168]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a29      	ldr	r2, [pc, #164]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e5e:	f7fd fe6f 	bl	8001b40 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e66:	f7fd fe6b 	bl	8001b40 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e2dd      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e78:	4b20      	ldr	r3, [pc, #128]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f0      	bne.n	8003e66 <HAL_RCC_OscConfig+0x1da>
 8003e84:	e000      	b.n	8003e88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d074      	beq.n	8003f7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d005      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x21a>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	d10e      	bne.n	8003ebe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d10b      	bne.n	8003ebe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea6:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d064      	beq.n	8003f7c <HAL_RCC_OscConfig+0x2f0>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d160      	bne.n	8003f7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e2ba      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec6:	d106      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x24a>
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	e026      	b.n	8003f24 <HAL_RCC_OscConfig+0x298>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ede:	d115      	bne.n	8003f0c <HAL_RCC_OscConfig+0x280>
 8003ee0:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a05      	ldr	r2, [pc, #20]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003ee6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	4b03      	ldr	r3, [pc, #12]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a02      	ldr	r2, [pc, #8]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	e014      	b.n	8003f24 <HAL_RCC_OscConfig+0x298>
 8003efa:	bf00      	nop
 8003efc:	40021000 	.word	0x40021000
 8003f00:	0800a1d8 	.word	0x0800a1d8
 8003f04:	20000004 	.word	0x20000004
 8003f08:	20000008 	.word	0x20000008
 8003f0c:	4ba0      	ldr	r3, [pc, #640]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a9f      	ldr	r2, [pc, #636]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	4b9d      	ldr	r3, [pc, #628]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a9c      	ldr	r2, [pc, #624]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d013      	beq.n	8003f54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fd fe08 	bl	8001b40 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f34:	f7fd fe04 	bl	8001b40 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b64      	cmp	r3, #100	@ 0x64
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e276      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f46:	4b92      	ldr	r3, [pc, #584]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x2a8>
 8003f52:	e014      	b.n	8003f7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd fdf4 	bl	8001b40 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f5c:	f7fd fdf0 	bl	8001b40 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	@ 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e262      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f6e:	4b88      	ldr	r3, [pc, #544]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x2d0>
 8003f7a:	e000      	b.n	8003f7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d060      	beq.n	800404c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_OscConfig+0x310>
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b0c      	cmp	r3, #12
 8003f94:	d119      	bne.n	8003fca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d116      	bne.n	8003fca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f9c:	4b7c      	ldr	r3, [pc, #496]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x328>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e23f      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb4:	4b76      	ldr	r3, [pc, #472]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	061b      	lsls	r3, r3, #24
 8003fc2:	4973      	ldr	r1, [pc, #460]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fc8:	e040      	b.n	800404c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d023      	beq.n	800401a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd2:	4b6f      	ldr	r3, [pc, #444]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a6e      	ldr	r2, [pc, #440]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fd fdaf 	bl	8001b40 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe6:	f7fd fdab 	bl	8001b40 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e21d      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff8:	4b65      	ldr	r3, [pc, #404]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004004:	4b62      	ldr	r3, [pc, #392]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	061b      	lsls	r3, r3, #24
 8004012:	495f      	ldr	r1, [pc, #380]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]
 8004018:	e018      	b.n	800404c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401a:	4b5d      	ldr	r3, [pc, #372]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a5c      	ldr	r2, [pc, #368]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004026:	f7fd fd8b 	bl	8001b40 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800402e:	f7fd fd87 	bl	8001b40 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e1f9      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004040:	4b53      	ldr	r3, [pc, #332]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f0      	bne.n	800402e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d03c      	beq.n	80040d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01c      	beq.n	800409a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004060:	4b4b      	ldr	r3, [pc, #300]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004066:	4a4a      	ldr	r2, [pc, #296]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fd fd66 	bl	8001b40 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004078:	f7fd fd62 	bl	8001b40 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e1d4      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800408a:	4b41      	ldr	r3, [pc, #260]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 800408c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0ef      	beq.n	8004078 <HAL_RCC_OscConfig+0x3ec>
 8004098:	e01b      	b.n	80040d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800409a:	4b3d      	ldr	r3, [pc, #244]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 800409c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a0:	4a3b      	ldr	r2, [pc, #236]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 80040a2:	f023 0301 	bic.w	r3, r3, #1
 80040a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040aa:	f7fd fd49 	bl	8001b40 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b2:	f7fd fd45 	bl	8001b40 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e1b7      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040c4:	4b32      	ldr	r3, [pc, #200]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 80040c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1ef      	bne.n	80040b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80a6 	beq.w	800422c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e0:	2300      	movs	r3, #0
 80040e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 80040e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10d      	bne.n	800410c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f0:	4b27      	ldr	r3, [pc, #156]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f4:	4a26      	ldr	r2, [pc, #152]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 80040f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80040fc:	4b24      	ldr	r3, [pc, #144]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 80040fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004108:	2301      	movs	r3, #1
 800410a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800410c:	4b21      	ldr	r3, [pc, #132]	@ (8004194 <HAL_RCC_OscConfig+0x508>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d118      	bne.n	800414a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004118:	4b1e      	ldr	r3, [pc, #120]	@ (8004194 <HAL_RCC_OscConfig+0x508>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1d      	ldr	r2, [pc, #116]	@ (8004194 <HAL_RCC_OscConfig+0x508>)
 800411e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004122:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004124:	f7fd fd0c 	bl	8001b40 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800412c:	f7fd fd08 	bl	8001b40 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e17a      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800413e:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <HAL_RCC_OscConfig+0x508>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d108      	bne.n	8004164 <HAL_RCC_OscConfig+0x4d8>
 8004152:	4b0f      	ldr	r3, [pc, #60]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004158:	4a0d      	ldr	r2, [pc, #52]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004162:	e029      	b.n	80041b8 <HAL_RCC_OscConfig+0x52c>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b05      	cmp	r3, #5
 800416a:	d115      	bne.n	8004198 <HAL_RCC_OscConfig+0x50c>
 800416c:	4b08      	ldr	r3, [pc, #32]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	4a07      	ldr	r2, [pc, #28]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004174:	f043 0304 	orr.w	r3, r3, #4
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800417c:	4b04      	ldr	r3, [pc, #16]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004182:	4a03      	ldr	r2, [pc, #12]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800418c:	e014      	b.n	80041b8 <HAL_RCC_OscConfig+0x52c>
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000
 8004194:	40007000 	.word	0x40007000
 8004198:	4b9c      	ldr	r3, [pc, #624]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419e:	4a9b      	ldr	r2, [pc, #620]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041a8:	4b98      	ldr	r3, [pc, #608]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	4a97      	ldr	r2, [pc, #604]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80041b0:	f023 0304 	bic.w	r3, r3, #4
 80041b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d016      	beq.n	80041ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7fd fcbe 	bl	8001b40 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c6:	e00a      	b.n	80041de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c8:	f7fd fcba 	bl	8001b40 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e12a      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041de:	4b8b      	ldr	r3, [pc, #556]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ed      	beq.n	80041c8 <HAL_RCC_OscConfig+0x53c>
 80041ec:	e015      	b.n	800421a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fd fca7 	bl	8001b40 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041f4:	e00a      	b.n	800420c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f6:	f7fd fca3 	bl	8001b40 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004204:	4293      	cmp	r3, r2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e113      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800420c:	4b7f      	ldr	r3, [pc, #508]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1ed      	bne.n	80041f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800421a:	7ffb      	ldrb	r3, [r7, #31]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d105      	bne.n	800422c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004220:	4b7a      	ldr	r3, [pc, #488]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004224:	4a79      	ldr	r2, [pc, #484]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800422a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80fe 	beq.w	8004432 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423a:	2b02      	cmp	r3, #2
 800423c:	f040 80d0 	bne.w	80043e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004240:	4b72      	ldr	r3, [pc, #456]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f003 0203 	and.w	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	429a      	cmp	r2, r3
 8004252:	d130      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	3b01      	subs	r3, #1
 8004260:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d127      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004270:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d11f      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004280:	2a07      	cmp	r2, #7
 8004282:	bf14      	ite	ne
 8004284:	2201      	movne	r2, #1
 8004286:	2200      	moveq	r2, #0
 8004288:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800428a:	4293      	cmp	r3, r2
 800428c:	d113      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	3b01      	subs	r3, #1
 800429c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d109      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	3b01      	subs	r3, #1
 80042b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d06e      	beq.n	8004394 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	d069      	beq.n	8004390 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042bc:	4b53      	ldr	r3, [pc, #332]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d105      	bne.n	80042d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042c8:	4b50      	ldr	r3, [pc, #320]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0ad      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042d8:	4b4c      	ldr	r3, [pc, #304]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a4b      	ldr	r2, [pc, #300]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80042de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042e4:	f7fd fc2c 	bl	8001b40 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ec:	f7fd fc28 	bl	8001b40 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e09a      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042fe:	4b43      	ldr	r3, [pc, #268]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800430a:	4b40      	ldr	r3, [pc, #256]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	4b40      	ldr	r3, [pc, #256]	@ (8004410 <HAL_RCC_OscConfig+0x784>)
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800431a:	3a01      	subs	r2, #1
 800431c:	0112      	lsls	r2, r2, #4
 800431e:	4311      	orrs	r1, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004324:	0212      	lsls	r2, r2, #8
 8004326:	4311      	orrs	r1, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800432c:	0852      	lsrs	r2, r2, #1
 800432e:	3a01      	subs	r2, #1
 8004330:	0552      	lsls	r2, r2, #21
 8004332:	4311      	orrs	r1, r2
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004338:	0852      	lsrs	r2, r2, #1
 800433a:	3a01      	subs	r2, #1
 800433c:	0652      	lsls	r2, r2, #25
 800433e:	4311      	orrs	r1, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004344:	0912      	lsrs	r2, r2, #4
 8004346:	0452      	lsls	r2, r2, #17
 8004348:	430a      	orrs	r2, r1
 800434a:	4930      	ldr	r1, [pc, #192]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 800434c:	4313      	orrs	r3, r2
 800434e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004350:	4b2e      	ldr	r3, [pc, #184]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a2d      	ldr	r2, [pc, #180]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800435a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800435c:	4b2b      	ldr	r3, [pc, #172]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a2a      	ldr	r2, [pc, #168]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004366:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004368:	f7fd fbea 	bl	8001b40 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fd fbe6 	bl	8001b40 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e058      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004382:	4b22      	ldr	r3, [pc, #136]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800438e:	e050      	b.n	8004432 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e04f      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004394:	4b1d      	ldr	r3, [pc, #116]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d148      	bne.n	8004432 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043a0:	4b1a      	ldr	r3, [pc, #104]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a19      	ldr	r2, [pc, #100]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80043a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043ac:	4b17      	ldr	r3, [pc, #92]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a16      	ldr	r2, [pc, #88]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80043b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043b8:	f7fd fbc2 	bl	8001b40 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fd fbbe 	bl	8001b40 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e030      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d2:	4b0e      	ldr	r3, [pc, #56]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x734>
 80043de:	e028      	b.n	8004432 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b0c      	cmp	r3, #12
 80043e4:	d023      	beq.n	800442e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e6:	4b09      	ldr	r3, [pc, #36]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a08      	ldr	r2, [pc, #32]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80043ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f2:	f7fd fba5 	bl	8001b40 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f8:	e00c      	b.n	8004414 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fd fba1 	bl	8001b40 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d905      	bls.n	8004414 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e013      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
 800440c:	40021000 	.word	0x40021000
 8004410:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004414:	4b09      	ldr	r3, [pc, #36]	@ (800443c <HAL_RCC_OscConfig+0x7b0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1ec      	bne.n	80043fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004420:	4b06      	ldr	r3, [pc, #24]	@ (800443c <HAL_RCC_OscConfig+0x7b0>)
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	4905      	ldr	r1, [pc, #20]	@ (800443c <HAL_RCC_OscConfig+0x7b0>)
 8004426:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <HAL_RCC_OscConfig+0x7b4>)
 8004428:	4013      	ands	r3, r2
 800442a:	60cb      	str	r3, [r1, #12]
 800442c:	e001      	b.n	8004432 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000
 8004440:	feeefffc 	.word	0xfeeefffc

08004444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0e7      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004458:	4b75      	ldr	r3, [pc, #468]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d910      	bls.n	8004488 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b72      	ldr	r3, [pc, #456]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 0207 	bic.w	r2, r3, #7
 800446e:	4970      	ldr	r1, [pc, #448]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b6e      	ldr	r3, [pc, #440]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0cf      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d010      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	4b66      	ldr	r3, [pc, #408]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d908      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a4:	4b63      	ldr	r3, [pc, #396]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	4960      	ldr	r1, [pc, #384]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d04c      	beq.n	800455c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d107      	bne.n	80044da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ca:	4b5a      	ldr	r3, [pc, #360]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d121      	bne.n	800451a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e0a6      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d107      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e2:	4b54      	ldr	r3, [pc, #336]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d115      	bne.n	800451a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e09a      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044fa:	4b4e      	ldr	r3, [pc, #312]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e08e      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800450a:	4b4a      	ldr	r3, [pc, #296]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e086      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800451a:	4b46      	ldr	r3, [pc, #280]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f023 0203 	bic.w	r2, r3, #3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4943      	ldr	r1, [pc, #268]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452c:	f7fd fb08 	bl	8001b40 <HAL_GetTick>
 8004530:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004532:	e00a      	b.n	800454a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004534:	f7fd fb04 	bl	8001b40 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e06e      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	4b3a      	ldr	r3, [pc, #232]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 020c 	and.w	r2, r3, #12
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	429a      	cmp	r2, r3
 800455a:	d1eb      	bne.n	8004534 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	4b31      	ldr	r3, [pc, #196]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004574:	429a      	cmp	r2, r3
 8004576:	d208      	bcs.n	800458a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004578:	4b2e      	ldr	r3, [pc, #184]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	492b      	ldr	r1, [pc, #172]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800458a:	4b29      	ldr	r3, [pc, #164]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d210      	bcs.n	80045ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004598:	4b25      	ldr	r3, [pc, #148]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f023 0207 	bic.w	r2, r3, #7
 80045a0:	4923      	ldr	r1, [pc, #140]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a8:	4b21      	ldr	r3, [pc, #132]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d001      	beq.n	80045ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e036      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	4918      	ldr	r1, [pc, #96]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d009      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045e4:	4b13      	ldr	r3, [pc, #76]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	4910      	ldr	r1, [pc, #64]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045f8:	f000 f824 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	490b      	ldr	r1, [pc, #44]	@ (8004638 <HAL_RCC_ClockConfig+0x1f4>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
 8004614:	4a09      	ldr	r2, [pc, #36]	@ (800463c <HAL_RCC_ClockConfig+0x1f8>)
 8004616:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004618:	4b09      	ldr	r3, [pc, #36]	@ (8004640 <HAL_RCC_ClockConfig+0x1fc>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7fd fa3f 	bl	8001aa0 <HAL_InitTick>
 8004622:	4603      	mov	r3, r0
 8004624:	72fb      	strb	r3, [r7, #11]

  return status;
 8004626:	7afb      	ldrb	r3, [r7, #11]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40022000 	.word	0x40022000
 8004634:	40021000 	.word	0x40021000
 8004638:	0800a1d8 	.word	0x0800a1d8
 800463c:	20000004 	.word	0x20000004
 8004640:	20000008 	.word	0x20000008

08004644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004644:	b480      	push	{r7}
 8004646:	b089      	sub	sp, #36	@ 0x24
 8004648:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	2300      	movs	r3, #0
 8004650:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004652:	4b3e      	ldr	r3, [pc, #248]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
 800465a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800465c:	4b3b      	ldr	r3, [pc, #236]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0x34>
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d121      	bne.n	80046b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d11e      	bne.n	80046b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004678:	4b34      	ldr	r3, [pc, #208]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d107      	bne.n	8004694 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004684:	4b31      	ldr	r3, [pc, #196]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 8004686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	e005      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004694:	4b2d      	ldr	r3, [pc, #180]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004750 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10d      	bne.n	80046cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046b4:	e00a      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d102      	bne.n	80046c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046bc:	4b25      	ldr	r3, [pc, #148]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x110>)
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e004      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d101      	bne.n	80046cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046c8:	4b23      	ldr	r3, [pc, #140]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x114>)
 80046ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d134      	bne.n	800473c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046d2:	4b1e      	ldr	r3, [pc, #120]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d003      	beq.n	80046ea <HAL_RCC_GetSysClockFreq+0xa6>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d003      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0xac>
 80046e8:	e005      	b.n	80046f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x110>)
 80046ec:	617b      	str	r3, [r7, #20]
      break;
 80046ee:	e005      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046f0:	4b19      	ldr	r3, [pc, #100]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x114>)
 80046f2:	617b      	str	r3, [r7, #20]
      break;
 80046f4:	e002      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	617b      	str	r3, [r7, #20]
      break;
 80046fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046fc:	4b13      	ldr	r3, [pc, #76]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	3301      	adds	r3, #1
 8004708:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800470a:	4b10      	ldr	r3, [pc, #64]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	0a1b      	lsrs	r3, r3, #8
 8004710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	fb03 f202 	mul.w	r2, r3, r2
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004722:	4b0a      	ldr	r3, [pc, #40]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	0e5b      	lsrs	r3, r3, #25
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	3301      	adds	r3, #1
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	fbb2 f3f3 	udiv	r3, r2, r3
 800473a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800473c:	69bb      	ldr	r3, [r7, #24]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3724      	adds	r7, #36	@ 0x24
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000
 8004750:	0800a1f0 	.word	0x0800a1f0
 8004754:	00f42400 	.word	0x00f42400
 8004758:	007a1200 	.word	0x007a1200

0800475c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004760:	4b03      	ldr	r3, [pc, #12]	@ (8004770 <HAL_RCC_GetHCLKFreq+0x14>)
 8004762:	681b      	ldr	r3, [r3, #0]
}
 8004764:	4618      	mov	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	20000004 	.word	0x20000004

08004774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004778:	f7ff fff0 	bl	800475c <HAL_RCC_GetHCLKFreq>
 800477c:	4602      	mov	r2, r0
 800477e:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	4904      	ldr	r1, [pc, #16]	@ (800479c <HAL_RCC_GetPCLK1Freq+0x28>)
 800478a:	5ccb      	ldrb	r3, [r1, r3]
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004794:	4618      	mov	r0, r3
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40021000 	.word	0x40021000
 800479c:	0800a1e8 	.word	0x0800a1e8

080047a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047a4:	f7ff ffda 	bl	800475c <HAL_RCC_GetHCLKFreq>
 80047a8:	4602      	mov	r2, r0
 80047aa:	4b06      	ldr	r3, [pc, #24]	@ (80047c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	0adb      	lsrs	r3, r3, #11
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	4904      	ldr	r1, [pc, #16]	@ (80047c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047b6:	5ccb      	ldrb	r3, [r1, r3]
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40021000 	.word	0x40021000
 80047c8:	0800a1e8 	.word	0x0800a1e8

080047cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047e4:	f7ff f9ee 	bl	8003bc4 <HAL_PWREx_GetVoltageRange>
 80047e8:	6178      	str	r0, [r7, #20]
 80047ea:	e014      	b.n	8004816 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047ec:	4b25      	ldr	r3, [pc, #148]	@ (8004884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f0:	4a24      	ldr	r2, [pc, #144]	@ (8004884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80047f8:	4b22      	ldr	r3, [pc, #136]	@ (8004884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004804:	f7ff f9de 	bl	8003bc4 <HAL_PWREx_GetVoltageRange>
 8004808:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800480a:	4b1e      	ldr	r3, [pc, #120]	@ (8004884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800480c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480e:	4a1d      	ldr	r2, [pc, #116]	@ (8004884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004810:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004814:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800481c:	d10b      	bne.n	8004836 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b80      	cmp	r3, #128	@ 0x80
 8004822:	d919      	bls.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2ba0      	cmp	r3, #160	@ 0xa0
 8004828:	d902      	bls.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800482a:	2302      	movs	r3, #2
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	e013      	b.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004830:	2301      	movs	r3, #1
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	e010      	b.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b80      	cmp	r3, #128	@ 0x80
 800483a:	d902      	bls.n	8004842 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800483c:	2303      	movs	r3, #3
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	e00a      	b.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b80      	cmp	r3, #128	@ 0x80
 8004846:	d102      	bne.n	800484e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004848:	2302      	movs	r3, #2
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	e004      	b.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b70      	cmp	r3, #112	@ 0x70
 8004852:	d101      	bne.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004854:	2301      	movs	r3, #1
 8004856:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004858:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f023 0207 	bic.w	r2, r3, #7
 8004860:	4909      	ldr	r1, [pc, #36]	@ (8004888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004868:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	429a      	cmp	r2, r3
 8004874:	d001      	beq.n	800487a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40021000 	.word	0x40021000
 8004888:	40022000 	.word	0x40022000

0800488c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004894:	2300      	movs	r3, #0
 8004896:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004898:	2300      	movs	r3, #0
 800489a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d041      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048b0:	d02a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048b6:	d824      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048bc:	d008      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048c2:	d81e      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80048c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048cc:	d010      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048ce:	e018      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048d0:	4b86      	ldr	r3, [pc, #536]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4a85      	ldr	r2, [pc, #532]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048dc:	e015      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3304      	adds	r3, #4
 80048e2:	2100      	movs	r1, #0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fabb 	bl	8004e60 <RCCEx_PLLSAI1_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048ee:	e00c      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3320      	adds	r3, #32
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fba6 	bl	8005048 <RCCEx_PLLSAI2_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004900:	e003      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	74fb      	strb	r3, [r7, #19]
      break;
 8004906:	e000      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800490a:	7cfb      	ldrb	r3, [r7, #19]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004910:	4b76      	ldr	r3, [pc, #472]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004916:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800491e:	4973      	ldr	r1, [pc, #460]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004926:	e001      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d041      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800493c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004940:	d02a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004942:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004946:	d824      	bhi.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004948:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800494c:	d008      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800494e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004952:	d81e      	bhi.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800495c:	d010      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800495e:	e018      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004960:	4b62      	ldr	r3, [pc, #392]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a61      	ldr	r2, [pc, #388]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800496a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800496c:	e015      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3304      	adds	r3, #4
 8004972:	2100      	movs	r1, #0
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fa73 	bl	8004e60 <RCCEx_PLLSAI1_Config>
 800497a:	4603      	mov	r3, r0
 800497c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800497e:	e00c      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3320      	adds	r3, #32
 8004984:	2100      	movs	r1, #0
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fb5e 	bl	8005048 <RCCEx_PLLSAI2_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004990:	e003      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	74fb      	strb	r3, [r7, #19]
      break;
 8004996:	e000      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800499a:	7cfb      	ldrb	r3, [r7, #19]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10b      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049a0:	4b52      	ldr	r3, [pc, #328]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049ae:	494f      	ldr	r1, [pc, #316]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80049b6:	e001      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80a0 	beq.w	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ca:	2300      	movs	r3, #0
 80049cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049ce:	4b47      	ldr	r3, [pc, #284]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00d      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e4:	4b41      	ldr	r3, [pc, #260]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e8:	4a40      	ldr	r2, [pc, #256]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80049f0:	4b3e      	ldr	r3, [pc, #248]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049fc:	2301      	movs	r3, #1
 80049fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a00:	4b3b      	ldr	r3, [pc, #236]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a3a      	ldr	r2, [pc, #232]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a0c:	f7fd f898 	bl	8001b40 <HAL_GetTick>
 8004a10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a12:	e009      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a14:	f7fd f894 	bl	8001b40 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d902      	bls.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	74fb      	strb	r3, [r7, #19]
        break;
 8004a26:	e005      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a28:	4b31      	ldr	r3, [pc, #196]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0ef      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004a34:	7cfb      	ldrb	r3, [r7, #19]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d15c      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01f      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d019      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a58:	4b24      	ldr	r3, [pc, #144]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a64:	4b21      	ldr	r3, [pc, #132]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6a:	4a20      	ldr	r2, [pc, #128]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a74:	4b1d      	ldr	r3, [pc, #116]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a84:	4a19      	ldr	r2, [pc, #100]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d016      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a96:	f7fd f853 	bl	8001b40 <HAL_GetTick>
 8004a9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a9c:	e00b      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9e:	f7fd f84f 	bl	8001b40 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d902      	bls.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ab4:	e006      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ec      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ac4:	7cfb      	ldrb	r3, [r7, #19]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aca:	4b08      	ldr	r3, [pc, #32]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ada:	4904      	ldr	r1, [pc, #16]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ae2:	e009      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ae4:	7cfb      	ldrb	r3, [r7, #19]
 8004ae6:	74bb      	strb	r3, [r7, #18]
 8004ae8:	e006      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004af8:	7c7b      	ldrb	r3, [r7, #17]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d105      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afe:	4b9e      	ldr	r3, [pc, #632]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b02:	4a9d      	ldr	r2, [pc, #628]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b16:	4b98      	ldr	r3, [pc, #608]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1c:	f023 0203 	bic.w	r2, r3, #3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b24:	4994      	ldr	r1, [pc, #592]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b38:	4b8f      	ldr	r3, [pc, #572]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3e:	f023 020c 	bic.w	r2, r3, #12
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b46:	498c      	ldr	r1, [pc, #560]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b5a:	4b87      	ldr	r3, [pc, #540]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	4983      	ldr	r1, [pc, #524]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8a:	497b      	ldr	r1, [pc, #492]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b9e:	4b76      	ldr	r3, [pc, #472]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bac:	4972      	ldr	r1, [pc, #456]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bc0:	4b6d      	ldr	r3, [pc, #436]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bce:	496a      	ldr	r1, [pc, #424]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004be2:	4b65      	ldr	r3, [pc, #404]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf0:	4961      	ldr	r1, [pc, #388]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c04:	4b5c      	ldr	r3, [pc, #368]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c12:	4959      	ldr	r1, [pc, #356]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c26:	4b54      	ldr	r3, [pc, #336]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c34:	4950      	ldr	r1, [pc, #320]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c48:	4b4b      	ldr	r3, [pc, #300]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c56:	4948      	ldr	r1, [pc, #288]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c6a:	4b43      	ldr	r3, [pc, #268]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c78:	493f      	ldr	r1, [pc, #252]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d028      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c8c:	4b3a      	ldr	r3, [pc, #232]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c9a:	4937      	ldr	r1, [pc, #220]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ca6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004caa:	d106      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cac:	4b32      	ldr	r3, [pc, #200]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4a31      	ldr	r2, [pc, #196]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cb6:	60d3      	str	r3, [r2, #12]
 8004cb8:	e011      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cc2:	d10c      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	2101      	movs	r1, #1
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 f8c8 	bl	8004e60 <RCCEx_PLLSAI1_Config>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cd4:	7cfb      	ldrb	r3, [r7, #19]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004cda:	7cfb      	ldrb	r3, [r7, #19]
 8004cdc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d028      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cea:	4b23      	ldr	r3, [pc, #140]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf8:	491f      	ldr	r1, [pc, #124]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d08:	d106      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d14:	60d3      	str	r3, [r2, #12]
 8004d16:	e011      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d20:	d10c      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2101      	movs	r1, #1
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 f899 	bl	8004e60 <RCCEx_PLLSAI1_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004d38:	7cfb      	ldrb	r3, [r7, #19]
 8004d3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d02b      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d48:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d56:	4908      	ldr	r1, [pc, #32]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d66:	d109      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d68:	4b03      	ldr	r3, [pc, #12]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4a02      	ldr	r2, [pc, #8]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d72:	60d3      	str	r3, [r2, #12]
 8004d74:	e014      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 f867 	bl	8004e60 <RCCEx_PLLSAI1_Config>
 8004d92:	4603      	mov	r3, r0
 8004d94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d96:	7cfb      	ldrb	r3, [r7, #19]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d9c:	7cfb      	ldrb	r3, [r7, #19]
 8004d9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d02f      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dac:	4b2b      	ldr	r3, [pc, #172]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dba:	4928      	ldr	r1, [pc, #160]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dca:	d10d      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 f844 	bl	8004e60 <RCCEx_PLLSAI1_Config>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ddc:	7cfb      	ldrb	r3, [r7, #19]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d014      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004de2:	7cfb      	ldrb	r3, [r7, #19]
 8004de4:	74bb      	strb	r3, [r7, #18]
 8004de6:	e011      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3320      	adds	r3, #32
 8004df6:	2102      	movs	r1, #2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f925 	bl	8005048 <RCCEx_PLLSAI2_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
 8004e0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e18:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e26:	490d      	ldr	r1, [pc, #52]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00b      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e3a:	4b08      	ldr	r3, [pc, #32]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e4a:	4904      	ldr	r1, [pc, #16]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e52:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40021000 	.word	0x40021000

08004e60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e6e:	4b75      	ldr	r3, [pc, #468]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d018      	beq.n	8004eac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e7a:	4b72      	ldr	r3, [pc, #456]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f003 0203 	and.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d10d      	bne.n	8004ea6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
       ||
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e92:	4b6c      	ldr	r3, [pc, #432]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	091b      	lsrs	r3, r3, #4
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d047      	beq.n	8004f36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
 8004eaa:	e044      	b.n	8004f36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d018      	beq.n	8004ee6 <RCCEx_PLLSAI1_Config+0x86>
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d825      	bhi.n	8004f04 <RCCEx_PLLSAI1_Config+0xa4>
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d002      	beq.n	8004ec2 <RCCEx_PLLSAI1_Config+0x62>
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d009      	beq.n	8004ed4 <RCCEx_PLLSAI1_Config+0x74>
 8004ec0:	e020      	b.n	8004f04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ec2:	4b60      	ldr	r3, [pc, #384]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d11d      	bne.n	8004f0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed2:	e01a      	b.n	8004f0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ed4:	4b5b      	ldr	r3, [pc, #364]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d116      	bne.n	8004f0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee4:	e013      	b.n	8004f0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ee6:	4b57      	ldr	r3, [pc, #348]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10f      	bne.n	8004f12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ef2:	4b54      	ldr	r3, [pc, #336]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f02:	e006      	b.n	8004f12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      break;
 8004f08:	e004      	b.n	8004f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e002      	b.n	8004f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e000      	b.n	8004f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f12:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10d      	bne.n	8004f36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f1a:	4b4a      	ldr	r3, [pc, #296]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6819      	ldr	r1, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	4944      	ldr	r1, [pc, #272]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d17d      	bne.n	8005038 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f3c:	4b41      	ldr	r3, [pc, #260]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a40      	ldr	r2, [pc, #256]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f48:	f7fc fdfa 	bl	8001b40 <HAL_GetTick>
 8004f4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f4e:	e009      	b.n	8004f64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f50:	f7fc fdf6 	bl	8001b40 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d902      	bls.n	8004f64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	73fb      	strb	r3, [r7, #15]
        break;
 8004f62:	e005      	b.n	8004f70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f64:	4b37      	ldr	r3, [pc, #220]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1ef      	bne.n	8004f50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d160      	bne.n	8005038 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d111      	bne.n	8004fa0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f7c:	4b31      	ldr	r3, [pc, #196]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6892      	ldr	r2, [r2, #8]
 8004f8c:	0211      	lsls	r1, r2, #8
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68d2      	ldr	r2, [r2, #12]
 8004f92:	0912      	lsrs	r2, r2, #4
 8004f94:	0452      	lsls	r2, r2, #17
 8004f96:	430a      	orrs	r2, r1
 8004f98:	492a      	ldr	r1, [pc, #168]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	610b      	str	r3, [r1, #16]
 8004f9e:	e027      	b.n	8004ff0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d112      	bne.n	8004fcc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fa6:	4b27      	ldr	r3, [pc, #156]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004fae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6892      	ldr	r2, [r2, #8]
 8004fb6:	0211      	lsls	r1, r2, #8
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6912      	ldr	r2, [r2, #16]
 8004fbc:	0852      	lsrs	r2, r2, #1
 8004fbe:	3a01      	subs	r2, #1
 8004fc0:	0552      	lsls	r2, r2, #21
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	491f      	ldr	r1, [pc, #124]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	610b      	str	r3, [r1, #16]
 8004fca:	e011      	b.n	8004ff0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004fd4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6892      	ldr	r2, [r2, #8]
 8004fdc:	0211      	lsls	r1, r2, #8
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6952      	ldr	r2, [r2, #20]
 8004fe2:	0852      	lsrs	r2, r2, #1
 8004fe4:	3a01      	subs	r2, #1
 8004fe6:	0652      	lsls	r2, r2, #25
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	4916      	ldr	r1, [pc, #88]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ff0:	4b14      	ldr	r3, [pc, #80]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a13      	ldr	r2, [pc, #76]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ffa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffc:	f7fc fda0 	bl	8001b40 <HAL_GetTick>
 8005000:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005002:	e009      	b.n	8005018 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005004:	f7fc fd9c 	bl	8001b40 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d902      	bls.n	8005018 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	73fb      	strb	r3, [r7, #15]
          break;
 8005016:	e005      	b.n	8005024 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005018:	4b0a      	ldr	r3, [pc, #40]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0ef      	beq.n	8005004 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800502a:	4b06      	ldr	r3, [pc, #24]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	4904      	ldr	r1, [pc, #16]	@ (8005044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005034:	4313      	orrs	r3, r2
 8005036:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40021000 	.word	0x40021000

08005048 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005056:	4b6a      	ldr	r3, [pc, #424]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d018      	beq.n	8005094 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005062:	4b67      	ldr	r3, [pc, #412]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f003 0203 	and.w	r2, r3, #3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d10d      	bne.n	800508e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
       ||
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800507a:	4b61      	ldr	r3, [pc, #388]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	091b      	lsrs	r3, r3, #4
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
       ||
 800508a:	429a      	cmp	r2, r3
 800508c:	d047      	beq.n	800511e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
 8005092:	e044      	b.n	800511e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b03      	cmp	r3, #3
 800509a:	d018      	beq.n	80050ce <RCCEx_PLLSAI2_Config+0x86>
 800509c:	2b03      	cmp	r3, #3
 800509e:	d825      	bhi.n	80050ec <RCCEx_PLLSAI2_Config+0xa4>
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d002      	beq.n	80050aa <RCCEx_PLLSAI2_Config+0x62>
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d009      	beq.n	80050bc <RCCEx_PLLSAI2_Config+0x74>
 80050a8:	e020      	b.n	80050ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050aa:	4b55      	ldr	r3, [pc, #340]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d11d      	bne.n	80050f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ba:	e01a      	b.n	80050f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050bc:	4b50      	ldr	r3, [pc, #320]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d116      	bne.n	80050f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050cc:	e013      	b.n	80050f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050ce:	4b4c      	ldr	r3, [pc, #304]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10f      	bne.n	80050fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050da:	4b49      	ldr	r3, [pc, #292]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050ea:	e006      	b.n	80050fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
      break;
 80050f0:	e004      	b.n	80050fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050f2:	bf00      	nop
 80050f4:	e002      	b.n	80050fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050f6:	bf00      	nop
 80050f8:	e000      	b.n	80050fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10d      	bne.n	800511e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005102:	4b3f      	ldr	r3, [pc, #252]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6819      	ldr	r1, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	3b01      	subs	r3, #1
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	430b      	orrs	r3, r1
 8005118:	4939      	ldr	r1, [pc, #228]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 800511a:	4313      	orrs	r3, r2
 800511c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d167      	bne.n	80051f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005124:	4b36      	ldr	r3, [pc, #216]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a35      	ldr	r2, [pc, #212]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 800512a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800512e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005130:	f7fc fd06 	bl	8001b40 <HAL_GetTick>
 8005134:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005136:	e009      	b.n	800514c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005138:	f7fc fd02 	bl	8001b40 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d902      	bls.n	800514c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	73fb      	strb	r3, [r7, #15]
        break;
 800514a:	e005      	b.n	8005158 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800514c:	4b2c      	ldr	r3, [pc, #176]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1ef      	bne.n	8005138 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d14a      	bne.n	80051f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d111      	bne.n	8005188 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005164:	4b26      	ldr	r3, [pc, #152]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800516c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6892      	ldr	r2, [r2, #8]
 8005174:	0211      	lsls	r1, r2, #8
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	68d2      	ldr	r2, [r2, #12]
 800517a:	0912      	lsrs	r2, r2, #4
 800517c:	0452      	lsls	r2, r2, #17
 800517e:	430a      	orrs	r2, r1
 8005180:	491f      	ldr	r1, [pc, #124]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005182:	4313      	orrs	r3, r2
 8005184:	614b      	str	r3, [r1, #20]
 8005186:	e011      	b.n	80051ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005188:	4b1d      	ldr	r3, [pc, #116]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005190:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6892      	ldr	r2, [r2, #8]
 8005198:	0211      	lsls	r1, r2, #8
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6912      	ldr	r2, [r2, #16]
 800519e:	0852      	lsrs	r2, r2, #1
 80051a0:	3a01      	subs	r2, #1
 80051a2:	0652      	lsls	r2, r2, #25
 80051a4:	430a      	orrs	r2, r1
 80051a6:	4916      	ldr	r1, [pc, #88]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80051ac:	4b14      	ldr	r3, [pc, #80]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a13      	ldr	r2, [pc, #76]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b8:	f7fc fcc2 	bl	8001b40 <HAL_GetTick>
 80051bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051be:	e009      	b.n	80051d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051c0:	f7fc fcbe 	bl	8001b40 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d902      	bls.n	80051d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	73fb      	strb	r3, [r7, #15]
          break;
 80051d2:	e005      	b.n	80051e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0ef      	beq.n	80051c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80051e6:	4b06      	ldr	r3, [pc, #24]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e8:	695a      	ldr	r2, [r3, #20]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	4904      	ldr	r1, [pc, #16]	@ (8005200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40021000 	.word	0x40021000

08005204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e049      	b.n	80052aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7fc f9e4 	bl	80015f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3304      	adds	r3, #4
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f000 feda 	bl	8005ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e049      	b.n	8005358 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d106      	bne.n	80052de <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f841 	bl	8005360 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2202      	movs	r2, #2
 80052e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3304      	adds	r3, #4
 80052ee:	4619      	mov	r1, r3
 80052f0:	4610      	mov	r0, r2
 80052f2:	f000 fe83 	bl	8005ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d109      	bne.n	800539c <HAL_TIM_OC_Start_IT+0x28>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b01      	cmp	r3, #1
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	e03c      	b.n	8005416 <HAL_TIM_OC_Start_IT+0xa2>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d109      	bne.n	80053b6 <HAL_TIM_OC_Start_IT+0x42>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	bf14      	ite	ne
 80053ae:	2301      	movne	r3, #1
 80053b0:	2300      	moveq	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	e02f      	b.n	8005416 <HAL_TIM_OC_Start_IT+0xa2>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d109      	bne.n	80053d0 <HAL_TIM_OC_Start_IT+0x5c>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	bf14      	ite	ne
 80053c8:	2301      	movne	r3, #1
 80053ca:	2300      	moveq	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	e022      	b.n	8005416 <HAL_TIM_OC_Start_IT+0xa2>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b0c      	cmp	r3, #12
 80053d4:	d109      	bne.n	80053ea <HAL_TIM_OC_Start_IT+0x76>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b01      	cmp	r3, #1
 80053e0:	bf14      	ite	ne
 80053e2:	2301      	movne	r3, #1
 80053e4:	2300      	moveq	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	e015      	b.n	8005416 <HAL_TIM_OC_Start_IT+0xa2>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d109      	bne.n	8005404 <HAL_TIM_OC_Start_IT+0x90>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	e008      	b.n	8005416 <HAL_TIM_OC_Start_IT+0xa2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b01      	cmp	r3, #1
 800540e:	bf14      	ite	ne
 8005410:	2301      	movne	r3, #1
 8005412:	2300      	moveq	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e0e7      	b.n	80055ee <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d104      	bne.n	800542e <HAL_TIM_OC_Start_IT+0xba>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800542c:	e023      	b.n	8005476 <HAL_TIM_OC_Start_IT+0x102>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b04      	cmp	r3, #4
 8005432:	d104      	bne.n	800543e <HAL_TIM_OC_Start_IT+0xca>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800543c:	e01b      	b.n	8005476 <HAL_TIM_OC_Start_IT+0x102>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b08      	cmp	r3, #8
 8005442:	d104      	bne.n	800544e <HAL_TIM_OC_Start_IT+0xda>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800544c:	e013      	b.n	8005476 <HAL_TIM_OC_Start_IT+0x102>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b0c      	cmp	r3, #12
 8005452:	d104      	bne.n	800545e <HAL_TIM_OC_Start_IT+0xea>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800545c:	e00b      	b.n	8005476 <HAL_TIM_OC_Start_IT+0x102>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b10      	cmp	r3, #16
 8005462:	d104      	bne.n	800546e <HAL_TIM_OC_Start_IT+0xfa>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800546c:	e003      	b.n	8005476 <HAL_TIM_OC_Start_IT+0x102>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2202      	movs	r2, #2
 8005472:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b0c      	cmp	r3, #12
 800547a:	d841      	bhi.n	8005500 <HAL_TIM_OC_Start_IT+0x18c>
 800547c:	a201      	add	r2, pc, #4	@ (adr r2, 8005484 <HAL_TIM_OC_Start_IT+0x110>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	080054b9 	.word	0x080054b9
 8005488:	08005501 	.word	0x08005501
 800548c:	08005501 	.word	0x08005501
 8005490:	08005501 	.word	0x08005501
 8005494:	080054cb 	.word	0x080054cb
 8005498:	08005501 	.word	0x08005501
 800549c:	08005501 	.word	0x08005501
 80054a0:	08005501 	.word	0x08005501
 80054a4:	080054dd 	.word	0x080054dd
 80054a8:	08005501 	.word	0x08005501
 80054ac:	08005501 	.word	0x08005501
 80054b0:	08005501 	.word	0x08005501
 80054b4:	080054ef 	.word	0x080054ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0202 	orr.w	r2, r2, #2
 80054c6:	60da      	str	r2, [r3, #12]
      break;
 80054c8:	e01d      	b.n	8005506 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0204 	orr.w	r2, r2, #4
 80054d8:	60da      	str	r2, [r3, #12]
      break;
 80054da:	e014      	b.n	8005506 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0208 	orr.w	r2, r2, #8
 80054ea:	60da      	str	r2, [r3, #12]
      break;
 80054ec:	e00b      	b.n	8005506 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0210 	orr.w	r2, r2, #16
 80054fc:	60da      	str	r2, [r3, #12]
      break;
 80054fe:	e002      	b.n	8005506 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      break;
 8005504:	bf00      	nop
  }

  if (status == HAL_OK)
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d16f      	bne.n	80055ec <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2201      	movs	r2, #1
 8005512:	6839      	ldr	r1, [r7, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f001 f987 	bl	8006828 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a36      	ldr	r2, [pc, #216]	@ (80055f8 <HAL_TIM_OC_Start_IT+0x284>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <HAL_TIM_OC_Start_IT+0x1d8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a34      	ldr	r2, [pc, #208]	@ (80055fc <HAL_TIM_OC_Start_IT+0x288>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00e      	beq.n	800554c <HAL_TIM_OC_Start_IT+0x1d8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a33      	ldr	r2, [pc, #204]	@ (8005600 <HAL_TIM_OC_Start_IT+0x28c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d009      	beq.n	800554c <HAL_TIM_OC_Start_IT+0x1d8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a31      	ldr	r2, [pc, #196]	@ (8005604 <HAL_TIM_OC_Start_IT+0x290>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <HAL_TIM_OC_Start_IT+0x1d8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a30      	ldr	r2, [pc, #192]	@ (8005608 <HAL_TIM_OC_Start_IT+0x294>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d101      	bne.n	8005550 <HAL_TIM_OC_Start_IT+0x1dc>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <HAL_TIM_OC_Start_IT+0x1de>
 8005550:	2300      	movs	r3, #0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d007      	beq.n	8005566 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a23      	ldr	r2, [pc, #140]	@ (80055f8 <HAL_TIM_OC_Start_IT+0x284>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d01d      	beq.n	80055ac <HAL_TIM_OC_Start_IT+0x238>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005578:	d018      	beq.n	80055ac <HAL_TIM_OC_Start_IT+0x238>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a23      	ldr	r2, [pc, #140]	@ (800560c <HAL_TIM_OC_Start_IT+0x298>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d013      	beq.n	80055ac <HAL_TIM_OC_Start_IT+0x238>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a21      	ldr	r2, [pc, #132]	@ (8005610 <HAL_TIM_OC_Start_IT+0x29c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00e      	beq.n	80055ac <HAL_TIM_OC_Start_IT+0x238>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a20      	ldr	r2, [pc, #128]	@ (8005614 <HAL_TIM_OC_Start_IT+0x2a0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d009      	beq.n	80055ac <HAL_TIM_OC_Start_IT+0x238>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a17      	ldr	r2, [pc, #92]	@ (80055fc <HAL_TIM_OC_Start_IT+0x288>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <HAL_TIM_OC_Start_IT+0x238>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a16      	ldr	r2, [pc, #88]	@ (8005600 <HAL_TIM_OC_Start_IT+0x28c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d115      	bne.n	80055d8 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	4b19      	ldr	r3, [pc, #100]	@ (8005618 <HAL_TIM_OC_Start_IT+0x2a4>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b06      	cmp	r3, #6
 80055bc:	d015      	beq.n	80055ea <HAL_TIM_OC_Start_IT+0x276>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c4:	d011      	beq.n	80055ea <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0201 	orr.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d6:	e008      	b.n	80055ea <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e000      	b.n	80055ec <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ea:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40012c00 	.word	0x40012c00
 80055fc:	40013400 	.word	0x40013400
 8005600:	40014000 	.word	0x40014000
 8005604:	40014400 	.word	0x40014400
 8005608:	40014800 	.word	0x40014800
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	00010007 	.word	0x00010007

0800561c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e049      	b.n	80056c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f841 	bl	80056ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3304      	adds	r3, #4
 8005658:	4619      	mov	r1, r3
 800565a:	4610      	mov	r0, r2
 800565c:	f000 fcce 	bl	8005ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_TIM_PWM_Start+0x24>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	bf14      	ite	ne
 80056fc:	2301      	movne	r3, #1
 80056fe:	2300      	moveq	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	e03c      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b04      	cmp	r3, #4
 8005708:	d109      	bne.n	800571e <HAL_TIM_PWM_Start+0x3e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b01      	cmp	r3, #1
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	e02f      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d109      	bne.n	8005738 <HAL_TIM_PWM_Start+0x58>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	bf14      	ite	ne
 8005730:	2301      	movne	r3, #1
 8005732:	2300      	moveq	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	e022      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d109      	bne.n	8005752 <HAL_TIM_PWM_Start+0x72>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b01      	cmp	r3, #1
 8005748:	bf14      	ite	ne
 800574a:	2301      	movne	r3, #1
 800574c:	2300      	moveq	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	e015      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b10      	cmp	r3, #16
 8005756:	d109      	bne.n	800576c <HAL_TIM_PWM_Start+0x8c>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	bf14      	ite	ne
 8005764:	2301      	movne	r3, #1
 8005766:	2300      	moveq	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	e008      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	bf14      	ite	ne
 8005778:	2301      	movne	r3, #1
 800577a:	2300      	moveq	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e09c      	b.n	80058c0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d104      	bne.n	8005796 <HAL_TIM_PWM_Start+0xb6>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005794:	e023      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b04      	cmp	r3, #4
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_PWM_Start+0xc6>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057a4:	e01b      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_PWM_Start+0xd6>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057b4:	e013      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b0c      	cmp	r3, #12
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_PWM_Start+0xe6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057c4:	e00b      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b10      	cmp	r3, #16
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_PWM_Start+0xf6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057d4:	e003      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2201      	movs	r2, #1
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f001 f81e 	bl	8006828 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a35      	ldr	r2, [pc, #212]	@ (80058c8 <HAL_TIM_PWM_Start+0x1e8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <HAL_TIM_PWM_Start+0x13e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a34      	ldr	r2, [pc, #208]	@ (80058cc <HAL_TIM_PWM_Start+0x1ec>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00e      	beq.n	800581e <HAL_TIM_PWM_Start+0x13e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a32      	ldr	r2, [pc, #200]	@ (80058d0 <HAL_TIM_PWM_Start+0x1f0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_TIM_PWM_Start+0x13e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a31      	ldr	r2, [pc, #196]	@ (80058d4 <HAL_TIM_PWM_Start+0x1f4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <HAL_TIM_PWM_Start+0x13e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a2f      	ldr	r2, [pc, #188]	@ (80058d8 <HAL_TIM_PWM_Start+0x1f8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d101      	bne.n	8005822 <HAL_TIM_PWM_Start+0x142>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <HAL_TIM_PWM_Start+0x144>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d007      	beq.n	8005838 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005836:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a22      	ldr	r2, [pc, #136]	@ (80058c8 <HAL_TIM_PWM_Start+0x1e8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d01d      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800584a:	d018      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a22      	ldr	r2, [pc, #136]	@ (80058dc <HAL_TIM_PWM_Start+0x1fc>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d013      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a21      	ldr	r2, [pc, #132]	@ (80058e0 <HAL_TIM_PWM_Start+0x200>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00e      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1f      	ldr	r2, [pc, #124]	@ (80058e4 <HAL_TIM_PWM_Start+0x204>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d009      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a17      	ldr	r2, [pc, #92]	@ (80058cc <HAL_TIM_PWM_Start+0x1ec>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d004      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a15      	ldr	r2, [pc, #84]	@ (80058d0 <HAL_TIM_PWM_Start+0x1f0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d115      	bne.n	80058aa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	4b18      	ldr	r3, [pc, #96]	@ (80058e8 <HAL_TIM_PWM_Start+0x208>)
 8005886:	4013      	ands	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b06      	cmp	r3, #6
 800588e:	d015      	beq.n	80058bc <HAL_TIM_PWM_Start+0x1dc>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005896:	d011      	beq.n	80058bc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a8:	e008      	b.n	80058bc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e000      	b.n	80058be <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40013400 	.word	0x40013400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400
 80058d8:	40014800 	.word	0x40014800
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40000c00 	.word	0x40000c00
 80058e8:	00010007 	.word	0x00010007

080058ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d020      	beq.n	8005950 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01b      	beq.n	8005950 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0202 	mvn.w	r2, #2
 8005920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fb41 	bl	8005fbe <HAL_TIM_IC_CaptureCallback>
 800593c:	e005      	b.n	800594a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fb fac8 	bl	8000ed4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fb44 	bl	8005fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b00      	cmp	r3, #0
 8005958:	d020      	beq.n	800599c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01b      	beq.n	800599c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0204 	mvn.w	r2, #4
 800596c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2202      	movs	r2, #2
 8005972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fb1b 	bl	8005fbe <HAL_TIM_IC_CaptureCallback>
 8005988:	e005      	b.n	8005996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fb faa2 	bl	8000ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fb1e 	bl	8005fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d020      	beq.n	80059e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01b      	beq.n	80059e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0208 	mvn.w	r2, #8
 80059b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2204      	movs	r2, #4
 80059be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 faf5 	bl	8005fbe <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fb fa7c 	bl	8000ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 faf8 	bl	8005fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d020      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01b      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0210 	mvn.w	r2, #16
 8005a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 facf 	bl	8005fbe <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fb fa56 	bl	8000ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fad2 	bl	8005fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00c      	beq.n	8005a58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0201 	mvn.w	r2, #1
 8005a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 faa9 	bl	8005faa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d104      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00c      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d007      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 ff89 	bl	8006998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00c      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 ff81 	bl	80069ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00c      	beq.n	8005ace <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d007      	beq.n	8005ace <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fa8c 	bl	8005fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f003 0320 	and.w	r3, r3, #32
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00c      	beq.n	8005af2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d007      	beq.n	8005af2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f06f 0220 	mvn.w	r2, #32
 8005aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 ff49 	bl	8006984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005af2:	bf00      	nop
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e066      	b.n	8005be8 <HAL_TIM_OC_ConfigChannel+0xec>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b14      	cmp	r3, #20
 8005b26:	d857      	bhi.n	8005bd8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005b28:	a201      	add	r2, pc, #4	@ (adr r2, 8005b30 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b85 	.word	0x08005b85
 8005b34:	08005bd9 	.word	0x08005bd9
 8005b38:	08005bd9 	.word	0x08005bd9
 8005b3c:	08005bd9 	.word	0x08005bd9
 8005b40:	08005b93 	.word	0x08005b93
 8005b44:	08005bd9 	.word	0x08005bd9
 8005b48:	08005bd9 	.word	0x08005bd9
 8005b4c:	08005bd9 	.word	0x08005bd9
 8005b50:	08005ba1 	.word	0x08005ba1
 8005b54:	08005bd9 	.word	0x08005bd9
 8005b58:	08005bd9 	.word	0x08005bd9
 8005b5c:	08005bd9 	.word	0x08005bd9
 8005b60:	08005baf 	.word	0x08005baf
 8005b64:	08005bd9 	.word	0x08005bd9
 8005b68:	08005bd9 	.word	0x08005bd9
 8005b6c:	08005bd9 	.word	0x08005bd9
 8005b70:	08005bbd 	.word	0x08005bbd
 8005b74:	08005bd9 	.word	0x08005bd9
 8005b78:	08005bd9 	.word	0x08005bd9
 8005b7c:	08005bd9 	.word	0x08005bd9
 8005b80:	08005bcb 	.word	0x08005bcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fadc 	bl	8006148 <TIM_OC1_SetConfig>
      break;
 8005b90:	e025      	b.n	8005bde <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fb65 	bl	8006268 <TIM_OC2_SetConfig>
      break;
 8005b9e:	e01e      	b.n	8005bde <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fbe8 	bl	800637c <TIM_OC3_SetConfig>
      break;
 8005bac:	e017      	b.n	8005bde <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fc69 	bl	800648c <TIM_OC4_SetConfig>
      break;
 8005bba:	e010      	b.n	8005bde <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fccc 	bl	8006560 <TIM_OC5_SetConfig>
      break;
 8005bc8:	e009      	b.n	8005bde <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 fd29 	bl	8006628 <TIM_OC6_SetConfig>
      break;
 8005bd6:	e002      	b.n	8005bde <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	75fb      	strb	r3, [r7, #23]
      break;
 8005bdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e0ff      	b.n	8005e0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b14      	cmp	r3, #20
 8005c1a:	f200 80f0 	bhi.w	8005dfe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c24:	08005c79 	.word	0x08005c79
 8005c28:	08005dff 	.word	0x08005dff
 8005c2c:	08005dff 	.word	0x08005dff
 8005c30:	08005dff 	.word	0x08005dff
 8005c34:	08005cb9 	.word	0x08005cb9
 8005c38:	08005dff 	.word	0x08005dff
 8005c3c:	08005dff 	.word	0x08005dff
 8005c40:	08005dff 	.word	0x08005dff
 8005c44:	08005cfb 	.word	0x08005cfb
 8005c48:	08005dff 	.word	0x08005dff
 8005c4c:	08005dff 	.word	0x08005dff
 8005c50:	08005dff 	.word	0x08005dff
 8005c54:	08005d3b 	.word	0x08005d3b
 8005c58:	08005dff 	.word	0x08005dff
 8005c5c:	08005dff 	.word	0x08005dff
 8005c60:	08005dff 	.word	0x08005dff
 8005c64:	08005d7d 	.word	0x08005d7d
 8005c68:	08005dff 	.word	0x08005dff
 8005c6c:	08005dff 	.word	0x08005dff
 8005c70:	08005dff 	.word	0x08005dff
 8005c74:	08005dbd 	.word	0x08005dbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68b9      	ldr	r1, [r7, #8]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fa62 	bl	8006148 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699a      	ldr	r2, [r3, #24]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0208 	orr.w	r2, r2, #8
 8005c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0204 	bic.w	r2, r2, #4
 8005ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6999      	ldr	r1, [r3, #24]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	619a      	str	r2, [r3, #24]
      break;
 8005cb6:	e0a5      	b.n	8005e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fad2 	bl	8006268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699a      	ldr	r2, [r3, #24]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6999      	ldr	r1, [r3, #24]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	021a      	lsls	r2, r3, #8
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	619a      	str	r2, [r3, #24]
      break;
 8005cf8:	e084      	b.n	8005e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fb3b 	bl	800637c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0208 	orr.w	r2, r2, #8
 8005d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69da      	ldr	r2, [r3, #28]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0204 	bic.w	r2, r2, #4
 8005d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69d9      	ldr	r1, [r3, #28]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	61da      	str	r2, [r3, #28]
      break;
 8005d38:	e064      	b.n	8005e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68b9      	ldr	r1, [r7, #8]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fba3 	bl	800648c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69da      	ldr	r2, [r3, #28]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69d9      	ldr	r1, [r3, #28]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	021a      	lsls	r2, r3, #8
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	61da      	str	r2, [r3, #28]
      break;
 8005d7a:	e043      	b.n	8005e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68b9      	ldr	r1, [r7, #8]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fbec 	bl	8006560 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0208 	orr.w	r2, r2, #8
 8005d96:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0204 	bic.w	r2, r2, #4
 8005da6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	691a      	ldr	r2, [r3, #16]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005dba:	e023      	b.n	8005e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fc30 	bl	8006628 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dd6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005de6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	021a      	lsls	r2, r3, #8
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005dfc:	e002      	b.n	8005e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	75fb      	strb	r3, [r7, #23]
      break;
 8005e02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop

08005e18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_TIM_ConfigClockSource+0x1c>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e0b6      	b.n	8005fa2 <HAL_TIM_ConfigClockSource+0x18a>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e70:	d03e      	beq.n	8005ef0 <HAL_TIM_ConfigClockSource+0xd8>
 8005e72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e76:	f200 8087 	bhi.w	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e7e:	f000 8086 	beq.w	8005f8e <HAL_TIM_ConfigClockSource+0x176>
 8005e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e86:	d87f      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005e88:	2b70      	cmp	r3, #112	@ 0x70
 8005e8a:	d01a      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0xaa>
 8005e8c:	2b70      	cmp	r3, #112	@ 0x70
 8005e8e:	d87b      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005e90:	2b60      	cmp	r3, #96	@ 0x60
 8005e92:	d050      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0x11e>
 8005e94:	2b60      	cmp	r3, #96	@ 0x60
 8005e96:	d877      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005e98:	2b50      	cmp	r3, #80	@ 0x50
 8005e9a:	d03c      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0xfe>
 8005e9c:	2b50      	cmp	r3, #80	@ 0x50
 8005e9e:	d873      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005ea0:	2b40      	cmp	r3, #64	@ 0x40
 8005ea2:	d058      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x13e>
 8005ea4:	2b40      	cmp	r3, #64	@ 0x40
 8005ea6:	d86f      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005ea8:	2b30      	cmp	r3, #48	@ 0x30
 8005eaa:	d064      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x15e>
 8005eac:	2b30      	cmp	r3, #48	@ 0x30
 8005eae:	d86b      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d060      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x15e>
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d867      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d05c      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x15e>
 8005ebc:	2b10      	cmp	r3, #16
 8005ebe:	d05a      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x15e>
 8005ec0:	e062      	b.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ed2:	f000 fc89 	bl	80067e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	609a      	str	r2, [r3, #8]
      break;
 8005eee:	e04f      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f00:	f000 fc72 	bl	80067e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f12:	609a      	str	r2, [r3, #8]
      break;
 8005f14:	e03c      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f22:	461a      	mov	r2, r3
 8005f24:	f000 fbe6 	bl	80066f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2150      	movs	r1, #80	@ 0x50
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fc3f 	bl	80067b2 <TIM_ITRx_SetConfig>
      break;
 8005f34:	e02c      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f42:	461a      	mov	r2, r3
 8005f44:	f000 fc05 	bl	8006752 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2160      	movs	r1, #96	@ 0x60
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fc2f 	bl	80067b2 <TIM_ITRx_SetConfig>
      break;
 8005f54:	e01c      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f62:	461a      	mov	r2, r3
 8005f64:	f000 fbc6 	bl	80066f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2140      	movs	r1, #64	@ 0x40
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fc1f 	bl	80067b2 <TIM_ITRx_SetConfig>
      break;
 8005f74:	e00c      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4610      	mov	r0, r2
 8005f82:	f000 fc16 	bl	80067b2 <TIM_ITRx_SetConfig>
      break;
 8005f86:	e003      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f8c:	e000      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
	...

08005ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a46      	ldr	r2, [pc, #280]	@ (8006128 <TIM_Base_SetConfig+0x12c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d013      	beq.n	800603c <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800601a:	d00f      	beq.n	800603c <TIM_Base_SetConfig+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a43      	ldr	r2, [pc, #268]	@ (800612c <TIM_Base_SetConfig+0x130>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00b      	beq.n	800603c <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a42      	ldr	r2, [pc, #264]	@ (8006130 <TIM_Base_SetConfig+0x134>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d007      	beq.n	800603c <TIM_Base_SetConfig+0x40>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a41      	ldr	r2, [pc, #260]	@ (8006134 <TIM_Base_SetConfig+0x138>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d003      	beq.n	800603c <TIM_Base_SetConfig+0x40>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a40      	ldr	r2, [pc, #256]	@ (8006138 <TIM_Base_SetConfig+0x13c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d108      	bne.n	800604e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a35      	ldr	r2, [pc, #212]	@ (8006128 <TIM_Base_SetConfig+0x12c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01f      	beq.n	8006096 <TIM_Base_SetConfig+0x9a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605c:	d01b      	beq.n	8006096 <TIM_Base_SetConfig+0x9a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a32      	ldr	r2, [pc, #200]	@ (800612c <TIM_Base_SetConfig+0x130>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d017      	beq.n	8006096 <TIM_Base_SetConfig+0x9a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a31      	ldr	r2, [pc, #196]	@ (8006130 <TIM_Base_SetConfig+0x134>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d013      	beq.n	8006096 <TIM_Base_SetConfig+0x9a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a30      	ldr	r2, [pc, #192]	@ (8006134 <TIM_Base_SetConfig+0x138>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00f      	beq.n	8006096 <TIM_Base_SetConfig+0x9a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a2f      	ldr	r2, [pc, #188]	@ (8006138 <TIM_Base_SetConfig+0x13c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00b      	beq.n	8006096 <TIM_Base_SetConfig+0x9a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a2e      	ldr	r2, [pc, #184]	@ (800613c <TIM_Base_SetConfig+0x140>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d007      	beq.n	8006096 <TIM_Base_SetConfig+0x9a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a2d      	ldr	r2, [pc, #180]	@ (8006140 <TIM_Base_SetConfig+0x144>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d003      	beq.n	8006096 <TIM_Base_SetConfig+0x9a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a2c      	ldr	r2, [pc, #176]	@ (8006144 <TIM_Base_SetConfig+0x148>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d108      	bne.n	80060a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800609c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a16      	ldr	r2, [pc, #88]	@ (8006128 <TIM_Base_SetConfig+0x12c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d00f      	beq.n	80060f4 <TIM_Base_SetConfig+0xf8>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a18      	ldr	r2, [pc, #96]	@ (8006138 <TIM_Base_SetConfig+0x13c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00b      	beq.n	80060f4 <TIM_Base_SetConfig+0xf8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a17      	ldr	r2, [pc, #92]	@ (800613c <TIM_Base_SetConfig+0x140>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d007      	beq.n	80060f4 <TIM_Base_SetConfig+0xf8>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a16      	ldr	r2, [pc, #88]	@ (8006140 <TIM_Base_SetConfig+0x144>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_Base_SetConfig+0xf8>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a15      	ldr	r2, [pc, #84]	@ (8006144 <TIM_Base_SetConfig+0x148>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d103      	bne.n	80060fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b01      	cmp	r3, #1
 800610c:	d105      	bne.n	800611a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f023 0201 	bic.w	r2, r3, #1
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	611a      	str	r2, [r3, #16]
  }
}
 800611a:	bf00      	nop
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40000400 	.word	0x40000400
 8006130:	40000800 	.word	0x40000800
 8006134:	40000c00 	.word	0x40000c00
 8006138:	40013400 	.word	0x40013400
 800613c:	40014000 	.word	0x40014000
 8006140:	40014400 	.word	0x40014400
 8006144:	40014800 	.word	0x40014800

08006148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	f023 0201 	bic.w	r2, r3, #1
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800617a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0303 	bic.w	r3, r3, #3
 8006182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f023 0302 	bic.w	r3, r3, #2
 8006194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006254 <TIM_OC1_SetConfig+0x10c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00f      	beq.n	80061c8 <TIM_OC1_SetConfig+0x80>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a2b      	ldr	r2, [pc, #172]	@ (8006258 <TIM_OC1_SetConfig+0x110>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00b      	beq.n	80061c8 <TIM_OC1_SetConfig+0x80>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a2a      	ldr	r2, [pc, #168]	@ (800625c <TIM_OC1_SetConfig+0x114>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d007      	beq.n	80061c8 <TIM_OC1_SetConfig+0x80>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a29      	ldr	r2, [pc, #164]	@ (8006260 <TIM_OC1_SetConfig+0x118>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_OC1_SetConfig+0x80>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a28      	ldr	r2, [pc, #160]	@ (8006264 <TIM_OC1_SetConfig+0x11c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d10c      	bne.n	80061e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f023 0308 	bic.w	r3, r3, #8
 80061ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f023 0304 	bic.w	r3, r3, #4
 80061e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006254 <TIM_OC1_SetConfig+0x10c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00f      	beq.n	800620a <TIM_OC1_SetConfig+0xc2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006258 <TIM_OC1_SetConfig+0x110>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00b      	beq.n	800620a <TIM_OC1_SetConfig+0xc2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a19      	ldr	r2, [pc, #100]	@ (800625c <TIM_OC1_SetConfig+0x114>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <TIM_OC1_SetConfig+0xc2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a18      	ldr	r2, [pc, #96]	@ (8006260 <TIM_OC1_SetConfig+0x118>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_OC1_SetConfig+0xc2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a17      	ldr	r2, [pc, #92]	@ (8006264 <TIM_OC1_SetConfig+0x11c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d111      	bne.n	800622e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	621a      	str	r2, [r3, #32]
}
 8006248:	bf00      	nop
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	40012c00 	.word	0x40012c00
 8006258:	40013400 	.word	0x40013400
 800625c:	40014000 	.word	0x40014000
 8006260:	40014400 	.word	0x40014400
 8006264:	40014800 	.word	0x40014800

08006268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	f023 0210 	bic.w	r2, r3, #16
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800629a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f023 0320 	bic.w	r3, r3, #32
 80062b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a28      	ldr	r2, [pc, #160]	@ (8006368 <TIM_OC2_SetConfig+0x100>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d003      	beq.n	80062d4 <TIM_OC2_SetConfig+0x6c>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a27      	ldr	r2, [pc, #156]	@ (800636c <TIM_OC2_SetConfig+0x104>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d10d      	bne.n	80062f0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006368 <TIM_OC2_SetConfig+0x100>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00f      	beq.n	8006318 <TIM_OC2_SetConfig+0xb0>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a1c      	ldr	r2, [pc, #112]	@ (800636c <TIM_OC2_SetConfig+0x104>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00b      	beq.n	8006318 <TIM_OC2_SetConfig+0xb0>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a1b      	ldr	r2, [pc, #108]	@ (8006370 <TIM_OC2_SetConfig+0x108>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d007      	beq.n	8006318 <TIM_OC2_SetConfig+0xb0>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a1a      	ldr	r2, [pc, #104]	@ (8006374 <TIM_OC2_SetConfig+0x10c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d003      	beq.n	8006318 <TIM_OC2_SetConfig+0xb0>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a19      	ldr	r2, [pc, #100]	@ (8006378 <TIM_OC2_SetConfig+0x110>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d113      	bne.n	8006340 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800631e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40013400 	.word	0x40013400
 8006370:	40014000 	.word	0x40014000
 8006374:	40014400 	.word	0x40014400
 8006378:	40014800 	.word	0x40014800

0800637c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0303 	bic.w	r3, r3, #3
 80063b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a27      	ldr	r2, [pc, #156]	@ (8006478 <TIM_OC3_SetConfig+0xfc>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d003      	beq.n	80063e6 <TIM_OC3_SetConfig+0x6a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a26      	ldr	r2, [pc, #152]	@ (800647c <TIM_OC3_SetConfig+0x100>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d10d      	bne.n	8006402 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a1c      	ldr	r2, [pc, #112]	@ (8006478 <TIM_OC3_SetConfig+0xfc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00f      	beq.n	800642a <TIM_OC3_SetConfig+0xae>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a1b      	ldr	r2, [pc, #108]	@ (800647c <TIM_OC3_SetConfig+0x100>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00b      	beq.n	800642a <TIM_OC3_SetConfig+0xae>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a1a      	ldr	r2, [pc, #104]	@ (8006480 <TIM_OC3_SetConfig+0x104>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d007      	beq.n	800642a <TIM_OC3_SetConfig+0xae>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a19      	ldr	r2, [pc, #100]	@ (8006484 <TIM_OC3_SetConfig+0x108>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d003      	beq.n	800642a <TIM_OC3_SetConfig+0xae>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a18      	ldr	r2, [pc, #96]	@ (8006488 <TIM_OC3_SetConfig+0x10c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d113      	bne.n	8006452 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	621a      	str	r2, [r3, #32]
}
 800646c:	bf00      	nop
 800646e:	371c      	adds	r7, #28
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	40012c00 	.word	0x40012c00
 800647c:	40013400 	.word	0x40013400
 8006480:	40014000 	.word	0x40014000
 8006484:	40014400 	.word	0x40014400
 8006488:	40014800 	.word	0x40014800

0800648c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	031b      	lsls	r3, r3, #12
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a18      	ldr	r2, [pc, #96]	@ (800654c <TIM_OC4_SetConfig+0xc0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00f      	beq.n	8006510 <TIM_OC4_SetConfig+0x84>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a17      	ldr	r2, [pc, #92]	@ (8006550 <TIM_OC4_SetConfig+0xc4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00b      	beq.n	8006510 <TIM_OC4_SetConfig+0x84>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a16      	ldr	r2, [pc, #88]	@ (8006554 <TIM_OC4_SetConfig+0xc8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <TIM_OC4_SetConfig+0x84>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a15      	ldr	r2, [pc, #84]	@ (8006558 <TIM_OC4_SetConfig+0xcc>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_OC4_SetConfig+0x84>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a14      	ldr	r2, [pc, #80]	@ (800655c <TIM_OC4_SetConfig+0xd0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d109      	bne.n	8006524 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006516:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	019b      	lsls	r3, r3, #6
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40013400 	.word	0x40013400
 8006554:	40014000 	.word	0x40014000
 8006558:	40014400 	.word	0x40014400
 800655c:	40014800 	.word	0x40014800

08006560 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800658e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80065a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	041b      	lsls	r3, r3, #16
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a17      	ldr	r2, [pc, #92]	@ (8006614 <TIM_OC5_SetConfig+0xb4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00f      	beq.n	80065da <TIM_OC5_SetConfig+0x7a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a16      	ldr	r2, [pc, #88]	@ (8006618 <TIM_OC5_SetConfig+0xb8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00b      	beq.n	80065da <TIM_OC5_SetConfig+0x7a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a15      	ldr	r2, [pc, #84]	@ (800661c <TIM_OC5_SetConfig+0xbc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d007      	beq.n	80065da <TIM_OC5_SetConfig+0x7a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a14      	ldr	r2, [pc, #80]	@ (8006620 <TIM_OC5_SetConfig+0xc0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_OC5_SetConfig+0x7a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a13      	ldr	r2, [pc, #76]	@ (8006624 <TIM_OC5_SetConfig+0xc4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d109      	bne.n	80065ee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	621a      	str	r2, [r3, #32]
}
 8006608:	bf00      	nop
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	40012c00 	.word	0x40012c00
 8006618:	40013400 	.word	0x40013400
 800661c:	40014000 	.word	0x40014000
 8006620:	40014400 	.word	0x40014400
 8006624:	40014800 	.word	0x40014800

08006628 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800665a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800666e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	051b      	lsls	r3, r3, #20
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a18      	ldr	r2, [pc, #96]	@ (80066e0 <TIM_OC6_SetConfig+0xb8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00f      	beq.n	80066a4 <TIM_OC6_SetConfig+0x7c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a17      	ldr	r2, [pc, #92]	@ (80066e4 <TIM_OC6_SetConfig+0xbc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00b      	beq.n	80066a4 <TIM_OC6_SetConfig+0x7c>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a16      	ldr	r2, [pc, #88]	@ (80066e8 <TIM_OC6_SetConfig+0xc0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d007      	beq.n	80066a4 <TIM_OC6_SetConfig+0x7c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a15      	ldr	r2, [pc, #84]	@ (80066ec <TIM_OC6_SetConfig+0xc4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_OC6_SetConfig+0x7c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a14      	ldr	r2, [pc, #80]	@ (80066f0 <TIM_OC6_SetConfig+0xc8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d109      	bne.n	80066b8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	029b      	lsls	r3, r3, #10
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40012c00 	.word	0x40012c00
 80066e4:	40013400 	.word	0x40013400
 80066e8:	40014000 	.word	0x40014000
 80066ec:	40014400 	.word	0x40014400
 80066f0:	40014800 	.word	0x40014800

080066f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f023 0201 	bic.w	r2, r3, #1
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800671e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f023 030a 	bic.w	r3, r3, #10
 8006730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006752:	b480      	push	{r7}
 8006754:	b087      	sub	sp, #28
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	f023 0210 	bic.w	r2, r3, #16
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800677c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	031b      	lsls	r3, r3, #12
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	4313      	orrs	r3, r2
 8006786:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800678e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	621a      	str	r2, [r3, #32]
}
 80067a6:	bf00      	nop
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f043 0307 	orr.w	r3, r3, #7
 80067d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	609a      	str	r2, [r3, #8]
}
 80067dc:	bf00      	nop
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	021a      	lsls	r2, r3, #8
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	431a      	orrs	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4313      	orrs	r3, r2
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	4313      	orrs	r3, r2
 8006814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	609a      	str	r2, [r3, #8]
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f003 031f 	and.w	r3, r3, #31
 800683a:	2201      	movs	r2, #1
 800683c:	fa02 f303 	lsl.w	r3, r2, r3
 8006840:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a1a      	ldr	r2, [r3, #32]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	43db      	mvns	r3, r3
 800684a:	401a      	ands	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a1a      	ldr	r2, [r3, #32]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f003 031f 	and.w	r3, r3, #31
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	fa01 f303 	lsl.w	r3, r1, r3
 8006860:	431a      	orrs	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	621a      	str	r2, [r3, #32]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
	...

08006874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006888:	2302      	movs	r3, #2
 800688a:	e068      	b.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a2e      	ldr	r2, [pc, #184]	@ (800696c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a2d      	ldr	r2, [pc, #180]	@ (8006970 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d108      	bne.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80068c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1e      	ldr	r2, [pc, #120]	@ (800696c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d01d      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068fe:	d018      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1b      	ldr	r2, [pc, #108]	@ (8006974 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d013      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1a      	ldr	r2, [pc, #104]	@ (8006978 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00e      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a18      	ldr	r2, [pc, #96]	@ (800697c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d009      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a13      	ldr	r2, [pc, #76]	@ (8006970 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a14      	ldr	r2, [pc, #80]	@ (8006980 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d10c      	bne.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	4313      	orrs	r3, r2
 8006942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40012c00 	.word	0x40012c00
 8006970:	40013400 	.word	0x40013400
 8006974:	40000400 	.word	0x40000400
 8006978:	40000800 	.word	0x40000800
 800697c:	40000c00 	.word	0x40000c00
 8006980:	40014000 	.word	0x40014000

08006984 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e040      	b.n	8006a54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d106      	bne.n	80069e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fa fe9a 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2224      	movs	r2, #36	@ 0x24
 80069ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0201 	bic.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fb6a 	bl	80070e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f8af 	bl	8006b70 <UART_SetConfig>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e01b      	b.n	8006a54 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fbe9 	bl	8007224 <UART_CheckIdleState>
 8006a52:	4603      	mov	r3, r0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08a      	sub	sp, #40	@ 0x28
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	603b      	str	r3, [r7, #0]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	d177      	bne.n	8006b64 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_UART_Transmit+0x24>
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e070      	b.n	8006b66 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2221      	movs	r2, #33	@ 0x21
 8006a90:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a92:	f7fb f855 	bl	8001b40 <HAL_GetTick>
 8006a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	88fa      	ldrh	r2, [r7, #6]
 8006a9c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	88fa      	ldrh	r2, [r7, #6]
 8006aa4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ab0:	d108      	bne.n	8006ac4 <HAL_UART_Transmit+0x68>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d104      	bne.n	8006ac4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	61bb      	str	r3, [r7, #24]
 8006ac2:	e003      	b.n	8006acc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006acc:	e02f      	b.n	8006b2e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2180      	movs	r1, #128	@ 0x80
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fc4b 	bl	8007374 <UART_WaitOnFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d004      	beq.n	8006aee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e03b      	b.n	8006b66 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10b      	bne.n	8006b0c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	881a      	ldrh	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b00:	b292      	uxth	r2, r2
 8006b02:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	3302      	adds	r3, #2
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	e007      	b.n	8006b1c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	781a      	ldrb	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1c9      	bne.n	8006ace <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2200      	movs	r2, #0
 8006b42:	2140      	movs	r1, #64	@ 0x40
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 fc15 	bl	8007374 <UART_WaitOnFlagUntilTimeout>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d004      	beq.n	8006b5a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2220      	movs	r2, #32
 8006b54:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e005      	b.n	8006b66 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	e000      	b.n	8006b66 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006b64:	2302      	movs	r3, #2
  }
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3720      	adds	r7, #32
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b74:	b08a      	sub	sp, #40	@ 0x28
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	4ba4      	ldr	r3, [pc, #656]	@ (8006e30 <UART_SetConfig+0x2c0>)
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	6812      	ldr	r2, [r2, #0]
 8006ba6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a99      	ldr	r2, [pc, #612]	@ (8006e34 <UART_SetConfig+0x2c4>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d004      	beq.n	8006bdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bec:	430a      	orrs	r2, r1
 8006bee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a90      	ldr	r2, [pc, #576]	@ (8006e38 <UART_SetConfig+0x2c8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d126      	bne.n	8006c48 <UART_SetConfig+0xd8>
 8006bfa:	4b90      	ldr	r3, [pc, #576]	@ (8006e3c <UART_SetConfig+0x2cc>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c00:	f003 0303 	and.w	r3, r3, #3
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d81b      	bhi.n	8006c40 <UART_SetConfig+0xd0>
 8006c08:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <UART_SetConfig+0xa0>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c21 	.word	0x08006c21
 8006c14:	08006c31 	.word	0x08006c31
 8006c18:	08006c29 	.word	0x08006c29
 8006c1c:	08006c39 	.word	0x08006c39
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c26:	e116      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c2e:	e112      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006c30:	2304      	movs	r3, #4
 8006c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c36:	e10e      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006c38:	2308      	movs	r3, #8
 8006c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c3e:	e10a      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006c40:	2310      	movs	r3, #16
 8006c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c46:	e106      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a7c      	ldr	r2, [pc, #496]	@ (8006e40 <UART_SetConfig+0x2d0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d138      	bne.n	8006cc4 <UART_SetConfig+0x154>
 8006c52:	4b7a      	ldr	r3, [pc, #488]	@ (8006e3c <UART_SetConfig+0x2cc>)
 8006c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c58:	f003 030c 	and.w	r3, r3, #12
 8006c5c:	2b0c      	cmp	r3, #12
 8006c5e:	d82d      	bhi.n	8006cbc <UART_SetConfig+0x14c>
 8006c60:	a201      	add	r2, pc, #4	@ (adr r2, 8006c68 <UART_SetConfig+0xf8>)
 8006c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c66:	bf00      	nop
 8006c68:	08006c9d 	.word	0x08006c9d
 8006c6c:	08006cbd 	.word	0x08006cbd
 8006c70:	08006cbd 	.word	0x08006cbd
 8006c74:	08006cbd 	.word	0x08006cbd
 8006c78:	08006cad 	.word	0x08006cad
 8006c7c:	08006cbd 	.word	0x08006cbd
 8006c80:	08006cbd 	.word	0x08006cbd
 8006c84:	08006cbd 	.word	0x08006cbd
 8006c88:	08006ca5 	.word	0x08006ca5
 8006c8c:	08006cbd 	.word	0x08006cbd
 8006c90:	08006cbd 	.word	0x08006cbd
 8006c94:	08006cbd 	.word	0x08006cbd
 8006c98:	08006cb5 	.word	0x08006cb5
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ca2:	e0d8      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006caa:	e0d4      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006cac:	2304      	movs	r3, #4
 8006cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cb2:	e0d0      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006cb4:	2308      	movs	r3, #8
 8006cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cba:	e0cc      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006cbc:	2310      	movs	r3, #16
 8006cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cc2:	e0c8      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a5e      	ldr	r2, [pc, #376]	@ (8006e44 <UART_SetConfig+0x2d4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d125      	bne.n	8006d1a <UART_SetConfig+0x1aa>
 8006cce:	4b5b      	ldr	r3, [pc, #364]	@ (8006e3c <UART_SetConfig+0x2cc>)
 8006cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006cd8:	2b30      	cmp	r3, #48	@ 0x30
 8006cda:	d016      	beq.n	8006d0a <UART_SetConfig+0x19a>
 8006cdc:	2b30      	cmp	r3, #48	@ 0x30
 8006cde:	d818      	bhi.n	8006d12 <UART_SetConfig+0x1a2>
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	d00a      	beq.n	8006cfa <UART_SetConfig+0x18a>
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d814      	bhi.n	8006d12 <UART_SetConfig+0x1a2>
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <UART_SetConfig+0x182>
 8006cec:	2b10      	cmp	r3, #16
 8006cee:	d008      	beq.n	8006d02 <UART_SetConfig+0x192>
 8006cf0:	e00f      	b.n	8006d12 <UART_SetConfig+0x1a2>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cf8:	e0ad      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d00:	e0a9      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006d02:	2304      	movs	r3, #4
 8006d04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d08:	e0a5      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006d0a:	2308      	movs	r3, #8
 8006d0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d10:	e0a1      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006d12:	2310      	movs	r3, #16
 8006d14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d18:	e09d      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8006e48 <UART_SetConfig+0x2d8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d125      	bne.n	8006d70 <UART_SetConfig+0x200>
 8006d24:	4b45      	ldr	r3, [pc, #276]	@ (8006e3c <UART_SetConfig+0x2cc>)
 8006d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d30:	d016      	beq.n	8006d60 <UART_SetConfig+0x1f0>
 8006d32:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d34:	d818      	bhi.n	8006d68 <UART_SetConfig+0x1f8>
 8006d36:	2b80      	cmp	r3, #128	@ 0x80
 8006d38:	d00a      	beq.n	8006d50 <UART_SetConfig+0x1e0>
 8006d3a:	2b80      	cmp	r3, #128	@ 0x80
 8006d3c:	d814      	bhi.n	8006d68 <UART_SetConfig+0x1f8>
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <UART_SetConfig+0x1d8>
 8006d42:	2b40      	cmp	r3, #64	@ 0x40
 8006d44:	d008      	beq.n	8006d58 <UART_SetConfig+0x1e8>
 8006d46:	e00f      	b.n	8006d68 <UART_SetConfig+0x1f8>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d4e:	e082      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006d50:	2302      	movs	r3, #2
 8006d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d56:	e07e      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d5e:	e07a      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006d60:	2308      	movs	r3, #8
 8006d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d66:	e076      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d6e:	e072      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a35      	ldr	r2, [pc, #212]	@ (8006e4c <UART_SetConfig+0x2dc>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d12a      	bne.n	8006dd0 <UART_SetConfig+0x260>
 8006d7a:	4b30      	ldr	r3, [pc, #192]	@ (8006e3c <UART_SetConfig+0x2cc>)
 8006d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d88:	d01a      	beq.n	8006dc0 <UART_SetConfig+0x250>
 8006d8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d8e:	d81b      	bhi.n	8006dc8 <UART_SetConfig+0x258>
 8006d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d94:	d00c      	beq.n	8006db0 <UART_SetConfig+0x240>
 8006d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d9a:	d815      	bhi.n	8006dc8 <UART_SetConfig+0x258>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <UART_SetConfig+0x238>
 8006da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006da4:	d008      	beq.n	8006db8 <UART_SetConfig+0x248>
 8006da6:	e00f      	b.n	8006dc8 <UART_SetConfig+0x258>
 8006da8:	2300      	movs	r3, #0
 8006daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dae:	e052      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006db0:	2302      	movs	r3, #2
 8006db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006db6:	e04e      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006db8:	2304      	movs	r3, #4
 8006dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dbe:	e04a      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dc6:	e046      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dce:	e042      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a17      	ldr	r2, [pc, #92]	@ (8006e34 <UART_SetConfig+0x2c4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d13a      	bne.n	8006e50 <UART_SetConfig+0x2e0>
 8006dda:	4b18      	ldr	r3, [pc, #96]	@ (8006e3c <UART_SetConfig+0x2cc>)
 8006ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006de4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006de8:	d01a      	beq.n	8006e20 <UART_SetConfig+0x2b0>
 8006dea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dee:	d81b      	bhi.n	8006e28 <UART_SetConfig+0x2b8>
 8006df0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df4:	d00c      	beq.n	8006e10 <UART_SetConfig+0x2a0>
 8006df6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dfa:	d815      	bhi.n	8006e28 <UART_SetConfig+0x2b8>
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <UART_SetConfig+0x298>
 8006e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e04:	d008      	beq.n	8006e18 <UART_SetConfig+0x2a8>
 8006e06:	e00f      	b.n	8006e28 <UART_SetConfig+0x2b8>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e0e:	e022      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006e10:	2302      	movs	r3, #2
 8006e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e16:	e01e      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006e18:	2304      	movs	r3, #4
 8006e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e1e:	e01a      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006e20:	2308      	movs	r3, #8
 8006e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e26:	e016      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006e28:	2310      	movs	r3, #16
 8006e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e2e:	e012      	b.n	8006e56 <UART_SetConfig+0x2e6>
 8006e30:	efff69f3 	.word	0xefff69f3
 8006e34:	40008000 	.word	0x40008000
 8006e38:	40013800 	.word	0x40013800
 8006e3c:	40021000 	.word	0x40021000
 8006e40:	40004400 	.word	0x40004400
 8006e44:	40004800 	.word	0x40004800
 8006e48:	40004c00 	.word	0x40004c00
 8006e4c:	40005000 	.word	0x40005000
 8006e50:	2310      	movs	r3, #16
 8006e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a9f      	ldr	r2, [pc, #636]	@ (80070d8 <UART_SetConfig+0x568>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d17a      	bne.n	8006f56 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d824      	bhi.n	8006eb2 <UART_SetConfig+0x342>
 8006e68:	a201      	add	r2, pc, #4	@ (adr r2, 8006e70 <UART_SetConfig+0x300>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006e95 	.word	0x08006e95
 8006e74:	08006eb3 	.word	0x08006eb3
 8006e78:	08006e9d 	.word	0x08006e9d
 8006e7c:	08006eb3 	.word	0x08006eb3
 8006e80:	08006ea3 	.word	0x08006ea3
 8006e84:	08006eb3 	.word	0x08006eb3
 8006e88:	08006eb3 	.word	0x08006eb3
 8006e8c:	08006eb3 	.word	0x08006eb3
 8006e90:	08006eab 	.word	0x08006eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e94:	f7fd fc6e 	bl	8004774 <HAL_RCC_GetPCLK1Freq>
 8006e98:	61f8      	str	r0, [r7, #28]
        break;
 8006e9a:	e010      	b.n	8006ebe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e9c:	4b8f      	ldr	r3, [pc, #572]	@ (80070dc <UART_SetConfig+0x56c>)
 8006e9e:	61fb      	str	r3, [r7, #28]
        break;
 8006ea0:	e00d      	b.n	8006ebe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ea2:	f7fd fbcf 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 8006ea6:	61f8      	str	r0, [r7, #28]
        break;
 8006ea8:	e009      	b.n	8006ebe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eae:	61fb      	str	r3, [r7, #28]
        break;
 8006eb0:	e005      	b.n	8006ebe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ebc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 80fb 	beq.w	80070bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	4413      	add	r3, r2
 8006ed0:	69fa      	ldr	r2, [r7, #28]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d305      	bcc.n	8006ee2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006edc:	69fa      	ldr	r2, [r7, #28]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d903      	bls.n	8006eea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006ee8:	e0e8      	b.n	80070bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	2200      	movs	r2, #0
 8006eee:	461c      	mov	r4, r3
 8006ef0:	4615      	mov	r5, r2
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	022b      	lsls	r3, r5, #8
 8006efc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f00:	0222      	lsls	r2, r4, #8
 8006f02:	68f9      	ldr	r1, [r7, #12]
 8006f04:	6849      	ldr	r1, [r1, #4]
 8006f06:	0849      	lsrs	r1, r1, #1
 8006f08:	2000      	movs	r0, #0
 8006f0a:	4688      	mov	r8, r1
 8006f0c:	4681      	mov	r9, r0
 8006f0e:	eb12 0a08 	adds.w	sl, r2, r8
 8006f12:	eb43 0b09 	adc.w	fp, r3, r9
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	603b      	str	r3, [r7, #0]
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f24:	4650      	mov	r0, sl
 8006f26:	4659      	mov	r1, fp
 8006f28:	f7f9 fe3e 	bl	8000ba8 <__aeabi_uldivmod>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4613      	mov	r3, r2
 8006f32:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f3a:	d308      	bcc.n	8006f4e <UART_SetConfig+0x3de>
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f42:	d204      	bcs.n	8006f4e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	60da      	str	r2, [r3, #12]
 8006f4c:	e0b6      	b.n	80070bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f54:	e0b2      	b.n	80070bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f5e:	d15e      	bne.n	800701e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006f60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d828      	bhi.n	8006fba <UART_SetConfig+0x44a>
 8006f68:	a201      	add	r2, pc, #4	@ (adr r2, 8006f70 <UART_SetConfig+0x400>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08006f95 	.word	0x08006f95
 8006f74:	08006f9d 	.word	0x08006f9d
 8006f78:	08006fa5 	.word	0x08006fa5
 8006f7c:	08006fbb 	.word	0x08006fbb
 8006f80:	08006fab 	.word	0x08006fab
 8006f84:	08006fbb 	.word	0x08006fbb
 8006f88:	08006fbb 	.word	0x08006fbb
 8006f8c:	08006fbb 	.word	0x08006fbb
 8006f90:	08006fb3 	.word	0x08006fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f94:	f7fd fbee 	bl	8004774 <HAL_RCC_GetPCLK1Freq>
 8006f98:	61f8      	str	r0, [r7, #28]
        break;
 8006f9a:	e014      	b.n	8006fc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f9c:	f7fd fc00 	bl	80047a0 <HAL_RCC_GetPCLK2Freq>
 8006fa0:	61f8      	str	r0, [r7, #28]
        break;
 8006fa2:	e010      	b.n	8006fc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80070dc <UART_SetConfig+0x56c>)
 8006fa6:	61fb      	str	r3, [r7, #28]
        break;
 8006fa8:	e00d      	b.n	8006fc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006faa:	f7fd fb4b 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 8006fae:	61f8      	str	r0, [r7, #28]
        break;
 8006fb0:	e009      	b.n	8006fc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fb6:	61fb      	str	r3, [r7, #28]
        break;
 8006fb8:	e005      	b.n	8006fc6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006fc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d077      	beq.n	80070bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	005a      	lsls	r2, r3, #1
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	085b      	lsrs	r3, r3, #1
 8006fd6:	441a      	add	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	2b0f      	cmp	r3, #15
 8006fe6:	d916      	bls.n	8007016 <UART_SetConfig+0x4a6>
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fee:	d212      	bcs.n	8007016 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f023 030f 	bic.w	r3, r3, #15
 8006ff8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	085b      	lsrs	r3, r3, #1
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	b29a      	uxth	r2, r3
 8007006:	8afb      	ldrh	r3, [r7, #22]
 8007008:	4313      	orrs	r3, r2
 800700a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	8afa      	ldrh	r2, [r7, #22]
 8007012:	60da      	str	r2, [r3, #12]
 8007014:	e052      	b.n	80070bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800701c:	e04e      	b.n	80070bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800701e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007022:	2b08      	cmp	r3, #8
 8007024:	d827      	bhi.n	8007076 <UART_SetConfig+0x506>
 8007026:	a201      	add	r2, pc, #4	@ (adr r2, 800702c <UART_SetConfig+0x4bc>)
 8007028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702c:	08007051 	.word	0x08007051
 8007030:	08007059 	.word	0x08007059
 8007034:	08007061 	.word	0x08007061
 8007038:	08007077 	.word	0x08007077
 800703c:	08007067 	.word	0x08007067
 8007040:	08007077 	.word	0x08007077
 8007044:	08007077 	.word	0x08007077
 8007048:	08007077 	.word	0x08007077
 800704c:	0800706f 	.word	0x0800706f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007050:	f7fd fb90 	bl	8004774 <HAL_RCC_GetPCLK1Freq>
 8007054:	61f8      	str	r0, [r7, #28]
        break;
 8007056:	e014      	b.n	8007082 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007058:	f7fd fba2 	bl	80047a0 <HAL_RCC_GetPCLK2Freq>
 800705c:	61f8      	str	r0, [r7, #28]
        break;
 800705e:	e010      	b.n	8007082 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007060:	4b1e      	ldr	r3, [pc, #120]	@ (80070dc <UART_SetConfig+0x56c>)
 8007062:	61fb      	str	r3, [r7, #28]
        break;
 8007064:	e00d      	b.n	8007082 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007066:	f7fd faed 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 800706a:	61f8      	str	r0, [r7, #28]
        break;
 800706c:	e009      	b.n	8007082 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800706e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007072:	61fb      	str	r3, [r7, #28]
        break;
 8007074:	e005      	b.n	8007082 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007080:	bf00      	nop
    }

    if (pclk != 0U)
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d019      	beq.n	80070bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	085a      	lsrs	r2, r3, #1
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	441a      	add	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	fbb2 f3f3 	udiv	r3, r2, r3
 800709a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	2b0f      	cmp	r3, #15
 80070a0:	d909      	bls.n	80070b6 <UART_SetConfig+0x546>
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a8:	d205      	bcs.n	80070b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60da      	str	r2, [r3, #12]
 80070b4:	e002      	b.n	80070bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80070c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3728      	adds	r7, #40	@ 0x28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070d6:	bf00      	nop
 80070d8:	40008000 	.word	0x40008000
 80070dc:	00f42400 	.word	0x00f42400

080070e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007152:	f003 0304 	and.w	r3, r3, #4
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	f003 0310 	and.w	r3, r3, #16
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007196:	f003 0320 	and.w	r3, r3, #32
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d01a      	beq.n	80071f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071de:	d10a      	bne.n	80071f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00a      	beq.n	8007218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	605a      	str	r2, [r3, #4]
  }
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b098      	sub	sp, #96	@ 0x60
 8007228:	af02      	add	r7, sp, #8
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007234:	f7fa fc84 	bl	8001b40 <HAL_GetTick>
 8007238:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0308 	and.w	r3, r3, #8
 8007244:	2b08      	cmp	r3, #8
 8007246:	d12e      	bne.n	80072a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007248:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007250:	2200      	movs	r2, #0
 8007252:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f88c 	bl	8007374 <UART_WaitOnFlagUntilTimeout>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d021      	beq.n	80072a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726a:	e853 3f00 	ldrex	r3, [r3]
 800726e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007276:	653b      	str	r3, [r7, #80]	@ 0x50
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007280:	647b      	str	r3, [r7, #68]	@ 0x44
 8007282:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007286:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007288:	e841 2300 	strex	r3, r2, [r1]
 800728c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800728e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e6      	bne.n	8007262 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2220      	movs	r2, #32
 8007298:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e062      	b.n	800736c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d149      	bne.n	8007348 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072bc:	2200      	movs	r2, #0
 80072be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f856 	bl	8007374 <UART_WaitOnFlagUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d03c      	beq.n	8007348 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	623b      	str	r3, [r7, #32]
   return(result);
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80072ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e6      	bne.n	80072ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3308      	adds	r3, #8
 8007306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f023 0301 	bic.w	r3, r3, #1
 8007316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3308      	adds	r3, #8
 800731e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007320:	61fa      	str	r2, [r7, #28]
 8007322:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	69b9      	ldr	r1, [r7, #24]
 8007326:	69fa      	ldr	r2, [r7, #28]
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	617b      	str	r3, [r7, #20]
   return(result);
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e5      	bne.n	8007300 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2220      	movs	r2, #32
 8007338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e011      	b.n	800736c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2220      	movs	r2, #32
 8007352:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3758      	adds	r7, #88	@ 0x58
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	4613      	mov	r3, r2
 8007382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007384:	e04f      	b.n	8007426 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738c:	d04b      	beq.n	8007426 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800738e:	f7fa fbd7 	bl	8001b40 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	429a      	cmp	r2, r3
 800739c:	d302      	bcc.n	80073a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e04e      	b.n	8007446 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d037      	beq.n	8007426 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2b80      	cmp	r3, #128	@ 0x80
 80073ba:	d034      	beq.n	8007426 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2b40      	cmp	r3, #64	@ 0x40
 80073c0:	d031      	beq.n	8007426 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	f003 0308 	and.w	r3, r3, #8
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	d110      	bne.n	80073f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2208      	movs	r2, #8
 80073d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 f838 	bl	800744e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2208      	movs	r2, #8
 80073e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e029      	b.n	8007446 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007400:	d111      	bne.n	8007426 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800740a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 f81e 	bl	800744e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2220      	movs	r2, #32
 8007416:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e00f      	b.n	8007446 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69da      	ldr	r2, [r3, #28]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4013      	ands	r3, r2
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	429a      	cmp	r2, r3
 8007434:	bf0c      	ite	eq
 8007436:	2301      	moveq	r3, #1
 8007438:	2300      	movne	r3, #0
 800743a:	b2db      	uxtb	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	429a      	cmp	r2, r3
 8007442:	d0a0      	beq.n	8007386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800744e:	b480      	push	{r7}
 8007450:	b095      	sub	sp, #84	@ 0x54
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800746a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007474:	643b      	str	r3, [r7, #64]	@ 0x40
 8007476:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800747a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e6      	bne.n	8007456 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3308      	adds	r3, #8
 800748e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	61fb      	str	r3, [r7, #28]
   return(result);
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3308      	adds	r3, #8
 80074a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e5      	bne.n	8007488 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d118      	bne.n	80074f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f023 0310 	bic.w	r3, r3, #16
 80074d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6979      	ldr	r1, [r7, #20]
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	613b      	str	r3, [r7, #16]
   return(result);
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e6      	bne.n	80074c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800750a:	bf00      	nop
 800750c:	3754      	adds	r7, #84	@ 0x54
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <__cvt>:
 8007516:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800751a:	ec57 6b10 	vmov	r6, r7, d0
 800751e:	2f00      	cmp	r7, #0
 8007520:	460c      	mov	r4, r1
 8007522:	4619      	mov	r1, r3
 8007524:	463b      	mov	r3, r7
 8007526:	bfbb      	ittet	lt
 8007528:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800752c:	461f      	movlt	r7, r3
 800752e:	2300      	movge	r3, #0
 8007530:	232d      	movlt	r3, #45	@ 0x2d
 8007532:	700b      	strb	r3, [r1, #0]
 8007534:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007536:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800753a:	4691      	mov	r9, r2
 800753c:	f023 0820 	bic.w	r8, r3, #32
 8007540:	bfbc      	itt	lt
 8007542:	4632      	movlt	r2, r6
 8007544:	4616      	movlt	r6, r2
 8007546:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800754a:	d005      	beq.n	8007558 <__cvt+0x42>
 800754c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007550:	d100      	bne.n	8007554 <__cvt+0x3e>
 8007552:	3401      	adds	r4, #1
 8007554:	2102      	movs	r1, #2
 8007556:	e000      	b.n	800755a <__cvt+0x44>
 8007558:	2103      	movs	r1, #3
 800755a:	ab03      	add	r3, sp, #12
 800755c:	9301      	str	r3, [sp, #4]
 800755e:	ab02      	add	r3, sp, #8
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	ec47 6b10 	vmov	d0, r6, r7
 8007566:	4653      	mov	r3, sl
 8007568:	4622      	mov	r2, r4
 800756a:	f000 fe59 	bl	8008220 <_dtoa_r>
 800756e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007572:	4605      	mov	r5, r0
 8007574:	d119      	bne.n	80075aa <__cvt+0x94>
 8007576:	f019 0f01 	tst.w	r9, #1
 800757a:	d00e      	beq.n	800759a <__cvt+0x84>
 800757c:	eb00 0904 	add.w	r9, r0, r4
 8007580:	2200      	movs	r2, #0
 8007582:	2300      	movs	r3, #0
 8007584:	4630      	mov	r0, r6
 8007586:	4639      	mov	r1, r7
 8007588:	f7f9 fa9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800758c:	b108      	cbz	r0, 8007592 <__cvt+0x7c>
 800758e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007592:	2230      	movs	r2, #48	@ 0x30
 8007594:	9b03      	ldr	r3, [sp, #12]
 8007596:	454b      	cmp	r3, r9
 8007598:	d31e      	bcc.n	80075d8 <__cvt+0xc2>
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800759e:	1b5b      	subs	r3, r3, r5
 80075a0:	4628      	mov	r0, r5
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	b004      	add	sp, #16
 80075a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075aa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075ae:	eb00 0904 	add.w	r9, r0, r4
 80075b2:	d1e5      	bne.n	8007580 <__cvt+0x6a>
 80075b4:	7803      	ldrb	r3, [r0, #0]
 80075b6:	2b30      	cmp	r3, #48	@ 0x30
 80075b8:	d10a      	bne.n	80075d0 <__cvt+0xba>
 80075ba:	2200      	movs	r2, #0
 80075bc:	2300      	movs	r3, #0
 80075be:	4630      	mov	r0, r6
 80075c0:	4639      	mov	r1, r7
 80075c2:	f7f9 fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80075c6:	b918      	cbnz	r0, 80075d0 <__cvt+0xba>
 80075c8:	f1c4 0401 	rsb	r4, r4, #1
 80075cc:	f8ca 4000 	str.w	r4, [sl]
 80075d0:	f8da 3000 	ldr.w	r3, [sl]
 80075d4:	4499      	add	r9, r3
 80075d6:	e7d3      	b.n	8007580 <__cvt+0x6a>
 80075d8:	1c59      	adds	r1, r3, #1
 80075da:	9103      	str	r1, [sp, #12]
 80075dc:	701a      	strb	r2, [r3, #0]
 80075de:	e7d9      	b.n	8007594 <__cvt+0x7e>

080075e0 <__exponent>:
 80075e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075e2:	2900      	cmp	r1, #0
 80075e4:	bfba      	itte	lt
 80075e6:	4249      	neglt	r1, r1
 80075e8:	232d      	movlt	r3, #45	@ 0x2d
 80075ea:	232b      	movge	r3, #43	@ 0x2b
 80075ec:	2909      	cmp	r1, #9
 80075ee:	7002      	strb	r2, [r0, #0]
 80075f0:	7043      	strb	r3, [r0, #1]
 80075f2:	dd29      	ble.n	8007648 <__exponent+0x68>
 80075f4:	f10d 0307 	add.w	r3, sp, #7
 80075f8:	461d      	mov	r5, r3
 80075fa:	270a      	movs	r7, #10
 80075fc:	461a      	mov	r2, r3
 80075fe:	fbb1 f6f7 	udiv	r6, r1, r7
 8007602:	fb07 1416 	mls	r4, r7, r6, r1
 8007606:	3430      	adds	r4, #48	@ 0x30
 8007608:	f802 4c01 	strb.w	r4, [r2, #-1]
 800760c:	460c      	mov	r4, r1
 800760e:	2c63      	cmp	r4, #99	@ 0x63
 8007610:	f103 33ff 	add.w	r3, r3, #4294967295
 8007614:	4631      	mov	r1, r6
 8007616:	dcf1      	bgt.n	80075fc <__exponent+0x1c>
 8007618:	3130      	adds	r1, #48	@ 0x30
 800761a:	1e94      	subs	r4, r2, #2
 800761c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007620:	1c41      	adds	r1, r0, #1
 8007622:	4623      	mov	r3, r4
 8007624:	42ab      	cmp	r3, r5
 8007626:	d30a      	bcc.n	800763e <__exponent+0x5e>
 8007628:	f10d 0309 	add.w	r3, sp, #9
 800762c:	1a9b      	subs	r3, r3, r2
 800762e:	42ac      	cmp	r4, r5
 8007630:	bf88      	it	hi
 8007632:	2300      	movhi	r3, #0
 8007634:	3302      	adds	r3, #2
 8007636:	4403      	add	r3, r0
 8007638:	1a18      	subs	r0, r3, r0
 800763a:	b003      	add	sp, #12
 800763c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800763e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007642:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007646:	e7ed      	b.n	8007624 <__exponent+0x44>
 8007648:	2330      	movs	r3, #48	@ 0x30
 800764a:	3130      	adds	r1, #48	@ 0x30
 800764c:	7083      	strb	r3, [r0, #2]
 800764e:	70c1      	strb	r1, [r0, #3]
 8007650:	1d03      	adds	r3, r0, #4
 8007652:	e7f1      	b.n	8007638 <__exponent+0x58>

08007654 <_printf_float>:
 8007654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007658:	b08d      	sub	sp, #52	@ 0x34
 800765a:	460c      	mov	r4, r1
 800765c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007660:	4616      	mov	r6, r2
 8007662:	461f      	mov	r7, r3
 8007664:	4605      	mov	r5, r0
 8007666:	f000 fcdb 	bl	8008020 <_localeconv_r>
 800766a:	6803      	ldr	r3, [r0, #0]
 800766c:	9304      	str	r3, [sp, #16]
 800766e:	4618      	mov	r0, r3
 8007670:	f7f8 fdfe 	bl	8000270 <strlen>
 8007674:	2300      	movs	r3, #0
 8007676:	930a      	str	r3, [sp, #40]	@ 0x28
 8007678:	f8d8 3000 	ldr.w	r3, [r8]
 800767c:	9005      	str	r0, [sp, #20]
 800767e:	3307      	adds	r3, #7
 8007680:	f023 0307 	bic.w	r3, r3, #7
 8007684:	f103 0208 	add.w	r2, r3, #8
 8007688:	f894 a018 	ldrb.w	sl, [r4, #24]
 800768c:	f8d4 b000 	ldr.w	fp, [r4]
 8007690:	f8c8 2000 	str.w	r2, [r8]
 8007694:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007698:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800769c:	9307      	str	r3, [sp, #28]
 800769e:	f8cd 8018 	str.w	r8, [sp, #24]
 80076a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80076a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076aa:	4b9c      	ldr	r3, [pc, #624]	@ (800791c <_printf_float+0x2c8>)
 80076ac:	f04f 32ff 	mov.w	r2, #4294967295
 80076b0:	f7f9 fa3c 	bl	8000b2c <__aeabi_dcmpun>
 80076b4:	bb70      	cbnz	r0, 8007714 <_printf_float+0xc0>
 80076b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076ba:	4b98      	ldr	r3, [pc, #608]	@ (800791c <_printf_float+0x2c8>)
 80076bc:	f04f 32ff 	mov.w	r2, #4294967295
 80076c0:	f7f9 fa16 	bl	8000af0 <__aeabi_dcmple>
 80076c4:	bb30      	cbnz	r0, 8007714 <_printf_float+0xc0>
 80076c6:	2200      	movs	r2, #0
 80076c8:	2300      	movs	r3, #0
 80076ca:	4640      	mov	r0, r8
 80076cc:	4649      	mov	r1, r9
 80076ce:	f7f9 fa05 	bl	8000adc <__aeabi_dcmplt>
 80076d2:	b110      	cbz	r0, 80076da <_printf_float+0x86>
 80076d4:	232d      	movs	r3, #45	@ 0x2d
 80076d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076da:	4a91      	ldr	r2, [pc, #580]	@ (8007920 <_printf_float+0x2cc>)
 80076dc:	4b91      	ldr	r3, [pc, #580]	@ (8007924 <_printf_float+0x2d0>)
 80076de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80076e2:	bf8c      	ite	hi
 80076e4:	4690      	movhi	r8, r2
 80076e6:	4698      	movls	r8, r3
 80076e8:	2303      	movs	r3, #3
 80076ea:	6123      	str	r3, [r4, #16]
 80076ec:	f02b 0304 	bic.w	r3, fp, #4
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	f04f 0900 	mov.w	r9, #0
 80076f6:	9700      	str	r7, [sp, #0]
 80076f8:	4633      	mov	r3, r6
 80076fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80076fc:	4621      	mov	r1, r4
 80076fe:	4628      	mov	r0, r5
 8007700:	f000 f9d2 	bl	8007aa8 <_printf_common>
 8007704:	3001      	adds	r0, #1
 8007706:	f040 808d 	bne.w	8007824 <_printf_float+0x1d0>
 800770a:	f04f 30ff 	mov.w	r0, #4294967295
 800770e:	b00d      	add	sp, #52	@ 0x34
 8007710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007714:	4642      	mov	r2, r8
 8007716:	464b      	mov	r3, r9
 8007718:	4640      	mov	r0, r8
 800771a:	4649      	mov	r1, r9
 800771c:	f7f9 fa06 	bl	8000b2c <__aeabi_dcmpun>
 8007720:	b140      	cbz	r0, 8007734 <_printf_float+0xe0>
 8007722:	464b      	mov	r3, r9
 8007724:	2b00      	cmp	r3, #0
 8007726:	bfbc      	itt	lt
 8007728:	232d      	movlt	r3, #45	@ 0x2d
 800772a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800772e:	4a7e      	ldr	r2, [pc, #504]	@ (8007928 <_printf_float+0x2d4>)
 8007730:	4b7e      	ldr	r3, [pc, #504]	@ (800792c <_printf_float+0x2d8>)
 8007732:	e7d4      	b.n	80076de <_printf_float+0x8a>
 8007734:	6863      	ldr	r3, [r4, #4]
 8007736:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800773a:	9206      	str	r2, [sp, #24]
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	d13b      	bne.n	80077b8 <_printf_float+0x164>
 8007740:	2306      	movs	r3, #6
 8007742:	6063      	str	r3, [r4, #4]
 8007744:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007748:	2300      	movs	r3, #0
 800774a:	6022      	str	r2, [r4, #0]
 800774c:	9303      	str	r3, [sp, #12]
 800774e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007750:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007754:	ab09      	add	r3, sp, #36	@ 0x24
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	6861      	ldr	r1, [r4, #4]
 800775a:	ec49 8b10 	vmov	d0, r8, r9
 800775e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007762:	4628      	mov	r0, r5
 8007764:	f7ff fed7 	bl	8007516 <__cvt>
 8007768:	9b06      	ldr	r3, [sp, #24]
 800776a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800776c:	2b47      	cmp	r3, #71	@ 0x47
 800776e:	4680      	mov	r8, r0
 8007770:	d129      	bne.n	80077c6 <_printf_float+0x172>
 8007772:	1cc8      	adds	r0, r1, #3
 8007774:	db02      	blt.n	800777c <_printf_float+0x128>
 8007776:	6863      	ldr	r3, [r4, #4]
 8007778:	4299      	cmp	r1, r3
 800777a:	dd41      	ble.n	8007800 <_printf_float+0x1ac>
 800777c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007780:	fa5f fa8a 	uxtb.w	sl, sl
 8007784:	3901      	subs	r1, #1
 8007786:	4652      	mov	r2, sl
 8007788:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800778c:	9109      	str	r1, [sp, #36]	@ 0x24
 800778e:	f7ff ff27 	bl	80075e0 <__exponent>
 8007792:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007794:	1813      	adds	r3, r2, r0
 8007796:	2a01      	cmp	r2, #1
 8007798:	4681      	mov	r9, r0
 800779a:	6123      	str	r3, [r4, #16]
 800779c:	dc02      	bgt.n	80077a4 <_printf_float+0x150>
 800779e:	6822      	ldr	r2, [r4, #0]
 80077a0:	07d2      	lsls	r2, r2, #31
 80077a2:	d501      	bpl.n	80077a8 <_printf_float+0x154>
 80077a4:	3301      	adds	r3, #1
 80077a6:	6123      	str	r3, [r4, #16]
 80077a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d0a2      	beq.n	80076f6 <_printf_float+0xa2>
 80077b0:	232d      	movs	r3, #45	@ 0x2d
 80077b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077b6:	e79e      	b.n	80076f6 <_printf_float+0xa2>
 80077b8:	9a06      	ldr	r2, [sp, #24]
 80077ba:	2a47      	cmp	r2, #71	@ 0x47
 80077bc:	d1c2      	bne.n	8007744 <_printf_float+0xf0>
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1c0      	bne.n	8007744 <_printf_float+0xf0>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e7bd      	b.n	8007742 <_printf_float+0xee>
 80077c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077ca:	d9db      	bls.n	8007784 <_printf_float+0x130>
 80077cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80077d0:	d118      	bne.n	8007804 <_printf_float+0x1b0>
 80077d2:	2900      	cmp	r1, #0
 80077d4:	6863      	ldr	r3, [r4, #4]
 80077d6:	dd0b      	ble.n	80077f0 <_printf_float+0x19c>
 80077d8:	6121      	str	r1, [r4, #16]
 80077da:	b913      	cbnz	r3, 80077e2 <_printf_float+0x18e>
 80077dc:	6822      	ldr	r2, [r4, #0]
 80077de:	07d0      	lsls	r0, r2, #31
 80077e0:	d502      	bpl.n	80077e8 <_printf_float+0x194>
 80077e2:	3301      	adds	r3, #1
 80077e4:	440b      	add	r3, r1
 80077e6:	6123      	str	r3, [r4, #16]
 80077e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80077ea:	f04f 0900 	mov.w	r9, #0
 80077ee:	e7db      	b.n	80077a8 <_printf_float+0x154>
 80077f0:	b913      	cbnz	r3, 80077f8 <_printf_float+0x1a4>
 80077f2:	6822      	ldr	r2, [r4, #0]
 80077f4:	07d2      	lsls	r2, r2, #31
 80077f6:	d501      	bpl.n	80077fc <_printf_float+0x1a8>
 80077f8:	3302      	adds	r3, #2
 80077fa:	e7f4      	b.n	80077e6 <_printf_float+0x192>
 80077fc:	2301      	movs	r3, #1
 80077fe:	e7f2      	b.n	80077e6 <_printf_float+0x192>
 8007800:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007806:	4299      	cmp	r1, r3
 8007808:	db05      	blt.n	8007816 <_printf_float+0x1c2>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	6121      	str	r1, [r4, #16]
 800780e:	07d8      	lsls	r0, r3, #31
 8007810:	d5ea      	bpl.n	80077e8 <_printf_float+0x194>
 8007812:	1c4b      	adds	r3, r1, #1
 8007814:	e7e7      	b.n	80077e6 <_printf_float+0x192>
 8007816:	2900      	cmp	r1, #0
 8007818:	bfd4      	ite	le
 800781a:	f1c1 0202 	rsble	r2, r1, #2
 800781e:	2201      	movgt	r2, #1
 8007820:	4413      	add	r3, r2
 8007822:	e7e0      	b.n	80077e6 <_printf_float+0x192>
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	055a      	lsls	r2, r3, #21
 8007828:	d407      	bmi.n	800783a <_printf_float+0x1e6>
 800782a:	6923      	ldr	r3, [r4, #16]
 800782c:	4642      	mov	r2, r8
 800782e:	4631      	mov	r1, r6
 8007830:	4628      	mov	r0, r5
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	d12b      	bne.n	8007890 <_printf_float+0x23c>
 8007838:	e767      	b.n	800770a <_printf_float+0xb6>
 800783a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800783e:	f240 80dd 	bls.w	80079fc <_printf_float+0x3a8>
 8007842:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007846:	2200      	movs	r2, #0
 8007848:	2300      	movs	r3, #0
 800784a:	f7f9 f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 800784e:	2800      	cmp	r0, #0
 8007850:	d033      	beq.n	80078ba <_printf_float+0x266>
 8007852:	4a37      	ldr	r2, [pc, #220]	@ (8007930 <_printf_float+0x2dc>)
 8007854:	2301      	movs	r3, #1
 8007856:	4631      	mov	r1, r6
 8007858:	4628      	mov	r0, r5
 800785a:	47b8      	blx	r7
 800785c:	3001      	adds	r0, #1
 800785e:	f43f af54 	beq.w	800770a <_printf_float+0xb6>
 8007862:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007866:	4543      	cmp	r3, r8
 8007868:	db02      	blt.n	8007870 <_printf_float+0x21c>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	07d8      	lsls	r0, r3, #31
 800786e:	d50f      	bpl.n	8007890 <_printf_float+0x23c>
 8007870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f af45 	beq.w	800770a <_printf_float+0xb6>
 8007880:	f04f 0900 	mov.w	r9, #0
 8007884:	f108 38ff 	add.w	r8, r8, #4294967295
 8007888:	f104 0a1a 	add.w	sl, r4, #26
 800788c:	45c8      	cmp	r8, r9
 800788e:	dc09      	bgt.n	80078a4 <_printf_float+0x250>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	079b      	lsls	r3, r3, #30
 8007894:	f100 8103 	bmi.w	8007a9e <_printf_float+0x44a>
 8007898:	68e0      	ldr	r0, [r4, #12]
 800789a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800789c:	4298      	cmp	r0, r3
 800789e:	bfb8      	it	lt
 80078a0:	4618      	movlt	r0, r3
 80078a2:	e734      	b.n	800770e <_printf_float+0xba>
 80078a4:	2301      	movs	r3, #1
 80078a6:	4652      	mov	r2, sl
 80078a8:	4631      	mov	r1, r6
 80078aa:	4628      	mov	r0, r5
 80078ac:	47b8      	blx	r7
 80078ae:	3001      	adds	r0, #1
 80078b0:	f43f af2b 	beq.w	800770a <_printf_float+0xb6>
 80078b4:	f109 0901 	add.w	r9, r9, #1
 80078b8:	e7e8      	b.n	800788c <_printf_float+0x238>
 80078ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078bc:	2b00      	cmp	r3, #0
 80078be:	dc39      	bgt.n	8007934 <_printf_float+0x2e0>
 80078c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007930 <_printf_float+0x2dc>)
 80078c2:	2301      	movs	r3, #1
 80078c4:	4631      	mov	r1, r6
 80078c6:	4628      	mov	r0, r5
 80078c8:	47b8      	blx	r7
 80078ca:	3001      	adds	r0, #1
 80078cc:	f43f af1d 	beq.w	800770a <_printf_float+0xb6>
 80078d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80078d4:	ea59 0303 	orrs.w	r3, r9, r3
 80078d8:	d102      	bne.n	80078e0 <_printf_float+0x28c>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	07d9      	lsls	r1, r3, #31
 80078de:	d5d7      	bpl.n	8007890 <_printf_float+0x23c>
 80078e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078e4:	4631      	mov	r1, r6
 80078e6:	4628      	mov	r0, r5
 80078e8:	47b8      	blx	r7
 80078ea:	3001      	adds	r0, #1
 80078ec:	f43f af0d 	beq.w	800770a <_printf_float+0xb6>
 80078f0:	f04f 0a00 	mov.w	sl, #0
 80078f4:	f104 0b1a 	add.w	fp, r4, #26
 80078f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078fa:	425b      	negs	r3, r3
 80078fc:	4553      	cmp	r3, sl
 80078fe:	dc01      	bgt.n	8007904 <_printf_float+0x2b0>
 8007900:	464b      	mov	r3, r9
 8007902:	e793      	b.n	800782c <_printf_float+0x1d8>
 8007904:	2301      	movs	r3, #1
 8007906:	465a      	mov	r2, fp
 8007908:	4631      	mov	r1, r6
 800790a:	4628      	mov	r0, r5
 800790c:	47b8      	blx	r7
 800790e:	3001      	adds	r0, #1
 8007910:	f43f aefb 	beq.w	800770a <_printf_float+0xb6>
 8007914:	f10a 0a01 	add.w	sl, sl, #1
 8007918:	e7ee      	b.n	80078f8 <_printf_float+0x2a4>
 800791a:	bf00      	nop
 800791c:	7fefffff 	.word	0x7fefffff
 8007920:	0800a224 	.word	0x0800a224
 8007924:	0800a220 	.word	0x0800a220
 8007928:	0800a22c 	.word	0x0800a22c
 800792c:	0800a228 	.word	0x0800a228
 8007930:	0800a230 	.word	0x0800a230
 8007934:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007936:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800793a:	4553      	cmp	r3, sl
 800793c:	bfa8      	it	ge
 800793e:	4653      	movge	r3, sl
 8007940:	2b00      	cmp	r3, #0
 8007942:	4699      	mov	r9, r3
 8007944:	dc36      	bgt.n	80079b4 <_printf_float+0x360>
 8007946:	f04f 0b00 	mov.w	fp, #0
 800794a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800794e:	f104 021a 	add.w	r2, r4, #26
 8007952:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007954:	9306      	str	r3, [sp, #24]
 8007956:	eba3 0309 	sub.w	r3, r3, r9
 800795a:	455b      	cmp	r3, fp
 800795c:	dc31      	bgt.n	80079c2 <_printf_float+0x36e>
 800795e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007960:	459a      	cmp	sl, r3
 8007962:	dc3a      	bgt.n	80079da <_printf_float+0x386>
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	07da      	lsls	r2, r3, #31
 8007968:	d437      	bmi.n	80079da <_printf_float+0x386>
 800796a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800796c:	ebaa 0903 	sub.w	r9, sl, r3
 8007970:	9b06      	ldr	r3, [sp, #24]
 8007972:	ebaa 0303 	sub.w	r3, sl, r3
 8007976:	4599      	cmp	r9, r3
 8007978:	bfa8      	it	ge
 800797a:	4699      	movge	r9, r3
 800797c:	f1b9 0f00 	cmp.w	r9, #0
 8007980:	dc33      	bgt.n	80079ea <_printf_float+0x396>
 8007982:	f04f 0800 	mov.w	r8, #0
 8007986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800798a:	f104 0b1a 	add.w	fp, r4, #26
 800798e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007990:	ebaa 0303 	sub.w	r3, sl, r3
 8007994:	eba3 0309 	sub.w	r3, r3, r9
 8007998:	4543      	cmp	r3, r8
 800799a:	f77f af79 	ble.w	8007890 <_printf_float+0x23c>
 800799e:	2301      	movs	r3, #1
 80079a0:	465a      	mov	r2, fp
 80079a2:	4631      	mov	r1, r6
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b8      	blx	r7
 80079a8:	3001      	adds	r0, #1
 80079aa:	f43f aeae 	beq.w	800770a <_printf_float+0xb6>
 80079ae:	f108 0801 	add.w	r8, r8, #1
 80079b2:	e7ec      	b.n	800798e <_printf_float+0x33a>
 80079b4:	4642      	mov	r2, r8
 80079b6:	4631      	mov	r1, r6
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b8      	blx	r7
 80079bc:	3001      	adds	r0, #1
 80079be:	d1c2      	bne.n	8007946 <_printf_float+0x2f2>
 80079c0:	e6a3      	b.n	800770a <_printf_float+0xb6>
 80079c2:	2301      	movs	r3, #1
 80079c4:	4631      	mov	r1, r6
 80079c6:	4628      	mov	r0, r5
 80079c8:	9206      	str	r2, [sp, #24]
 80079ca:	47b8      	blx	r7
 80079cc:	3001      	adds	r0, #1
 80079ce:	f43f ae9c 	beq.w	800770a <_printf_float+0xb6>
 80079d2:	9a06      	ldr	r2, [sp, #24]
 80079d4:	f10b 0b01 	add.w	fp, fp, #1
 80079d8:	e7bb      	b.n	8007952 <_printf_float+0x2fe>
 80079da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079de:	4631      	mov	r1, r6
 80079e0:	4628      	mov	r0, r5
 80079e2:	47b8      	blx	r7
 80079e4:	3001      	adds	r0, #1
 80079e6:	d1c0      	bne.n	800796a <_printf_float+0x316>
 80079e8:	e68f      	b.n	800770a <_printf_float+0xb6>
 80079ea:	9a06      	ldr	r2, [sp, #24]
 80079ec:	464b      	mov	r3, r9
 80079ee:	4442      	add	r2, r8
 80079f0:	4631      	mov	r1, r6
 80079f2:	4628      	mov	r0, r5
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	d1c3      	bne.n	8007982 <_printf_float+0x32e>
 80079fa:	e686      	b.n	800770a <_printf_float+0xb6>
 80079fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a00:	f1ba 0f01 	cmp.w	sl, #1
 8007a04:	dc01      	bgt.n	8007a0a <_printf_float+0x3b6>
 8007a06:	07db      	lsls	r3, r3, #31
 8007a08:	d536      	bpl.n	8007a78 <_printf_float+0x424>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	4642      	mov	r2, r8
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4628      	mov	r0, r5
 8007a12:	47b8      	blx	r7
 8007a14:	3001      	adds	r0, #1
 8007a16:	f43f ae78 	beq.w	800770a <_printf_float+0xb6>
 8007a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a1e:	4631      	mov	r1, r6
 8007a20:	4628      	mov	r0, r5
 8007a22:	47b8      	blx	r7
 8007a24:	3001      	adds	r0, #1
 8007a26:	f43f ae70 	beq.w	800770a <_printf_float+0xb6>
 8007a2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2300      	movs	r3, #0
 8007a32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a36:	f7f9 f847 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a3a:	b9c0      	cbnz	r0, 8007a6e <_printf_float+0x41a>
 8007a3c:	4653      	mov	r3, sl
 8007a3e:	f108 0201 	add.w	r2, r8, #1
 8007a42:	4631      	mov	r1, r6
 8007a44:	4628      	mov	r0, r5
 8007a46:	47b8      	blx	r7
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d10c      	bne.n	8007a66 <_printf_float+0x412>
 8007a4c:	e65d      	b.n	800770a <_printf_float+0xb6>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	465a      	mov	r2, fp
 8007a52:	4631      	mov	r1, r6
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b8      	blx	r7
 8007a58:	3001      	adds	r0, #1
 8007a5a:	f43f ae56 	beq.w	800770a <_printf_float+0xb6>
 8007a5e:	f108 0801 	add.w	r8, r8, #1
 8007a62:	45d0      	cmp	r8, sl
 8007a64:	dbf3      	blt.n	8007a4e <_printf_float+0x3fa>
 8007a66:	464b      	mov	r3, r9
 8007a68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007a6c:	e6df      	b.n	800782e <_printf_float+0x1da>
 8007a6e:	f04f 0800 	mov.w	r8, #0
 8007a72:	f104 0b1a 	add.w	fp, r4, #26
 8007a76:	e7f4      	b.n	8007a62 <_printf_float+0x40e>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4642      	mov	r2, r8
 8007a7c:	e7e1      	b.n	8007a42 <_printf_float+0x3ee>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	464a      	mov	r2, r9
 8007a82:	4631      	mov	r1, r6
 8007a84:	4628      	mov	r0, r5
 8007a86:	47b8      	blx	r7
 8007a88:	3001      	adds	r0, #1
 8007a8a:	f43f ae3e 	beq.w	800770a <_printf_float+0xb6>
 8007a8e:	f108 0801 	add.w	r8, r8, #1
 8007a92:	68e3      	ldr	r3, [r4, #12]
 8007a94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a96:	1a5b      	subs	r3, r3, r1
 8007a98:	4543      	cmp	r3, r8
 8007a9a:	dcf0      	bgt.n	8007a7e <_printf_float+0x42a>
 8007a9c:	e6fc      	b.n	8007898 <_printf_float+0x244>
 8007a9e:	f04f 0800 	mov.w	r8, #0
 8007aa2:	f104 0919 	add.w	r9, r4, #25
 8007aa6:	e7f4      	b.n	8007a92 <_printf_float+0x43e>

08007aa8 <_printf_common>:
 8007aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aac:	4616      	mov	r6, r2
 8007aae:	4698      	mov	r8, r3
 8007ab0:	688a      	ldr	r2, [r1, #8]
 8007ab2:	690b      	ldr	r3, [r1, #16]
 8007ab4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	bfb8      	it	lt
 8007abc:	4613      	movlt	r3, r2
 8007abe:	6033      	str	r3, [r6, #0]
 8007ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ac4:	4607      	mov	r7, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	b10a      	cbz	r2, 8007ace <_printf_common+0x26>
 8007aca:	3301      	adds	r3, #1
 8007acc:	6033      	str	r3, [r6, #0]
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	0699      	lsls	r1, r3, #26
 8007ad2:	bf42      	ittt	mi
 8007ad4:	6833      	ldrmi	r3, [r6, #0]
 8007ad6:	3302      	addmi	r3, #2
 8007ad8:	6033      	strmi	r3, [r6, #0]
 8007ada:	6825      	ldr	r5, [r4, #0]
 8007adc:	f015 0506 	ands.w	r5, r5, #6
 8007ae0:	d106      	bne.n	8007af0 <_printf_common+0x48>
 8007ae2:	f104 0a19 	add.w	sl, r4, #25
 8007ae6:	68e3      	ldr	r3, [r4, #12]
 8007ae8:	6832      	ldr	r2, [r6, #0]
 8007aea:	1a9b      	subs	r3, r3, r2
 8007aec:	42ab      	cmp	r3, r5
 8007aee:	dc26      	bgt.n	8007b3e <_printf_common+0x96>
 8007af0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007af4:	6822      	ldr	r2, [r4, #0]
 8007af6:	3b00      	subs	r3, #0
 8007af8:	bf18      	it	ne
 8007afa:	2301      	movne	r3, #1
 8007afc:	0692      	lsls	r2, r2, #26
 8007afe:	d42b      	bmi.n	8007b58 <_printf_common+0xb0>
 8007b00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b04:	4641      	mov	r1, r8
 8007b06:	4638      	mov	r0, r7
 8007b08:	47c8      	blx	r9
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	d01e      	beq.n	8007b4c <_printf_common+0xa4>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	6922      	ldr	r2, [r4, #16]
 8007b12:	f003 0306 	and.w	r3, r3, #6
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	bf02      	ittt	eq
 8007b1a:	68e5      	ldreq	r5, [r4, #12]
 8007b1c:	6833      	ldreq	r3, [r6, #0]
 8007b1e:	1aed      	subeq	r5, r5, r3
 8007b20:	68a3      	ldr	r3, [r4, #8]
 8007b22:	bf0c      	ite	eq
 8007b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b28:	2500      	movne	r5, #0
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	bfc4      	itt	gt
 8007b2e:	1a9b      	subgt	r3, r3, r2
 8007b30:	18ed      	addgt	r5, r5, r3
 8007b32:	2600      	movs	r6, #0
 8007b34:	341a      	adds	r4, #26
 8007b36:	42b5      	cmp	r5, r6
 8007b38:	d11a      	bne.n	8007b70 <_printf_common+0xc8>
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	e008      	b.n	8007b50 <_printf_common+0xa8>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	4652      	mov	r2, sl
 8007b42:	4641      	mov	r1, r8
 8007b44:	4638      	mov	r0, r7
 8007b46:	47c8      	blx	r9
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d103      	bne.n	8007b54 <_printf_common+0xac>
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b54:	3501      	adds	r5, #1
 8007b56:	e7c6      	b.n	8007ae6 <_printf_common+0x3e>
 8007b58:	18e1      	adds	r1, r4, r3
 8007b5a:	1c5a      	adds	r2, r3, #1
 8007b5c:	2030      	movs	r0, #48	@ 0x30
 8007b5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b62:	4422      	add	r2, r4
 8007b64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b6c:	3302      	adds	r3, #2
 8007b6e:	e7c7      	b.n	8007b00 <_printf_common+0x58>
 8007b70:	2301      	movs	r3, #1
 8007b72:	4622      	mov	r2, r4
 8007b74:	4641      	mov	r1, r8
 8007b76:	4638      	mov	r0, r7
 8007b78:	47c8      	blx	r9
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	d0e6      	beq.n	8007b4c <_printf_common+0xa4>
 8007b7e:	3601      	adds	r6, #1
 8007b80:	e7d9      	b.n	8007b36 <_printf_common+0x8e>
	...

08007b84 <_printf_i>:
 8007b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b88:	7e0f      	ldrb	r7, [r1, #24]
 8007b8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b8c:	2f78      	cmp	r7, #120	@ 0x78
 8007b8e:	4691      	mov	r9, r2
 8007b90:	4680      	mov	r8, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	469a      	mov	sl, r3
 8007b96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b9a:	d807      	bhi.n	8007bac <_printf_i+0x28>
 8007b9c:	2f62      	cmp	r7, #98	@ 0x62
 8007b9e:	d80a      	bhi.n	8007bb6 <_printf_i+0x32>
 8007ba0:	2f00      	cmp	r7, #0
 8007ba2:	f000 80d1 	beq.w	8007d48 <_printf_i+0x1c4>
 8007ba6:	2f58      	cmp	r7, #88	@ 0x58
 8007ba8:	f000 80b8 	beq.w	8007d1c <_printf_i+0x198>
 8007bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007bb4:	e03a      	b.n	8007c2c <_printf_i+0xa8>
 8007bb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007bba:	2b15      	cmp	r3, #21
 8007bbc:	d8f6      	bhi.n	8007bac <_printf_i+0x28>
 8007bbe:	a101      	add	r1, pc, #4	@ (adr r1, 8007bc4 <_printf_i+0x40>)
 8007bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bc4:	08007c1d 	.word	0x08007c1d
 8007bc8:	08007c31 	.word	0x08007c31
 8007bcc:	08007bad 	.word	0x08007bad
 8007bd0:	08007bad 	.word	0x08007bad
 8007bd4:	08007bad 	.word	0x08007bad
 8007bd8:	08007bad 	.word	0x08007bad
 8007bdc:	08007c31 	.word	0x08007c31
 8007be0:	08007bad 	.word	0x08007bad
 8007be4:	08007bad 	.word	0x08007bad
 8007be8:	08007bad 	.word	0x08007bad
 8007bec:	08007bad 	.word	0x08007bad
 8007bf0:	08007d2f 	.word	0x08007d2f
 8007bf4:	08007c5b 	.word	0x08007c5b
 8007bf8:	08007ce9 	.word	0x08007ce9
 8007bfc:	08007bad 	.word	0x08007bad
 8007c00:	08007bad 	.word	0x08007bad
 8007c04:	08007d51 	.word	0x08007d51
 8007c08:	08007bad 	.word	0x08007bad
 8007c0c:	08007c5b 	.word	0x08007c5b
 8007c10:	08007bad 	.word	0x08007bad
 8007c14:	08007bad 	.word	0x08007bad
 8007c18:	08007cf1 	.word	0x08007cf1
 8007c1c:	6833      	ldr	r3, [r6, #0]
 8007c1e:	1d1a      	adds	r2, r3, #4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6032      	str	r2, [r6, #0]
 8007c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e09c      	b.n	8007d6a <_printf_i+0x1e6>
 8007c30:	6833      	ldr	r3, [r6, #0]
 8007c32:	6820      	ldr	r0, [r4, #0]
 8007c34:	1d19      	adds	r1, r3, #4
 8007c36:	6031      	str	r1, [r6, #0]
 8007c38:	0606      	lsls	r6, r0, #24
 8007c3a:	d501      	bpl.n	8007c40 <_printf_i+0xbc>
 8007c3c:	681d      	ldr	r5, [r3, #0]
 8007c3e:	e003      	b.n	8007c48 <_printf_i+0xc4>
 8007c40:	0645      	lsls	r5, r0, #25
 8007c42:	d5fb      	bpl.n	8007c3c <_printf_i+0xb8>
 8007c44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c48:	2d00      	cmp	r5, #0
 8007c4a:	da03      	bge.n	8007c54 <_printf_i+0xd0>
 8007c4c:	232d      	movs	r3, #45	@ 0x2d
 8007c4e:	426d      	negs	r5, r5
 8007c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c54:	4858      	ldr	r0, [pc, #352]	@ (8007db8 <_printf_i+0x234>)
 8007c56:	230a      	movs	r3, #10
 8007c58:	e011      	b.n	8007c7e <_printf_i+0xfa>
 8007c5a:	6821      	ldr	r1, [r4, #0]
 8007c5c:	6833      	ldr	r3, [r6, #0]
 8007c5e:	0608      	lsls	r0, r1, #24
 8007c60:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c64:	d402      	bmi.n	8007c6c <_printf_i+0xe8>
 8007c66:	0649      	lsls	r1, r1, #25
 8007c68:	bf48      	it	mi
 8007c6a:	b2ad      	uxthmi	r5, r5
 8007c6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c6e:	4852      	ldr	r0, [pc, #328]	@ (8007db8 <_printf_i+0x234>)
 8007c70:	6033      	str	r3, [r6, #0]
 8007c72:	bf14      	ite	ne
 8007c74:	230a      	movne	r3, #10
 8007c76:	2308      	moveq	r3, #8
 8007c78:	2100      	movs	r1, #0
 8007c7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c7e:	6866      	ldr	r6, [r4, #4]
 8007c80:	60a6      	str	r6, [r4, #8]
 8007c82:	2e00      	cmp	r6, #0
 8007c84:	db05      	blt.n	8007c92 <_printf_i+0x10e>
 8007c86:	6821      	ldr	r1, [r4, #0]
 8007c88:	432e      	orrs	r6, r5
 8007c8a:	f021 0104 	bic.w	r1, r1, #4
 8007c8e:	6021      	str	r1, [r4, #0]
 8007c90:	d04b      	beq.n	8007d2a <_printf_i+0x1a6>
 8007c92:	4616      	mov	r6, r2
 8007c94:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c98:	fb03 5711 	mls	r7, r3, r1, r5
 8007c9c:	5dc7      	ldrb	r7, [r0, r7]
 8007c9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ca2:	462f      	mov	r7, r5
 8007ca4:	42bb      	cmp	r3, r7
 8007ca6:	460d      	mov	r5, r1
 8007ca8:	d9f4      	bls.n	8007c94 <_printf_i+0x110>
 8007caa:	2b08      	cmp	r3, #8
 8007cac:	d10b      	bne.n	8007cc6 <_printf_i+0x142>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	07df      	lsls	r7, r3, #31
 8007cb2:	d508      	bpl.n	8007cc6 <_printf_i+0x142>
 8007cb4:	6923      	ldr	r3, [r4, #16]
 8007cb6:	6861      	ldr	r1, [r4, #4]
 8007cb8:	4299      	cmp	r1, r3
 8007cba:	bfde      	ittt	le
 8007cbc:	2330      	movle	r3, #48	@ 0x30
 8007cbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cc6:	1b92      	subs	r2, r2, r6
 8007cc8:	6122      	str	r2, [r4, #16]
 8007cca:	f8cd a000 	str.w	sl, [sp]
 8007cce:	464b      	mov	r3, r9
 8007cd0:	aa03      	add	r2, sp, #12
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	f7ff fee7 	bl	8007aa8 <_printf_common>
 8007cda:	3001      	adds	r0, #1
 8007cdc:	d14a      	bne.n	8007d74 <_printf_i+0x1f0>
 8007cde:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce2:	b004      	add	sp, #16
 8007ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	f043 0320 	orr.w	r3, r3, #32
 8007cee:	6023      	str	r3, [r4, #0]
 8007cf0:	4832      	ldr	r0, [pc, #200]	@ (8007dbc <_printf_i+0x238>)
 8007cf2:	2778      	movs	r7, #120	@ 0x78
 8007cf4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	6831      	ldr	r1, [r6, #0]
 8007cfc:	061f      	lsls	r7, r3, #24
 8007cfe:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d02:	d402      	bmi.n	8007d0a <_printf_i+0x186>
 8007d04:	065f      	lsls	r7, r3, #25
 8007d06:	bf48      	it	mi
 8007d08:	b2ad      	uxthmi	r5, r5
 8007d0a:	6031      	str	r1, [r6, #0]
 8007d0c:	07d9      	lsls	r1, r3, #31
 8007d0e:	bf44      	itt	mi
 8007d10:	f043 0320 	orrmi.w	r3, r3, #32
 8007d14:	6023      	strmi	r3, [r4, #0]
 8007d16:	b11d      	cbz	r5, 8007d20 <_printf_i+0x19c>
 8007d18:	2310      	movs	r3, #16
 8007d1a:	e7ad      	b.n	8007c78 <_printf_i+0xf4>
 8007d1c:	4826      	ldr	r0, [pc, #152]	@ (8007db8 <_printf_i+0x234>)
 8007d1e:	e7e9      	b.n	8007cf4 <_printf_i+0x170>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	f023 0320 	bic.w	r3, r3, #32
 8007d26:	6023      	str	r3, [r4, #0]
 8007d28:	e7f6      	b.n	8007d18 <_printf_i+0x194>
 8007d2a:	4616      	mov	r6, r2
 8007d2c:	e7bd      	b.n	8007caa <_printf_i+0x126>
 8007d2e:	6833      	ldr	r3, [r6, #0]
 8007d30:	6825      	ldr	r5, [r4, #0]
 8007d32:	6961      	ldr	r1, [r4, #20]
 8007d34:	1d18      	adds	r0, r3, #4
 8007d36:	6030      	str	r0, [r6, #0]
 8007d38:	062e      	lsls	r6, r5, #24
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	d501      	bpl.n	8007d42 <_printf_i+0x1be>
 8007d3e:	6019      	str	r1, [r3, #0]
 8007d40:	e002      	b.n	8007d48 <_printf_i+0x1c4>
 8007d42:	0668      	lsls	r0, r5, #25
 8007d44:	d5fb      	bpl.n	8007d3e <_printf_i+0x1ba>
 8007d46:	8019      	strh	r1, [r3, #0]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	6123      	str	r3, [r4, #16]
 8007d4c:	4616      	mov	r6, r2
 8007d4e:	e7bc      	b.n	8007cca <_printf_i+0x146>
 8007d50:	6833      	ldr	r3, [r6, #0]
 8007d52:	1d1a      	adds	r2, r3, #4
 8007d54:	6032      	str	r2, [r6, #0]
 8007d56:	681e      	ldr	r6, [r3, #0]
 8007d58:	6862      	ldr	r2, [r4, #4]
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7f8 fa37 	bl	80001d0 <memchr>
 8007d62:	b108      	cbz	r0, 8007d68 <_printf_i+0x1e4>
 8007d64:	1b80      	subs	r0, r0, r6
 8007d66:	6060      	str	r0, [r4, #4]
 8007d68:	6863      	ldr	r3, [r4, #4]
 8007d6a:	6123      	str	r3, [r4, #16]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d72:	e7aa      	b.n	8007cca <_printf_i+0x146>
 8007d74:	6923      	ldr	r3, [r4, #16]
 8007d76:	4632      	mov	r2, r6
 8007d78:	4649      	mov	r1, r9
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	47d0      	blx	sl
 8007d7e:	3001      	adds	r0, #1
 8007d80:	d0ad      	beq.n	8007cde <_printf_i+0x15a>
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	079b      	lsls	r3, r3, #30
 8007d86:	d413      	bmi.n	8007db0 <_printf_i+0x22c>
 8007d88:	68e0      	ldr	r0, [r4, #12]
 8007d8a:	9b03      	ldr	r3, [sp, #12]
 8007d8c:	4298      	cmp	r0, r3
 8007d8e:	bfb8      	it	lt
 8007d90:	4618      	movlt	r0, r3
 8007d92:	e7a6      	b.n	8007ce2 <_printf_i+0x15e>
 8007d94:	2301      	movs	r3, #1
 8007d96:	4632      	mov	r2, r6
 8007d98:	4649      	mov	r1, r9
 8007d9a:	4640      	mov	r0, r8
 8007d9c:	47d0      	blx	sl
 8007d9e:	3001      	adds	r0, #1
 8007da0:	d09d      	beq.n	8007cde <_printf_i+0x15a>
 8007da2:	3501      	adds	r5, #1
 8007da4:	68e3      	ldr	r3, [r4, #12]
 8007da6:	9903      	ldr	r1, [sp, #12]
 8007da8:	1a5b      	subs	r3, r3, r1
 8007daa:	42ab      	cmp	r3, r5
 8007dac:	dcf2      	bgt.n	8007d94 <_printf_i+0x210>
 8007dae:	e7eb      	b.n	8007d88 <_printf_i+0x204>
 8007db0:	2500      	movs	r5, #0
 8007db2:	f104 0619 	add.w	r6, r4, #25
 8007db6:	e7f5      	b.n	8007da4 <_printf_i+0x220>
 8007db8:	0800a232 	.word	0x0800a232
 8007dbc:	0800a243 	.word	0x0800a243

08007dc0 <std>:
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	b510      	push	{r4, lr}
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8007dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dce:	6083      	str	r3, [r0, #8]
 8007dd0:	8181      	strh	r1, [r0, #12]
 8007dd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007dd4:	81c2      	strh	r2, [r0, #14]
 8007dd6:	6183      	str	r3, [r0, #24]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	2208      	movs	r2, #8
 8007ddc:	305c      	adds	r0, #92	@ 0x5c
 8007dde:	f000 f916 	bl	800800e <memset>
 8007de2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e18 <std+0x58>)
 8007de4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007de6:	4b0d      	ldr	r3, [pc, #52]	@ (8007e1c <std+0x5c>)
 8007de8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007dea:	4b0d      	ldr	r3, [pc, #52]	@ (8007e20 <std+0x60>)
 8007dec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007dee:	4b0d      	ldr	r3, [pc, #52]	@ (8007e24 <std+0x64>)
 8007df0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007df2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e28 <std+0x68>)
 8007df4:	6224      	str	r4, [r4, #32]
 8007df6:	429c      	cmp	r4, r3
 8007df8:	d006      	beq.n	8007e08 <std+0x48>
 8007dfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007dfe:	4294      	cmp	r4, r2
 8007e00:	d002      	beq.n	8007e08 <std+0x48>
 8007e02:	33d0      	adds	r3, #208	@ 0xd0
 8007e04:	429c      	cmp	r4, r3
 8007e06:	d105      	bne.n	8007e14 <std+0x54>
 8007e08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e10:	f000 b97a 	b.w	8008108 <__retarget_lock_init_recursive>
 8007e14:	bd10      	pop	{r4, pc}
 8007e16:	bf00      	nop
 8007e18:	08007f89 	.word	0x08007f89
 8007e1c:	08007fab 	.word	0x08007fab
 8007e20:	08007fe3 	.word	0x08007fe3
 8007e24:	08008007 	.word	0x08008007
 8007e28:	200003b8 	.word	0x200003b8

08007e2c <stdio_exit_handler>:
 8007e2c:	4a02      	ldr	r2, [pc, #8]	@ (8007e38 <stdio_exit_handler+0xc>)
 8007e2e:	4903      	ldr	r1, [pc, #12]	@ (8007e3c <stdio_exit_handler+0x10>)
 8007e30:	4803      	ldr	r0, [pc, #12]	@ (8007e40 <stdio_exit_handler+0x14>)
 8007e32:	f000 b869 	b.w	8007f08 <_fwalk_sglue>
 8007e36:	bf00      	nop
 8007e38:	20000010 	.word	0x20000010
 8007e3c:	08009a6d 	.word	0x08009a6d
 8007e40:	20000020 	.word	0x20000020

08007e44 <cleanup_stdio>:
 8007e44:	6841      	ldr	r1, [r0, #4]
 8007e46:	4b0c      	ldr	r3, [pc, #48]	@ (8007e78 <cleanup_stdio+0x34>)
 8007e48:	4299      	cmp	r1, r3
 8007e4a:	b510      	push	{r4, lr}
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	d001      	beq.n	8007e54 <cleanup_stdio+0x10>
 8007e50:	f001 fe0c 	bl	8009a6c <_fflush_r>
 8007e54:	68a1      	ldr	r1, [r4, #8]
 8007e56:	4b09      	ldr	r3, [pc, #36]	@ (8007e7c <cleanup_stdio+0x38>)
 8007e58:	4299      	cmp	r1, r3
 8007e5a:	d002      	beq.n	8007e62 <cleanup_stdio+0x1e>
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f001 fe05 	bl	8009a6c <_fflush_r>
 8007e62:	68e1      	ldr	r1, [r4, #12]
 8007e64:	4b06      	ldr	r3, [pc, #24]	@ (8007e80 <cleanup_stdio+0x3c>)
 8007e66:	4299      	cmp	r1, r3
 8007e68:	d004      	beq.n	8007e74 <cleanup_stdio+0x30>
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e70:	f001 bdfc 	b.w	8009a6c <_fflush_r>
 8007e74:	bd10      	pop	{r4, pc}
 8007e76:	bf00      	nop
 8007e78:	200003b8 	.word	0x200003b8
 8007e7c:	20000420 	.word	0x20000420
 8007e80:	20000488 	.word	0x20000488

08007e84 <global_stdio_init.part.0>:
 8007e84:	b510      	push	{r4, lr}
 8007e86:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb4 <global_stdio_init.part.0+0x30>)
 8007e88:	4c0b      	ldr	r4, [pc, #44]	@ (8007eb8 <global_stdio_init.part.0+0x34>)
 8007e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8007ebc <global_stdio_init.part.0+0x38>)
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	4620      	mov	r0, r4
 8007e90:	2200      	movs	r2, #0
 8007e92:	2104      	movs	r1, #4
 8007e94:	f7ff ff94 	bl	8007dc0 <std>
 8007e98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	2109      	movs	r1, #9
 8007ea0:	f7ff ff8e 	bl	8007dc0 <std>
 8007ea4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eae:	2112      	movs	r1, #18
 8007eb0:	f7ff bf86 	b.w	8007dc0 <std>
 8007eb4:	200004f0 	.word	0x200004f0
 8007eb8:	200003b8 	.word	0x200003b8
 8007ebc:	08007e2d 	.word	0x08007e2d

08007ec0 <__sfp_lock_acquire>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	@ (8007ec8 <__sfp_lock_acquire+0x8>)
 8007ec2:	f000 b922 	b.w	800810a <__retarget_lock_acquire_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	200004f9 	.word	0x200004f9

08007ecc <__sfp_lock_release>:
 8007ecc:	4801      	ldr	r0, [pc, #4]	@ (8007ed4 <__sfp_lock_release+0x8>)
 8007ece:	f000 b91d 	b.w	800810c <__retarget_lock_release_recursive>
 8007ed2:	bf00      	nop
 8007ed4:	200004f9 	.word	0x200004f9

08007ed8 <__sinit>:
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	4604      	mov	r4, r0
 8007edc:	f7ff fff0 	bl	8007ec0 <__sfp_lock_acquire>
 8007ee0:	6a23      	ldr	r3, [r4, #32]
 8007ee2:	b11b      	cbz	r3, 8007eec <__sinit+0x14>
 8007ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee8:	f7ff bff0 	b.w	8007ecc <__sfp_lock_release>
 8007eec:	4b04      	ldr	r3, [pc, #16]	@ (8007f00 <__sinit+0x28>)
 8007eee:	6223      	str	r3, [r4, #32]
 8007ef0:	4b04      	ldr	r3, [pc, #16]	@ (8007f04 <__sinit+0x2c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1f5      	bne.n	8007ee4 <__sinit+0xc>
 8007ef8:	f7ff ffc4 	bl	8007e84 <global_stdio_init.part.0>
 8007efc:	e7f2      	b.n	8007ee4 <__sinit+0xc>
 8007efe:	bf00      	nop
 8007f00:	08007e45 	.word	0x08007e45
 8007f04:	200004f0 	.word	0x200004f0

08007f08 <_fwalk_sglue>:
 8007f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f0c:	4607      	mov	r7, r0
 8007f0e:	4688      	mov	r8, r1
 8007f10:	4614      	mov	r4, r2
 8007f12:	2600      	movs	r6, #0
 8007f14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f18:	f1b9 0901 	subs.w	r9, r9, #1
 8007f1c:	d505      	bpl.n	8007f2a <_fwalk_sglue+0x22>
 8007f1e:	6824      	ldr	r4, [r4, #0]
 8007f20:	2c00      	cmp	r4, #0
 8007f22:	d1f7      	bne.n	8007f14 <_fwalk_sglue+0xc>
 8007f24:	4630      	mov	r0, r6
 8007f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f2a:	89ab      	ldrh	r3, [r5, #12]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d907      	bls.n	8007f40 <_fwalk_sglue+0x38>
 8007f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f34:	3301      	adds	r3, #1
 8007f36:	d003      	beq.n	8007f40 <_fwalk_sglue+0x38>
 8007f38:	4629      	mov	r1, r5
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	47c0      	blx	r8
 8007f3e:	4306      	orrs	r6, r0
 8007f40:	3568      	adds	r5, #104	@ 0x68
 8007f42:	e7e9      	b.n	8007f18 <_fwalk_sglue+0x10>

08007f44 <siprintf>:
 8007f44:	b40e      	push	{r1, r2, r3}
 8007f46:	b510      	push	{r4, lr}
 8007f48:	b09d      	sub	sp, #116	@ 0x74
 8007f4a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007f4c:	9002      	str	r0, [sp, #8]
 8007f4e:	9006      	str	r0, [sp, #24]
 8007f50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f54:	480a      	ldr	r0, [pc, #40]	@ (8007f80 <siprintf+0x3c>)
 8007f56:	9107      	str	r1, [sp, #28]
 8007f58:	9104      	str	r1, [sp, #16]
 8007f5a:	490a      	ldr	r1, [pc, #40]	@ (8007f84 <siprintf+0x40>)
 8007f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f60:	9105      	str	r1, [sp, #20]
 8007f62:	2400      	movs	r4, #0
 8007f64:	a902      	add	r1, sp, #8
 8007f66:	6800      	ldr	r0, [r0, #0]
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007f6c:	f001 fbfe 	bl	800976c <_svfiprintf_r>
 8007f70:	9b02      	ldr	r3, [sp, #8]
 8007f72:	701c      	strb	r4, [r3, #0]
 8007f74:	b01d      	add	sp, #116	@ 0x74
 8007f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f7a:	b003      	add	sp, #12
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	2000001c 	.word	0x2000001c
 8007f84:	ffff0208 	.word	0xffff0208

08007f88 <__sread>:
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f90:	f000 f86c 	bl	800806c <_read_r>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	bfab      	itete	ge
 8007f98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f9c:	181b      	addge	r3, r3, r0
 8007f9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007fa2:	bfac      	ite	ge
 8007fa4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007fa6:	81a3      	strhlt	r3, [r4, #12]
 8007fa8:	bd10      	pop	{r4, pc}

08007faa <__swrite>:
 8007faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fae:	461f      	mov	r7, r3
 8007fb0:	898b      	ldrh	r3, [r1, #12]
 8007fb2:	05db      	lsls	r3, r3, #23
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	4616      	mov	r6, r2
 8007fba:	d505      	bpl.n	8007fc8 <__swrite+0x1e>
 8007fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f000 f840 	bl	8008048 <_lseek_r>
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fd2:	81a3      	strh	r3, [r4, #12]
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	463b      	mov	r3, r7
 8007fd8:	4628      	mov	r0, r5
 8007fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fde:	f000 b857 	b.w	8008090 <_write_r>

08007fe2 <__sseek>:
 8007fe2:	b510      	push	{r4, lr}
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fea:	f000 f82d 	bl	8008048 <_lseek_r>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	bf15      	itete	ne
 8007ff4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ff6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ffa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ffe:	81a3      	strheq	r3, [r4, #12]
 8008000:	bf18      	it	ne
 8008002:	81a3      	strhne	r3, [r4, #12]
 8008004:	bd10      	pop	{r4, pc}

08008006 <__sclose>:
 8008006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800a:	f000 b80d 	b.w	8008028 <_close_r>

0800800e <memset>:
 800800e:	4402      	add	r2, r0
 8008010:	4603      	mov	r3, r0
 8008012:	4293      	cmp	r3, r2
 8008014:	d100      	bne.n	8008018 <memset+0xa>
 8008016:	4770      	bx	lr
 8008018:	f803 1b01 	strb.w	r1, [r3], #1
 800801c:	e7f9      	b.n	8008012 <memset+0x4>
	...

08008020 <_localeconv_r>:
 8008020:	4800      	ldr	r0, [pc, #0]	@ (8008024 <_localeconv_r+0x4>)
 8008022:	4770      	bx	lr
 8008024:	2000015c 	.word	0x2000015c

08008028 <_close_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	4d06      	ldr	r5, [pc, #24]	@ (8008044 <_close_r+0x1c>)
 800802c:	2300      	movs	r3, #0
 800802e:	4604      	mov	r4, r0
 8008030:	4608      	mov	r0, r1
 8008032:	602b      	str	r3, [r5, #0]
 8008034:	f7f9 fc6e 	bl	8001914 <_close>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d102      	bne.n	8008042 <_close_r+0x1a>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	b103      	cbz	r3, 8008042 <_close_r+0x1a>
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	200004f4 	.word	0x200004f4

08008048 <_lseek_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4d07      	ldr	r5, [pc, #28]	@ (8008068 <_lseek_r+0x20>)
 800804c:	4604      	mov	r4, r0
 800804e:	4608      	mov	r0, r1
 8008050:	4611      	mov	r1, r2
 8008052:	2200      	movs	r2, #0
 8008054:	602a      	str	r2, [r5, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	f7f9 fc83 	bl	8001962 <_lseek>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d102      	bne.n	8008066 <_lseek_r+0x1e>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	b103      	cbz	r3, 8008066 <_lseek_r+0x1e>
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	200004f4 	.word	0x200004f4

0800806c <_read_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d07      	ldr	r5, [pc, #28]	@ (800808c <_read_r+0x20>)
 8008070:	4604      	mov	r4, r0
 8008072:	4608      	mov	r0, r1
 8008074:	4611      	mov	r1, r2
 8008076:	2200      	movs	r2, #0
 8008078:	602a      	str	r2, [r5, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	f7f9 fc11 	bl	80018a2 <_read>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d102      	bne.n	800808a <_read_r+0x1e>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	b103      	cbz	r3, 800808a <_read_r+0x1e>
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	200004f4 	.word	0x200004f4

08008090 <_write_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d07      	ldr	r5, [pc, #28]	@ (80080b0 <_write_r+0x20>)
 8008094:	4604      	mov	r4, r0
 8008096:	4608      	mov	r0, r1
 8008098:	4611      	mov	r1, r2
 800809a:	2200      	movs	r2, #0
 800809c:	602a      	str	r2, [r5, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	f7f9 fc1c 	bl	80018dc <_write>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d102      	bne.n	80080ae <_write_r+0x1e>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	b103      	cbz	r3, 80080ae <_write_r+0x1e>
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	200004f4 	.word	0x200004f4

080080b4 <__errno>:
 80080b4:	4b01      	ldr	r3, [pc, #4]	@ (80080bc <__errno+0x8>)
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	2000001c 	.word	0x2000001c

080080c0 <__libc_init_array>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	4d0d      	ldr	r5, [pc, #52]	@ (80080f8 <__libc_init_array+0x38>)
 80080c4:	4c0d      	ldr	r4, [pc, #52]	@ (80080fc <__libc_init_array+0x3c>)
 80080c6:	1b64      	subs	r4, r4, r5
 80080c8:	10a4      	asrs	r4, r4, #2
 80080ca:	2600      	movs	r6, #0
 80080cc:	42a6      	cmp	r6, r4
 80080ce:	d109      	bne.n	80080e4 <__libc_init_array+0x24>
 80080d0:	4d0b      	ldr	r5, [pc, #44]	@ (8008100 <__libc_init_array+0x40>)
 80080d2:	4c0c      	ldr	r4, [pc, #48]	@ (8008104 <__libc_init_array+0x44>)
 80080d4:	f002 f868 	bl	800a1a8 <_init>
 80080d8:	1b64      	subs	r4, r4, r5
 80080da:	10a4      	asrs	r4, r4, #2
 80080dc:	2600      	movs	r6, #0
 80080de:	42a6      	cmp	r6, r4
 80080e0:	d105      	bne.n	80080ee <__libc_init_array+0x2e>
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e8:	4798      	blx	r3
 80080ea:	3601      	adds	r6, #1
 80080ec:	e7ee      	b.n	80080cc <__libc_init_array+0xc>
 80080ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f2:	4798      	blx	r3
 80080f4:	3601      	adds	r6, #1
 80080f6:	e7f2      	b.n	80080de <__libc_init_array+0x1e>
 80080f8:	0800a59c 	.word	0x0800a59c
 80080fc:	0800a59c 	.word	0x0800a59c
 8008100:	0800a59c 	.word	0x0800a59c
 8008104:	0800a5a0 	.word	0x0800a5a0

08008108 <__retarget_lock_init_recursive>:
 8008108:	4770      	bx	lr

0800810a <__retarget_lock_acquire_recursive>:
 800810a:	4770      	bx	lr

0800810c <__retarget_lock_release_recursive>:
 800810c:	4770      	bx	lr

0800810e <quorem>:
 800810e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008112:	6903      	ldr	r3, [r0, #16]
 8008114:	690c      	ldr	r4, [r1, #16]
 8008116:	42a3      	cmp	r3, r4
 8008118:	4607      	mov	r7, r0
 800811a:	db7e      	blt.n	800821a <quorem+0x10c>
 800811c:	3c01      	subs	r4, #1
 800811e:	f101 0814 	add.w	r8, r1, #20
 8008122:	00a3      	lsls	r3, r4, #2
 8008124:	f100 0514 	add.w	r5, r0, #20
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008134:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008138:	3301      	adds	r3, #1
 800813a:	429a      	cmp	r2, r3
 800813c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008140:	fbb2 f6f3 	udiv	r6, r2, r3
 8008144:	d32e      	bcc.n	80081a4 <quorem+0x96>
 8008146:	f04f 0a00 	mov.w	sl, #0
 800814a:	46c4      	mov	ip, r8
 800814c:	46ae      	mov	lr, r5
 800814e:	46d3      	mov	fp, sl
 8008150:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008154:	b298      	uxth	r0, r3
 8008156:	fb06 a000 	mla	r0, r6, r0, sl
 800815a:	0c02      	lsrs	r2, r0, #16
 800815c:	0c1b      	lsrs	r3, r3, #16
 800815e:	fb06 2303 	mla	r3, r6, r3, r2
 8008162:	f8de 2000 	ldr.w	r2, [lr]
 8008166:	b280      	uxth	r0, r0
 8008168:	b292      	uxth	r2, r2
 800816a:	1a12      	subs	r2, r2, r0
 800816c:	445a      	add	r2, fp
 800816e:	f8de 0000 	ldr.w	r0, [lr]
 8008172:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008176:	b29b      	uxth	r3, r3
 8008178:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800817c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008180:	b292      	uxth	r2, r2
 8008182:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008186:	45e1      	cmp	r9, ip
 8008188:	f84e 2b04 	str.w	r2, [lr], #4
 800818c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008190:	d2de      	bcs.n	8008150 <quorem+0x42>
 8008192:	9b00      	ldr	r3, [sp, #0]
 8008194:	58eb      	ldr	r3, [r5, r3]
 8008196:	b92b      	cbnz	r3, 80081a4 <quorem+0x96>
 8008198:	9b01      	ldr	r3, [sp, #4]
 800819a:	3b04      	subs	r3, #4
 800819c:	429d      	cmp	r5, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	d32f      	bcc.n	8008202 <quorem+0xf4>
 80081a2:	613c      	str	r4, [r7, #16]
 80081a4:	4638      	mov	r0, r7
 80081a6:	f001 f97d 	bl	80094a4 <__mcmp>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	db25      	blt.n	80081fa <quorem+0xec>
 80081ae:	4629      	mov	r1, r5
 80081b0:	2000      	movs	r0, #0
 80081b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80081b6:	f8d1 c000 	ldr.w	ip, [r1]
 80081ba:	fa1f fe82 	uxth.w	lr, r2
 80081be:	fa1f f38c 	uxth.w	r3, ip
 80081c2:	eba3 030e 	sub.w	r3, r3, lr
 80081c6:	4403      	add	r3, r0
 80081c8:	0c12      	lsrs	r2, r2, #16
 80081ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80081ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081d8:	45c1      	cmp	r9, r8
 80081da:	f841 3b04 	str.w	r3, [r1], #4
 80081de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081e2:	d2e6      	bcs.n	80081b2 <quorem+0xa4>
 80081e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081ec:	b922      	cbnz	r2, 80081f8 <quorem+0xea>
 80081ee:	3b04      	subs	r3, #4
 80081f0:	429d      	cmp	r5, r3
 80081f2:	461a      	mov	r2, r3
 80081f4:	d30b      	bcc.n	800820e <quorem+0x100>
 80081f6:	613c      	str	r4, [r7, #16]
 80081f8:	3601      	adds	r6, #1
 80081fa:	4630      	mov	r0, r6
 80081fc:	b003      	add	sp, #12
 80081fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008202:	6812      	ldr	r2, [r2, #0]
 8008204:	3b04      	subs	r3, #4
 8008206:	2a00      	cmp	r2, #0
 8008208:	d1cb      	bne.n	80081a2 <quorem+0x94>
 800820a:	3c01      	subs	r4, #1
 800820c:	e7c6      	b.n	800819c <quorem+0x8e>
 800820e:	6812      	ldr	r2, [r2, #0]
 8008210:	3b04      	subs	r3, #4
 8008212:	2a00      	cmp	r2, #0
 8008214:	d1ef      	bne.n	80081f6 <quorem+0xe8>
 8008216:	3c01      	subs	r4, #1
 8008218:	e7ea      	b.n	80081f0 <quorem+0xe2>
 800821a:	2000      	movs	r0, #0
 800821c:	e7ee      	b.n	80081fc <quorem+0xee>
	...

08008220 <_dtoa_r>:
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	69c7      	ldr	r7, [r0, #28]
 8008226:	b097      	sub	sp, #92	@ 0x5c
 8008228:	ed8d 0b04 	vstr	d0, [sp, #16]
 800822c:	ec55 4b10 	vmov	r4, r5, d0
 8008230:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008232:	9107      	str	r1, [sp, #28]
 8008234:	4681      	mov	r9, r0
 8008236:	920c      	str	r2, [sp, #48]	@ 0x30
 8008238:	9311      	str	r3, [sp, #68]	@ 0x44
 800823a:	b97f      	cbnz	r7, 800825c <_dtoa_r+0x3c>
 800823c:	2010      	movs	r0, #16
 800823e:	f000 fe09 	bl	8008e54 <malloc>
 8008242:	4602      	mov	r2, r0
 8008244:	f8c9 001c 	str.w	r0, [r9, #28]
 8008248:	b920      	cbnz	r0, 8008254 <_dtoa_r+0x34>
 800824a:	4ba9      	ldr	r3, [pc, #676]	@ (80084f0 <_dtoa_r+0x2d0>)
 800824c:	21ef      	movs	r1, #239	@ 0xef
 800824e:	48a9      	ldr	r0, [pc, #676]	@ (80084f4 <_dtoa_r+0x2d4>)
 8008250:	f001 fc6c 	bl	8009b2c <__assert_func>
 8008254:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008258:	6007      	str	r7, [r0, #0]
 800825a:	60c7      	str	r7, [r0, #12]
 800825c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008260:	6819      	ldr	r1, [r3, #0]
 8008262:	b159      	cbz	r1, 800827c <_dtoa_r+0x5c>
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	604a      	str	r2, [r1, #4]
 8008268:	2301      	movs	r3, #1
 800826a:	4093      	lsls	r3, r2
 800826c:	608b      	str	r3, [r1, #8]
 800826e:	4648      	mov	r0, r9
 8008270:	f000 fee6 	bl	8009040 <_Bfree>
 8008274:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	1e2b      	subs	r3, r5, #0
 800827e:	bfb9      	ittee	lt
 8008280:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008284:	9305      	strlt	r3, [sp, #20]
 8008286:	2300      	movge	r3, #0
 8008288:	6033      	strge	r3, [r6, #0]
 800828a:	9f05      	ldr	r7, [sp, #20]
 800828c:	4b9a      	ldr	r3, [pc, #616]	@ (80084f8 <_dtoa_r+0x2d8>)
 800828e:	bfbc      	itt	lt
 8008290:	2201      	movlt	r2, #1
 8008292:	6032      	strlt	r2, [r6, #0]
 8008294:	43bb      	bics	r3, r7
 8008296:	d112      	bne.n	80082be <_dtoa_r+0x9e>
 8008298:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800829a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082a4:	4323      	orrs	r3, r4
 80082a6:	f000 855a 	beq.w	8008d5e <_dtoa_r+0xb3e>
 80082aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800850c <_dtoa_r+0x2ec>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 855c 	beq.w	8008d6e <_dtoa_r+0xb4e>
 80082b6:	f10a 0303 	add.w	r3, sl, #3
 80082ba:	f000 bd56 	b.w	8008d6a <_dtoa_r+0xb4a>
 80082be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80082c2:	2200      	movs	r2, #0
 80082c4:	ec51 0b17 	vmov	r0, r1, d7
 80082c8:	2300      	movs	r3, #0
 80082ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80082ce:	f7f8 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 80082d2:	4680      	mov	r8, r0
 80082d4:	b158      	cbz	r0, 80082ee <_dtoa_r+0xce>
 80082d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80082d8:	2301      	movs	r3, #1
 80082da:	6013      	str	r3, [r2, #0]
 80082dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082de:	b113      	cbz	r3, 80082e6 <_dtoa_r+0xc6>
 80082e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80082e2:	4b86      	ldr	r3, [pc, #536]	@ (80084fc <_dtoa_r+0x2dc>)
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008510 <_dtoa_r+0x2f0>
 80082ea:	f000 bd40 	b.w	8008d6e <_dtoa_r+0xb4e>
 80082ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80082f2:	aa14      	add	r2, sp, #80	@ 0x50
 80082f4:	a915      	add	r1, sp, #84	@ 0x54
 80082f6:	4648      	mov	r0, r9
 80082f8:	f001 f984 	bl	8009604 <__d2b>
 80082fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008300:	9002      	str	r0, [sp, #8]
 8008302:	2e00      	cmp	r6, #0
 8008304:	d078      	beq.n	80083f8 <_dtoa_r+0x1d8>
 8008306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008308:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800830c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008310:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008314:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008318:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800831c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008320:	4619      	mov	r1, r3
 8008322:	2200      	movs	r2, #0
 8008324:	4b76      	ldr	r3, [pc, #472]	@ (8008500 <_dtoa_r+0x2e0>)
 8008326:	f7f7 ffaf 	bl	8000288 <__aeabi_dsub>
 800832a:	a36b      	add	r3, pc, #428	@ (adr r3, 80084d8 <_dtoa_r+0x2b8>)
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	f7f8 f962 	bl	80005f8 <__aeabi_dmul>
 8008334:	a36a      	add	r3, pc, #424	@ (adr r3, 80084e0 <_dtoa_r+0x2c0>)
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	f7f7 ffa7 	bl	800028c <__adddf3>
 800833e:	4604      	mov	r4, r0
 8008340:	4630      	mov	r0, r6
 8008342:	460d      	mov	r5, r1
 8008344:	f7f8 f8ee 	bl	8000524 <__aeabi_i2d>
 8008348:	a367      	add	r3, pc, #412	@ (adr r3, 80084e8 <_dtoa_r+0x2c8>)
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f7f8 f953 	bl	80005f8 <__aeabi_dmul>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	4620      	mov	r0, r4
 8008358:	4629      	mov	r1, r5
 800835a:	f7f7 ff97 	bl	800028c <__adddf3>
 800835e:	4604      	mov	r4, r0
 8008360:	460d      	mov	r5, r1
 8008362:	f7f8 fbf9 	bl	8000b58 <__aeabi_d2iz>
 8008366:	2200      	movs	r2, #0
 8008368:	4607      	mov	r7, r0
 800836a:	2300      	movs	r3, #0
 800836c:	4620      	mov	r0, r4
 800836e:	4629      	mov	r1, r5
 8008370:	f7f8 fbb4 	bl	8000adc <__aeabi_dcmplt>
 8008374:	b140      	cbz	r0, 8008388 <_dtoa_r+0x168>
 8008376:	4638      	mov	r0, r7
 8008378:	f7f8 f8d4 	bl	8000524 <__aeabi_i2d>
 800837c:	4622      	mov	r2, r4
 800837e:	462b      	mov	r3, r5
 8008380:	f7f8 fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008384:	b900      	cbnz	r0, 8008388 <_dtoa_r+0x168>
 8008386:	3f01      	subs	r7, #1
 8008388:	2f16      	cmp	r7, #22
 800838a:	d852      	bhi.n	8008432 <_dtoa_r+0x212>
 800838c:	4b5d      	ldr	r3, [pc, #372]	@ (8008504 <_dtoa_r+0x2e4>)
 800838e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008396:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800839a:	f7f8 fb9f 	bl	8000adc <__aeabi_dcmplt>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d049      	beq.n	8008436 <_dtoa_r+0x216>
 80083a2:	3f01      	subs	r7, #1
 80083a4:	2300      	movs	r3, #0
 80083a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80083a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80083aa:	1b9b      	subs	r3, r3, r6
 80083ac:	1e5a      	subs	r2, r3, #1
 80083ae:	bf45      	ittet	mi
 80083b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80083b4:	9300      	strmi	r3, [sp, #0]
 80083b6:	2300      	movpl	r3, #0
 80083b8:	2300      	movmi	r3, #0
 80083ba:	9206      	str	r2, [sp, #24]
 80083bc:	bf54      	ite	pl
 80083be:	9300      	strpl	r3, [sp, #0]
 80083c0:	9306      	strmi	r3, [sp, #24]
 80083c2:	2f00      	cmp	r7, #0
 80083c4:	db39      	blt.n	800843a <_dtoa_r+0x21a>
 80083c6:	9b06      	ldr	r3, [sp, #24]
 80083c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80083ca:	443b      	add	r3, r7
 80083cc:	9306      	str	r3, [sp, #24]
 80083ce:	2300      	movs	r3, #0
 80083d0:	9308      	str	r3, [sp, #32]
 80083d2:	9b07      	ldr	r3, [sp, #28]
 80083d4:	2b09      	cmp	r3, #9
 80083d6:	d863      	bhi.n	80084a0 <_dtoa_r+0x280>
 80083d8:	2b05      	cmp	r3, #5
 80083da:	bfc4      	itt	gt
 80083dc:	3b04      	subgt	r3, #4
 80083de:	9307      	strgt	r3, [sp, #28]
 80083e0:	9b07      	ldr	r3, [sp, #28]
 80083e2:	f1a3 0302 	sub.w	r3, r3, #2
 80083e6:	bfcc      	ite	gt
 80083e8:	2400      	movgt	r4, #0
 80083ea:	2401      	movle	r4, #1
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d863      	bhi.n	80084b8 <_dtoa_r+0x298>
 80083f0:	e8df f003 	tbb	[pc, r3]
 80083f4:	2b375452 	.word	0x2b375452
 80083f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80083fc:	441e      	add	r6, r3
 80083fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008402:	2b20      	cmp	r3, #32
 8008404:	bfc1      	itttt	gt
 8008406:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800840a:	409f      	lslgt	r7, r3
 800840c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008410:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008414:	bfd6      	itet	le
 8008416:	f1c3 0320 	rsble	r3, r3, #32
 800841a:	ea47 0003 	orrgt.w	r0, r7, r3
 800841e:	fa04 f003 	lslle.w	r0, r4, r3
 8008422:	f7f8 f86f 	bl	8000504 <__aeabi_ui2d>
 8008426:	2201      	movs	r2, #1
 8008428:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800842c:	3e01      	subs	r6, #1
 800842e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008430:	e776      	b.n	8008320 <_dtoa_r+0x100>
 8008432:	2301      	movs	r3, #1
 8008434:	e7b7      	b.n	80083a6 <_dtoa_r+0x186>
 8008436:	9010      	str	r0, [sp, #64]	@ 0x40
 8008438:	e7b6      	b.n	80083a8 <_dtoa_r+0x188>
 800843a:	9b00      	ldr	r3, [sp, #0]
 800843c:	1bdb      	subs	r3, r3, r7
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	427b      	negs	r3, r7
 8008442:	9308      	str	r3, [sp, #32]
 8008444:	2300      	movs	r3, #0
 8008446:	930d      	str	r3, [sp, #52]	@ 0x34
 8008448:	e7c3      	b.n	80083d2 <_dtoa_r+0x1b2>
 800844a:	2301      	movs	r3, #1
 800844c:	9309      	str	r3, [sp, #36]	@ 0x24
 800844e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008450:	eb07 0b03 	add.w	fp, r7, r3
 8008454:	f10b 0301 	add.w	r3, fp, #1
 8008458:	2b01      	cmp	r3, #1
 800845a:	9303      	str	r3, [sp, #12]
 800845c:	bfb8      	it	lt
 800845e:	2301      	movlt	r3, #1
 8008460:	e006      	b.n	8008470 <_dtoa_r+0x250>
 8008462:	2301      	movs	r3, #1
 8008464:	9309      	str	r3, [sp, #36]	@ 0x24
 8008466:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008468:	2b00      	cmp	r3, #0
 800846a:	dd28      	ble.n	80084be <_dtoa_r+0x29e>
 800846c:	469b      	mov	fp, r3
 800846e:	9303      	str	r3, [sp, #12]
 8008470:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008474:	2100      	movs	r1, #0
 8008476:	2204      	movs	r2, #4
 8008478:	f102 0514 	add.w	r5, r2, #20
 800847c:	429d      	cmp	r5, r3
 800847e:	d926      	bls.n	80084ce <_dtoa_r+0x2ae>
 8008480:	6041      	str	r1, [r0, #4]
 8008482:	4648      	mov	r0, r9
 8008484:	f000 fd9c 	bl	8008fc0 <_Balloc>
 8008488:	4682      	mov	sl, r0
 800848a:	2800      	cmp	r0, #0
 800848c:	d142      	bne.n	8008514 <_dtoa_r+0x2f4>
 800848e:	4b1e      	ldr	r3, [pc, #120]	@ (8008508 <_dtoa_r+0x2e8>)
 8008490:	4602      	mov	r2, r0
 8008492:	f240 11af 	movw	r1, #431	@ 0x1af
 8008496:	e6da      	b.n	800824e <_dtoa_r+0x2e>
 8008498:	2300      	movs	r3, #0
 800849a:	e7e3      	b.n	8008464 <_dtoa_r+0x244>
 800849c:	2300      	movs	r3, #0
 800849e:	e7d5      	b.n	800844c <_dtoa_r+0x22c>
 80084a0:	2401      	movs	r4, #1
 80084a2:	2300      	movs	r3, #0
 80084a4:	9307      	str	r3, [sp, #28]
 80084a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80084a8:	f04f 3bff 	mov.w	fp, #4294967295
 80084ac:	2200      	movs	r2, #0
 80084ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80084b2:	2312      	movs	r3, #18
 80084b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80084b6:	e7db      	b.n	8008470 <_dtoa_r+0x250>
 80084b8:	2301      	movs	r3, #1
 80084ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80084bc:	e7f4      	b.n	80084a8 <_dtoa_r+0x288>
 80084be:	f04f 0b01 	mov.w	fp, #1
 80084c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80084c6:	465b      	mov	r3, fp
 80084c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80084cc:	e7d0      	b.n	8008470 <_dtoa_r+0x250>
 80084ce:	3101      	adds	r1, #1
 80084d0:	0052      	lsls	r2, r2, #1
 80084d2:	e7d1      	b.n	8008478 <_dtoa_r+0x258>
 80084d4:	f3af 8000 	nop.w
 80084d8:	636f4361 	.word	0x636f4361
 80084dc:	3fd287a7 	.word	0x3fd287a7
 80084e0:	8b60c8b3 	.word	0x8b60c8b3
 80084e4:	3fc68a28 	.word	0x3fc68a28
 80084e8:	509f79fb 	.word	0x509f79fb
 80084ec:	3fd34413 	.word	0x3fd34413
 80084f0:	0800a261 	.word	0x0800a261
 80084f4:	0800a278 	.word	0x0800a278
 80084f8:	7ff00000 	.word	0x7ff00000
 80084fc:	0800a231 	.word	0x0800a231
 8008500:	3ff80000 	.word	0x3ff80000
 8008504:	0800a3c8 	.word	0x0800a3c8
 8008508:	0800a2d0 	.word	0x0800a2d0
 800850c:	0800a25d 	.word	0x0800a25d
 8008510:	0800a230 	.word	0x0800a230
 8008514:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008518:	6018      	str	r0, [r3, #0]
 800851a:	9b03      	ldr	r3, [sp, #12]
 800851c:	2b0e      	cmp	r3, #14
 800851e:	f200 80a1 	bhi.w	8008664 <_dtoa_r+0x444>
 8008522:	2c00      	cmp	r4, #0
 8008524:	f000 809e 	beq.w	8008664 <_dtoa_r+0x444>
 8008528:	2f00      	cmp	r7, #0
 800852a:	dd33      	ble.n	8008594 <_dtoa_r+0x374>
 800852c:	4b9c      	ldr	r3, [pc, #624]	@ (80087a0 <_dtoa_r+0x580>)
 800852e:	f007 020f 	and.w	r2, r7, #15
 8008532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008536:	ed93 7b00 	vldr	d7, [r3]
 800853a:	05f8      	lsls	r0, r7, #23
 800853c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008540:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008544:	d516      	bpl.n	8008574 <_dtoa_r+0x354>
 8008546:	4b97      	ldr	r3, [pc, #604]	@ (80087a4 <_dtoa_r+0x584>)
 8008548:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800854c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008550:	f7f8 f97c 	bl	800084c <__aeabi_ddiv>
 8008554:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008558:	f004 040f 	and.w	r4, r4, #15
 800855c:	2603      	movs	r6, #3
 800855e:	4d91      	ldr	r5, [pc, #580]	@ (80087a4 <_dtoa_r+0x584>)
 8008560:	b954      	cbnz	r4, 8008578 <_dtoa_r+0x358>
 8008562:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008566:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800856a:	f7f8 f96f 	bl	800084c <__aeabi_ddiv>
 800856e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008572:	e028      	b.n	80085c6 <_dtoa_r+0x3a6>
 8008574:	2602      	movs	r6, #2
 8008576:	e7f2      	b.n	800855e <_dtoa_r+0x33e>
 8008578:	07e1      	lsls	r1, r4, #31
 800857a:	d508      	bpl.n	800858e <_dtoa_r+0x36e>
 800857c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008580:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008584:	f7f8 f838 	bl	80005f8 <__aeabi_dmul>
 8008588:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800858c:	3601      	adds	r6, #1
 800858e:	1064      	asrs	r4, r4, #1
 8008590:	3508      	adds	r5, #8
 8008592:	e7e5      	b.n	8008560 <_dtoa_r+0x340>
 8008594:	f000 80af 	beq.w	80086f6 <_dtoa_r+0x4d6>
 8008598:	427c      	negs	r4, r7
 800859a:	4b81      	ldr	r3, [pc, #516]	@ (80087a0 <_dtoa_r+0x580>)
 800859c:	4d81      	ldr	r5, [pc, #516]	@ (80087a4 <_dtoa_r+0x584>)
 800859e:	f004 020f 	and.w	r2, r4, #15
 80085a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80085ae:	f7f8 f823 	bl	80005f8 <__aeabi_dmul>
 80085b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085b6:	1124      	asrs	r4, r4, #4
 80085b8:	2300      	movs	r3, #0
 80085ba:	2602      	movs	r6, #2
 80085bc:	2c00      	cmp	r4, #0
 80085be:	f040 808f 	bne.w	80086e0 <_dtoa_r+0x4c0>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1d3      	bne.n	800856e <_dtoa_r+0x34e>
 80085c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80085c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 8094 	beq.w	80086fa <_dtoa_r+0x4da>
 80085d2:	4b75      	ldr	r3, [pc, #468]	@ (80087a8 <_dtoa_r+0x588>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	4620      	mov	r0, r4
 80085d8:	4629      	mov	r1, r5
 80085da:	f7f8 fa7f 	bl	8000adc <__aeabi_dcmplt>
 80085de:	2800      	cmp	r0, #0
 80085e0:	f000 808b 	beq.w	80086fa <_dtoa_r+0x4da>
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 8087 	beq.w	80086fa <_dtoa_r+0x4da>
 80085ec:	f1bb 0f00 	cmp.w	fp, #0
 80085f0:	dd34      	ble.n	800865c <_dtoa_r+0x43c>
 80085f2:	4620      	mov	r0, r4
 80085f4:	4b6d      	ldr	r3, [pc, #436]	@ (80087ac <_dtoa_r+0x58c>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	4629      	mov	r1, r5
 80085fa:	f7f7 fffd 	bl	80005f8 <__aeabi_dmul>
 80085fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008602:	f107 38ff 	add.w	r8, r7, #4294967295
 8008606:	3601      	adds	r6, #1
 8008608:	465c      	mov	r4, fp
 800860a:	4630      	mov	r0, r6
 800860c:	f7f7 ff8a 	bl	8000524 <__aeabi_i2d>
 8008610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008614:	f7f7 fff0 	bl	80005f8 <__aeabi_dmul>
 8008618:	4b65      	ldr	r3, [pc, #404]	@ (80087b0 <_dtoa_r+0x590>)
 800861a:	2200      	movs	r2, #0
 800861c:	f7f7 fe36 	bl	800028c <__adddf3>
 8008620:	4605      	mov	r5, r0
 8008622:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008626:	2c00      	cmp	r4, #0
 8008628:	d16a      	bne.n	8008700 <_dtoa_r+0x4e0>
 800862a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800862e:	4b61      	ldr	r3, [pc, #388]	@ (80087b4 <_dtoa_r+0x594>)
 8008630:	2200      	movs	r2, #0
 8008632:	f7f7 fe29 	bl	8000288 <__aeabi_dsub>
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800863e:	462a      	mov	r2, r5
 8008640:	4633      	mov	r3, r6
 8008642:	f7f8 fa69 	bl	8000b18 <__aeabi_dcmpgt>
 8008646:	2800      	cmp	r0, #0
 8008648:	f040 8298 	bne.w	8008b7c <_dtoa_r+0x95c>
 800864c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008650:	462a      	mov	r2, r5
 8008652:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008656:	f7f8 fa41 	bl	8000adc <__aeabi_dcmplt>
 800865a:	bb38      	cbnz	r0, 80086ac <_dtoa_r+0x48c>
 800865c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008660:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008664:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008666:	2b00      	cmp	r3, #0
 8008668:	f2c0 8157 	blt.w	800891a <_dtoa_r+0x6fa>
 800866c:	2f0e      	cmp	r7, #14
 800866e:	f300 8154 	bgt.w	800891a <_dtoa_r+0x6fa>
 8008672:	4b4b      	ldr	r3, [pc, #300]	@ (80087a0 <_dtoa_r+0x580>)
 8008674:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008678:	ed93 7b00 	vldr	d7, [r3]
 800867c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800867e:	2b00      	cmp	r3, #0
 8008680:	ed8d 7b00 	vstr	d7, [sp]
 8008684:	f280 80e5 	bge.w	8008852 <_dtoa_r+0x632>
 8008688:	9b03      	ldr	r3, [sp, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	f300 80e1 	bgt.w	8008852 <_dtoa_r+0x632>
 8008690:	d10c      	bne.n	80086ac <_dtoa_r+0x48c>
 8008692:	4b48      	ldr	r3, [pc, #288]	@ (80087b4 <_dtoa_r+0x594>)
 8008694:	2200      	movs	r2, #0
 8008696:	ec51 0b17 	vmov	r0, r1, d7
 800869a:	f7f7 ffad 	bl	80005f8 <__aeabi_dmul>
 800869e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086a2:	f7f8 fa2f 	bl	8000b04 <__aeabi_dcmpge>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	f000 8266 	beq.w	8008b78 <_dtoa_r+0x958>
 80086ac:	2400      	movs	r4, #0
 80086ae:	4625      	mov	r5, r4
 80086b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086b2:	4656      	mov	r6, sl
 80086b4:	ea6f 0803 	mvn.w	r8, r3
 80086b8:	2700      	movs	r7, #0
 80086ba:	4621      	mov	r1, r4
 80086bc:	4648      	mov	r0, r9
 80086be:	f000 fcbf 	bl	8009040 <_Bfree>
 80086c2:	2d00      	cmp	r5, #0
 80086c4:	f000 80bd 	beq.w	8008842 <_dtoa_r+0x622>
 80086c8:	b12f      	cbz	r7, 80086d6 <_dtoa_r+0x4b6>
 80086ca:	42af      	cmp	r7, r5
 80086cc:	d003      	beq.n	80086d6 <_dtoa_r+0x4b6>
 80086ce:	4639      	mov	r1, r7
 80086d0:	4648      	mov	r0, r9
 80086d2:	f000 fcb5 	bl	8009040 <_Bfree>
 80086d6:	4629      	mov	r1, r5
 80086d8:	4648      	mov	r0, r9
 80086da:	f000 fcb1 	bl	8009040 <_Bfree>
 80086de:	e0b0      	b.n	8008842 <_dtoa_r+0x622>
 80086e0:	07e2      	lsls	r2, r4, #31
 80086e2:	d505      	bpl.n	80086f0 <_dtoa_r+0x4d0>
 80086e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086e8:	f7f7 ff86 	bl	80005f8 <__aeabi_dmul>
 80086ec:	3601      	adds	r6, #1
 80086ee:	2301      	movs	r3, #1
 80086f0:	1064      	asrs	r4, r4, #1
 80086f2:	3508      	adds	r5, #8
 80086f4:	e762      	b.n	80085bc <_dtoa_r+0x39c>
 80086f6:	2602      	movs	r6, #2
 80086f8:	e765      	b.n	80085c6 <_dtoa_r+0x3a6>
 80086fa:	9c03      	ldr	r4, [sp, #12]
 80086fc:	46b8      	mov	r8, r7
 80086fe:	e784      	b.n	800860a <_dtoa_r+0x3ea>
 8008700:	4b27      	ldr	r3, [pc, #156]	@ (80087a0 <_dtoa_r+0x580>)
 8008702:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008704:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008708:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800870c:	4454      	add	r4, sl
 800870e:	2900      	cmp	r1, #0
 8008710:	d054      	beq.n	80087bc <_dtoa_r+0x59c>
 8008712:	4929      	ldr	r1, [pc, #164]	@ (80087b8 <_dtoa_r+0x598>)
 8008714:	2000      	movs	r0, #0
 8008716:	f7f8 f899 	bl	800084c <__aeabi_ddiv>
 800871a:	4633      	mov	r3, r6
 800871c:	462a      	mov	r2, r5
 800871e:	f7f7 fdb3 	bl	8000288 <__aeabi_dsub>
 8008722:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008726:	4656      	mov	r6, sl
 8008728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800872c:	f7f8 fa14 	bl	8000b58 <__aeabi_d2iz>
 8008730:	4605      	mov	r5, r0
 8008732:	f7f7 fef7 	bl	8000524 <__aeabi_i2d>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800873e:	f7f7 fda3 	bl	8000288 <__aeabi_dsub>
 8008742:	3530      	adds	r5, #48	@ 0x30
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800874c:	f806 5b01 	strb.w	r5, [r6], #1
 8008750:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008754:	f7f8 f9c2 	bl	8000adc <__aeabi_dcmplt>
 8008758:	2800      	cmp	r0, #0
 800875a:	d172      	bne.n	8008842 <_dtoa_r+0x622>
 800875c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008760:	4911      	ldr	r1, [pc, #68]	@ (80087a8 <_dtoa_r+0x588>)
 8008762:	2000      	movs	r0, #0
 8008764:	f7f7 fd90 	bl	8000288 <__aeabi_dsub>
 8008768:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800876c:	f7f8 f9b6 	bl	8000adc <__aeabi_dcmplt>
 8008770:	2800      	cmp	r0, #0
 8008772:	f040 80b4 	bne.w	80088de <_dtoa_r+0x6be>
 8008776:	42a6      	cmp	r6, r4
 8008778:	f43f af70 	beq.w	800865c <_dtoa_r+0x43c>
 800877c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008780:	4b0a      	ldr	r3, [pc, #40]	@ (80087ac <_dtoa_r+0x58c>)
 8008782:	2200      	movs	r2, #0
 8008784:	f7f7 ff38 	bl	80005f8 <__aeabi_dmul>
 8008788:	4b08      	ldr	r3, [pc, #32]	@ (80087ac <_dtoa_r+0x58c>)
 800878a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800878e:	2200      	movs	r2, #0
 8008790:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008794:	f7f7 ff30 	bl	80005f8 <__aeabi_dmul>
 8008798:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800879c:	e7c4      	b.n	8008728 <_dtoa_r+0x508>
 800879e:	bf00      	nop
 80087a0:	0800a3c8 	.word	0x0800a3c8
 80087a4:	0800a3a0 	.word	0x0800a3a0
 80087a8:	3ff00000 	.word	0x3ff00000
 80087ac:	40240000 	.word	0x40240000
 80087b0:	401c0000 	.word	0x401c0000
 80087b4:	40140000 	.word	0x40140000
 80087b8:	3fe00000 	.word	0x3fe00000
 80087bc:	4631      	mov	r1, r6
 80087be:	4628      	mov	r0, r5
 80087c0:	f7f7 ff1a 	bl	80005f8 <__aeabi_dmul>
 80087c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80087c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80087ca:	4656      	mov	r6, sl
 80087cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087d0:	f7f8 f9c2 	bl	8000b58 <__aeabi_d2iz>
 80087d4:	4605      	mov	r5, r0
 80087d6:	f7f7 fea5 	bl	8000524 <__aeabi_i2d>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087e2:	f7f7 fd51 	bl	8000288 <__aeabi_dsub>
 80087e6:	3530      	adds	r5, #48	@ 0x30
 80087e8:	f806 5b01 	strb.w	r5, [r6], #1
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	42a6      	cmp	r6, r4
 80087f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087f6:	f04f 0200 	mov.w	r2, #0
 80087fa:	d124      	bne.n	8008846 <_dtoa_r+0x626>
 80087fc:	4baf      	ldr	r3, [pc, #700]	@ (8008abc <_dtoa_r+0x89c>)
 80087fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008802:	f7f7 fd43 	bl	800028c <__adddf3>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800880e:	f7f8 f983 	bl	8000b18 <__aeabi_dcmpgt>
 8008812:	2800      	cmp	r0, #0
 8008814:	d163      	bne.n	80088de <_dtoa_r+0x6be>
 8008816:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800881a:	49a8      	ldr	r1, [pc, #672]	@ (8008abc <_dtoa_r+0x89c>)
 800881c:	2000      	movs	r0, #0
 800881e:	f7f7 fd33 	bl	8000288 <__aeabi_dsub>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800882a:	f7f8 f957 	bl	8000adc <__aeabi_dcmplt>
 800882e:	2800      	cmp	r0, #0
 8008830:	f43f af14 	beq.w	800865c <_dtoa_r+0x43c>
 8008834:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008836:	1e73      	subs	r3, r6, #1
 8008838:	9313      	str	r3, [sp, #76]	@ 0x4c
 800883a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800883e:	2b30      	cmp	r3, #48	@ 0x30
 8008840:	d0f8      	beq.n	8008834 <_dtoa_r+0x614>
 8008842:	4647      	mov	r7, r8
 8008844:	e03b      	b.n	80088be <_dtoa_r+0x69e>
 8008846:	4b9e      	ldr	r3, [pc, #632]	@ (8008ac0 <_dtoa_r+0x8a0>)
 8008848:	f7f7 fed6 	bl	80005f8 <__aeabi_dmul>
 800884c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008850:	e7bc      	b.n	80087cc <_dtoa_r+0x5ac>
 8008852:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008856:	4656      	mov	r6, sl
 8008858:	e9dd 2300 	ldrd	r2, r3, [sp]
 800885c:	4620      	mov	r0, r4
 800885e:	4629      	mov	r1, r5
 8008860:	f7f7 fff4 	bl	800084c <__aeabi_ddiv>
 8008864:	f7f8 f978 	bl	8000b58 <__aeabi_d2iz>
 8008868:	4680      	mov	r8, r0
 800886a:	f7f7 fe5b 	bl	8000524 <__aeabi_i2d>
 800886e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008872:	f7f7 fec1 	bl	80005f8 <__aeabi_dmul>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4620      	mov	r0, r4
 800887c:	4629      	mov	r1, r5
 800887e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008882:	f7f7 fd01 	bl	8000288 <__aeabi_dsub>
 8008886:	f806 4b01 	strb.w	r4, [r6], #1
 800888a:	9d03      	ldr	r5, [sp, #12]
 800888c:	eba6 040a 	sub.w	r4, r6, sl
 8008890:	42a5      	cmp	r5, r4
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	d133      	bne.n	8008900 <_dtoa_r+0x6e0>
 8008898:	f7f7 fcf8 	bl	800028c <__adddf3>
 800889c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088a0:	4604      	mov	r4, r0
 80088a2:	460d      	mov	r5, r1
 80088a4:	f7f8 f938 	bl	8000b18 <__aeabi_dcmpgt>
 80088a8:	b9c0      	cbnz	r0, 80088dc <_dtoa_r+0x6bc>
 80088aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088ae:	4620      	mov	r0, r4
 80088b0:	4629      	mov	r1, r5
 80088b2:	f7f8 f909 	bl	8000ac8 <__aeabi_dcmpeq>
 80088b6:	b110      	cbz	r0, 80088be <_dtoa_r+0x69e>
 80088b8:	f018 0f01 	tst.w	r8, #1
 80088bc:	d10e      	bne.n	80088dc <_dtoa_r+0x6bc>
 80088be:	9902      	ldr	r1, [sp, #8]
 80088c0:	4648      	mov	r0, r9
 80088c2:	f000 fbbd 	bl	8009040 <_Bfree>
 80088c6:	2300      	movs	r3, #0
 80088c8:	7033      	strb	r3, [r6, #0]
 80088ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80088cc:	3701      	adds	r7, #1
 80088ce:	601f      	str	r7, [r3, #0]
 80088d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 824b 	beq.w	8008d6e <_dtoa_r+0xb4e>
 80088d8:	601e      	str	r6, [r3, #0]
 80088da:	e248      	b.n	8008d6e <_dtoa_r+0xb4e>
 80088dc:	46b8      	mov	r8, r7
 80088de:	4633      	mov	r3, r6
 80088e0:	461e      	mov	r6, r3
 80088e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088e6:	2a39      	cmp	r2, #57	@ 0x39
 80088e8:	d106      	bne.n	80088f8 <_dtoa_r+0x6d8>
 80088ea:	459a      	cmp	sl, r3
 80088ec:	d1f8      	bne.n	80088e0 <_dtoa_r+0x6c0>
 80088ee:	2230      	movs	r2, #48	@ 0x30
 80088f0:	f108 0801 	add.w	r8, r8, #1
 80088f4:	f88a 2000 	strb.w	r2, [sl]
 80088f8:	781a      	ldrb	r2, [r3, #0]
 80088fa:	3201      	adds	r2, #1
 80088fc:	701a      	strb	r2, [r3, #0]
 80088fe:	e7a0      	b.n	8008842 <_dtoa_r+0x622>
 8008900:	4b6f      	ldr	r3, [pc, #444]	@ (8008ac0 <_dtoa_r+0x8a0>)
 8008902:	2200      	movs	r2, #0
 8008904:	f7f7 fe78 	bl	80005f8 <__aeabi_dmul>
 8008908:	2200      	movs	r2, #0
 800890a:	2300      	movs	r3, #0
 800890c:	4604      	mov	r4, r0
 800890e:	460d      	mov	r5, r1
 8008910:	f7f8 f8da 	bl	8000ac8 <__aeabi_dcmpeq>
 8008914:	2800      	cmp	r0, #0
 8008916:	d09f      	beq.n	8008858 <_dtoa_r+0x638>
 8008918:	e7d1      	b.n	80088be <_dtoa_r+0x69e>
 800891a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800891c:	2a00      	cmp	r2, #0
 800891e:	f000 80ea 	beq.w	8008af6 <_dtoa_r+0x8d6>
 8008922:	9a07      	ldr	r2, [sp, #28]
 8008924:	2a01      	cmp	r2, #1
 8008926:	f300 80cd 	bgt.w	8008ac4 <_dtoa_r+0x8a4>
 800892a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800892c:	2a00      	cmp	r2, #0
 800892e:	f000 80c1 	beq.w	8008ab4 <_dtoa_r+0x894>
 8008932:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008936:	9c08      	ldr	r4, [sp, #32]
 8008938:	9e00      	ldr	r6, [sp, #0]
 800893a:	9a00      	ldr	r2, [sp, #0]
 800893c:	441a      	add	r2, r3
 800893e:	9200      	str	r2, [sp, #0]
 8008940:	9a06      	ldr	r2, [sp, #24]
 8008942:	2101      	movs	r1, #1
 8008944:	441a      	add	r2, r3
 8008946:	4648      	mov	r0, r9
 8008948:	9206      	str	r2, [sp, #24]
 800894a:	f000 fc2d 	bl	80091a8 <__i2b>
 800894e:	4605      	mov	r5, r0
 8008950:	b166      	cbz	r6, 800896c <_dtoa_r+0x74c>
 8008952:	9b06      	ldr	r3, [sp, #24]
 8008954:	2b00      	cmp	r3, #0
 8008956:	dd09      	ble.n	800896c <_dtoa_r+0x74c>
 8008958:	42b3      	cmp	r3, r6
 800895a:	9a00      	ldr	r2, [sp, #0]
 800895c:	bfa8      	it	ge
 800895e:	4633      	movge	r3, r6
 8008960:	1ad2      	subs	r2, r2, r3
 8008962:	9200      	str	r2, [sp, #0]
 8008964:	9a06      	ldr	r2, [sp, #24]
 8008966:	1af6      	subs	r6, r6, r3
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	9306      	str	r3, [sp, #24]
 800896c:	9b08      	ldr	r3, [sp, #32]
 800896e:	b30b      	cbz	r3, 80089b4 <_dtoa_r+0x794>
 8008970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 80c6 	beq.w	8008b04 <_dtoa_r+0x8e4>
 8008978:	2c00      	cmp	r4, #0
 800897a:	f000 80c0 	beq.w	8008afe <_dtoa_r+0x8de>
 800897e:	4629      	mov	r1, r5
 8008980:	4622      	mov	r2, r4
 8008982:	4648      	mov	r0, r9
 8008984:	f000 fcc8 	bl	8009318 <__pow5mult>
 8008988:	9a02      	ldr	r2, [sp, #8]
 800898a:	4601      	mov	r1, r0
 800898c:	4605      	mov	r5, r0
 800898e:	4648      	mov	r0, r9
 8008990:	f000 fc20 	bl	80091d4 <__multiply>
 8008994:	9902      	ldr	r1, [sp, #8]
 8008996:	4680      	mov	r8, r0
 8008998:	4648      	mov	r0, r9
 800899a:	f000 fb51 	bl	8009040 <_Bfree>
 800899e:	9b08      	ldr	r3, [sp, #32]
 80089a0:	1b1b      	subs	r3, r3, r4
 80089a2:	9308      	str	r3, [sp, #32]
 80089a4:	f000 80b1 	beq.w	8008b0a <_dtoa_r+0x8ea>
 80089a8:	9a08      	ldr	r2, [sp, #32]
 80089aa:	4641      	mov	r1, r8
 80089ac:	4648      	mov	r0, r9
 80089ae:	f000 fcb3 	bl	8009318 <__pow5mult>
 80089b2:	9002      	str	r0, [sp, #8]
 80089b4:	2101      	movs	r1, #1
 80089b6:	4648      	mov	r0, r9
 80089b8:	f000 fbf6 	bl	80091a8 <__i2b>
 80089bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089be:	4604      	mov	r4, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 81d8 	beq.w	8008d76 <_dtoa_r+0xb56>
 80089c6:	461a      	mov	r2, r3
 80089c8:	4601      	mov	r1, r0
 80089ca:	4648      	mov	r0, r9
 80089cc:	f000 fca4 	bl	8009318 <__pow5mult>
 80089d0:	9b07      	ldr	r3, [sp, #28]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	4604      	mov	r4, r0
 80089d6:	f300 809f 	bgt.w	8008b18 <_dtoa_r+0x8f8>
 80089da:	9b04      	ldr	r3, [sp, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f040 8097 	bne.w	8008b10 <_dtoa_r+0x8f0>
 80089e2:	9b05      	ldr	r3, [sp, #20]
 80089e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f040 8093 	bne.w	8008b14 <_dtoa_r+0x8f4>
 80089ee:	9b05      	ldr	r3, [sp, #20]
 80089f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089f4:	0d1b      	lsrs	r3, r3, #20
 80089f6:	051b      	lsls	r3, r3, #20
 80089f8:	b133      	cbz	r3, 8008a08 <_dtoa_r+0x7e8>
 80089fa:	9b00      	ldr	r3, [sp, #0]
 80089fc:	3301      	adds	r3, #1
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	9b06      	ldr	r3, [sp, #24]
 8008a02:	3301      	adds	r3, #1
 8008a04:	9306      	str	r3, [sp, #24]
 8008a06:	2301      	movs	r3, #1
 8008a08:	9308      	str	r3, [sp, #32]
 8008a0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 81b8 	beq.w	8008d82 <_dtoa_r+0xb62>
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a18:	6918      	ldr	r0, [r3, #16]
 8008a1a:	f000 fb79 	bl	8009110 <__hi0bits>
 8008a1e:	f1c0 0020 	rsb	r0, r0, #32
 8008a22:	9b06      	ldr	r3, [sp, #24]
 8008a24:	4418      	add	r0, r3
 8008a26:	f010 001f 	ands.w	r0, r0, #31
 8008a2a:	f000 8082 	beq.w	8008b32 <_dtoa_r+0x912>
 8008a2e:	f1c0 0320 	rsb	r3, r0, #32
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	dd73      	ble.n	8008b1e <_dtoa_r+0x8fe>
 8008a36:	9b00      	ldr	r3, [sp, #0]
 8008a38:	f1c0 001c 	rsb	r0, r0, #28
 8008a3c:	4403      	add	r3, r0
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	9b06      	ldr	r3, [sp, #24]
 8008a42:	4403      	add	r3, r0
 8008a44:	4406      	add	r6, r0
 8008a46:	9306      	str	r3, [sp, #24]
 8008a48:	9b00      	ldr	r3, [sp, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	dd05      	ble.n	8008a5a <_dtoa_r+0x83a>
 8008a4e:	9902      	ldr	r1, [sp, #8]
 8008a50:	461a      	mov	r2, r3
 8008a52:	4648      	mov	r0, r9
 8008a54:	f000 fcba 	bl	80093cc <__lshift>
 8008a58:	9002      	str	r0, [sp, #8]
 8008a5a:	9b06      	ldr	r3, [sp, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	dd05      	ble.n	8008a6c <_dtoa_r+0x84c>
 8008a60:	4621      	mov	r1, r4
 8008a62:	461a      	mov	r2, r3
 8008a64:	4648      	mov	r0, r9
 8008a66:	f000 fcb1 	bl	80093cc <__lshift>
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d061      	beq.n	8008b36 <_dtoa_r+0x916>
 8008a72:	9802      	ldr	r0, [sp, #8]
 8008a74:	4621      	mov	r1, r4
 8008a76:	f000 fd15 	bl	80094a4 <__mcmp>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	da5b      	bge.n	8008b36 <_dtoa_r+0x916>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	9902      	ldr	r1, [sp, #8]
 8008a82:	220a      	movs	r2, #10
 8008a84:	4648      	mov	r0, r9
 8008a86:	f000 fafd 	bl	8009084 <__multadd>
 8008a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a8c:	9002      	str	r0, [sp, #8]
 8008a8e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f000 8177 	beq.w	8008d86 <_dtoa_r+0xb66>
 8008a98:	4629      	mov	r1, r5
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	220a      	movs	r2, #10
 8008a9e:	4648      	mov	r0, r9
 8008aa0:	f000 faf0 	bl	8009084 <__multadd>
 8008aa4:	f1bb 0f00 	cmp.w	fp, #0
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	dc6f      	bgt.n	8008b8c <_dtoa_r+0x96c>
 8008aac:	9b07      	ldr	r3, [sp, #28]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	dc49      	bgt.n	8008b46 <_dtoa_r+0x926>
 8008ab2:	e06b      	b.n	8008b8c <_dtoa_r+0x96c>
 8008ab4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008ab6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008aba:	e73c      	b.n	8008936 <_dtoa_r+0x716>
 8008abc:	3fe00000 	.word	0x3fe00000
 8008ac0:	40240000 	.word	0x40240000
 8008ac4:	9b03      	ldr	r3, [sp, #12]
 8008ac6:	1e5c      	subs	r4, r3, #1
 8008ac8:	9b08      	ldr	r3, [sp, #32]
 8008aca:	42a3      	cmp	r3, r4
 8008acc:	db09      	blt.n	8008ae2 <_dtoa_r+0x8c2>
 8008ace:	1b1c      	subs	r4, r3, r4
 8008ad0:	9b03      	ldr	r3, [sp, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f6bf af30 	bge.w	8008938 <_dtoa_r+0x718>
 8008ad8:	9b00      	ldr	r3, [sp, #0]
 8008ada:	9a03      	ldr	r2, [sp, #12]
 8008adc:	1a9e      	subs	r6, r3, r2
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e72b      	b.n	800893a <_dtoa_r+0x71a>
 8008ae2:	9b08      	ldr	r3, [sp, #32]
 8008ae4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ae6:	9408      	str	r4, [sp, #32]
 8008ae8:	1ae3      	subs	r3, r4, r3
 8008aea:	441a      	add	r2, r3
 8008aec:	9e00      	ldr	r6, [sp, #0]
 8008aee:	9b03      	ldr	r3, [sp, #12]
 8008af0:	920d      	str	r2, [sp, #52]	@ 0x34
 8008af2:	2400      	movs	r4, #0
 8008af4:	e721      	b.n	800893a <_dtoa_r+0x71a>
 8008af6:	9c08      	ldr	r4, [sp, #32]
 8008af8:	9e00      	ldr	r6, [sp, #0]
 8008afa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008afc:	e728      	b.n	8008950 <_dtoa_r+0x730>
 8008afe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008b02:	e751      	b.n	80089a8 <_dtoa_r+0x788>
 8008b04:	9a08      	ldr	r2, [sp, #32]
 8008b06:	9902      	ldr	r1, [sp, #8]
 8008b08:	e750      	b.n	80089ac <_dtoa_r+0x78c>
 8008b0a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008b0e:	e751      	b.n	80089b4 <_dtoa_r+0x794>
 8008b10:	2300      	movs	r3, #0
 8008b12:	e779      	b.n	8008a08 <_dtoa_r+0x7e8>
 8008b14:	9b04      	ldr	r3, [sp, #16]
 8008b16:	e777      	b.n	8008a08 <_dtoa_r+0x7e8>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	9308      	str	r3, [sp, #32]
 8008b1c:	e779      	b.n	8008a12 <_dtoa_r+0x7f2>
 8008b1e:	d093      	beq.n	8008a48 <_dtoa_r+0x828>
 8008b20:	9a00      	ldr	r2, [sp, #0]
 8008b22:	331c      	adds	r3, #28
 8008b24:	441a      	add	r2, r3
 8008b26:	9200      	str	r2, [sp, #0]
 8008b28:	9a06      	ldr	r2, [sp, #24]
 8008b2a:	441a      	add	r2, r3
 8008b2c:	441e      	add	r6, r3
 8008b2e:	9206      	str	r2, [sp, #24]
 8008b30:	e78a      	b.n	8008a48 <_dtoa_r+0x828>
 8008b32:	4603      	mov	r3, r0
 8008b34:	e7f4      	b.n	8008b20 <_dtoa_r+0x900>
 8008b36:	9b03      	ldr	r3, [sp, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	46b8      	mov	r8, r7
 8008b3c:	dc20      	bgt.n	8008b80 <_dtoa_r+0x960>
 8008b3e:	469b      	mov	fp, r3
 8008b40:	9b07      	ldr	r3, [sp, #28]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	dd1e      	ble.n	8008b84 <_dtoa_r+0x964>
 8008b46:	f1bb 0f00 	cmp.w	fp, #0
 8008b4a:	f47f adb1 	bne.w	80086b0 <_dtoa_r+0x490>
 8008b4e:	4621      	mov	r1, r4
 8008b50:	465b      	mov	r3, fp
 8008b52:	2205      	movs	r2, #5
 8008b54:	4648      	mov	r0, r9
 8008b56:	f000 fa95 	bl	8009084 <__multadd>
 8008b5a:	4601      	mov	r1, r0
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	9802      	ldr	r0, [sp, #8]
 8008b60:	f000 fca0 	bl	80094a4 <__mcmp>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	f77f ada3 	ble.w	80086b0 <_dtoa_r+0x490>
 8008b6a:	4656      	mov	r6, sl
 8008b6c:	2331      	movs	r3, #49	@ 0x31
 8008b6e:	f806 3b01 	strb.w	r3, [r6], #1
 8008b72:	f108 0801 	add.w	r8, r8, #1
 8008b76:	e59f      	b.n	80086b8 <_dtoa_r+0x498>
 8008b78:	9c03      	ldr	r4, [sp, #12]
 8008b7a:	46b8      	mov	r8, r7
 8008b7c:	4625      	mov	r5, r4
 8008b7e:	e7f4      	b.n	8008b6a <_dtoa_r+0x94a>
 8008b80:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 8101 	beq.w	8008d8e <_dtoa_r+0xb6e>
 8008b8c:	2e00      	cmp	r6, #0
 8008b8e:	dd05      	ble.n	8008b9c <_dtoa_r+0x97c>
 8008b90:	4629      	mov	r1, r5
 8008b92:	4632      	mov	r2, r6
 8008b94:	4648      	mov	r0, r9
 8008b96:	f000 fc19 	bl	80093cc <__lshift>
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	9b08      	ldr	r3, [sp, #32]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d05c      	beq.n	8008c5c <_dtoa_r+0xa3c>
 8008ba2:	6869      	ldr	r1, [r5, #4]
 8008ba4:	4648      	mov	r0, r9
 8008ba6:	f000 fa0b 	bl	8008fc0 <_Balloc>
 8008baa:	4606      	mov	r6, r0
 8008bac:	b928      	cbnz	r0, 8008bba <_dtoa_r+0x99a>
 8008bae:	4b82      	ldr	r3, [pc, #520]	@ (8008db8 <_dtoa_r+0xb98>)
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008bb6:	f7ff bb4a 	b.w	800824e <_dtoa_r+0x2e>
 8008bba:	692a      	ldr	r2, [r5, #16]
 8008bbc:	3202      	adds	r2, #2
 8008bbe:	0092      	lsls	r2, r2, #2
 8008bc0:	f105 010c 	add.w	r1, r5, #12
 8008bc4:	300c      	adds	r0, #12
 8008bc6:	f000 ffa3 	bl	8009b10 <memcpy>
 8008bca:	2201      	movs	r2, #1
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4648      	mov	r0, r9
 8008bd0:	f000 fbfc 	bl	80093cc <__lshift>
 8008bd4:	f10a 0301 	add.w	r3, sl, #1
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	eb0a 030b 	add.w	r3, sl, fp
 8008bde:	9308      	str	r3, [sp, #32]
 8008be0:	9b04      	ldr	r3, [sp, #16]
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	462f      	mov	r7, r5
 8008be8:	9306      	str	r3, [sp, #24]
 8008bea:	4605      	mov	r5, r0
 8008bec:	9b00      	ldr	r3, [sp, #0]
 8008bee:	9802      	ldr	r0, [sp, #8]
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	f103 3bff 	add.w	fp, r3, #4294967295
 8008bf6:	f7ff fa8a 	bl	800810e <quorem>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	3330      	adds	r3, #48	@ 0x30
 8008bfe:	9003      	str	r0, [sp, #12]
 8008c00:	4639      	mov	r1, r7
 8008c02:	9802      	ldr	r0, [sp, #8]
 8008c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c06:	f000 fc4d 	bl	80094a4 <__mcmp>
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	9004      	str	r0, [sp, #16]
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4648      	mov	r0, r9
 8008c12:	f000 fc63 	bl	80094dc <__mdiff>
 8008c16:	68c2      	ldr	r2, [r0, #12]
 8008c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	bb02      	cbnz	r2, 8008c60 <_dtoa_r+0xa40>
 8008c1e:	4601      	mov	r1, r0
 8008c20:	9802      	ldr	r0, [sp, #8]
 8008c22:	f000 fc3f 	bl	80094a4 <__mcmp>
 8008c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c28:	4602      	mov	r2, r0
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	4648      	mov	r0, r9
 8008c2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c32:	f000 fa05 	bl	8009040 <_Bfree>
 8008c36:	9b07      	ldr	r3, [sp, #28]
 8008c38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008c3a:	9e00      	ldr	r6, [sp, #0]
 8008c3c:	ea42 0103 	orr.w	r1, r2, r3
 8008c40:	9b06      	ldr	r3, [sp, #24]
 8008c42:	4319      	orrs	r1, r3
 8008c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c46:	d10d      	bne.n	8008c64 <_dtoa_r+0xa44>
 8008c48:	2b39      	cmp	r3, #57	@ 0x39
 8008c4a:	d027      	beq.n	8008c9c <_dtoa_r+0xa7c>
 8008c4c:	9a04      	ldr	r2, [sp, #16]
 8008c4e:	2a00      	cmp	r2, #0
 8008c50:	dd01      	ble.n	8008c56 <_dtoa_r+0xa36>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	3331      	adds	r3, #49	@ 0x31
 8008c56:	f88b 3000 	strb.w	r3, [fp]
 8008c5a:	e52e      	b.n	80086ba <_dtoa_r+0x49a>
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	e7b9      	b.n	8008bd4 <_dtoa_r+0x9b4>
 8008c60:	2201      	movs	r2, #1
 8008c62:	e7e2      	b.n	8008c2a <_dtoa_r+0xa0a>
 8008c64:	9904      	ldr	r1, [sp, #16]
 8008c66:	2900      	cmp	r1, #0
 8008c68:	db04      	blt.n	8008c74 <_dtoa_r+0xa54>
 8008c6a:	9807      	ldr	r0, [sp, #28]
 8008c6c:	4301      	orrs	r1, r0
 8008c6e:	9806      	ldr	r0, [sp, #24]
 8008c70:	4301      	orrs	r1, r0
 8008c72:	d120      	bne.n	8008cb6 <_dtoa_r+0xa96>
 8008c74:	2a00      	cmp	r2, #0
 8008c76:	ddee      	ble.n	8008c56 <_dtoa_r+0xa36>
 8008c78:	9902      	ldr	r1, [sp, #8]
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	4648      	mov	r0, r9
 8008c80:	f000 fba4 	bl	80093cc <__lshift>
 8008c84:	4621      	mov	r1, r4
 8008c86:	9002      	str	r0, [sp, #8]
 8008c88:	f000 fc0c 	bl	80094a4 <__mcmp>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	9b00      	ldr	r3, [sp, #0]
 8008c90:	dc02      	bgt.n	8008c98 <_dtoa_r+0xa78>
 8008c92:	d1e0      	bne.n	8008c56 <_dtoa_r+0xa36>
 8008c94:	07da      	lsls	r2, r3, #31
 8008c96:	d5de      	bpl.n	8008c56 <_dtoa_r+0xa36>
 8008c98:	2b39      	cmp	r3, #57	@ 0x39
 8008c9a:	d1da      	bne.n	8008c52 <_dtoa_r+0xa32>
 8008c9c:	2339      	movs	r3, #57	@ 0x39
 8008c9e:	f88b 3000 	strb.w	r3, [fp]
 8008ca2:	4633      	mov	r3, r6
 8008ca4:	461e      	mov	r6, r3
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008cac:	2a39      	cmp	r2, #57	@ 0x39
 8008cae:	d04e      	beq.n	8008d4e <_dtoa_r+0xb2e>
 8008cb0:	3201      	adds	r2, #1
 8008cb2:	701a      	strb	r2, [r3, #0]
 8008cb4:	e501      	b.n	80086ba <_dtoa_r+0x49a>
 8008cb6:	2a00      	cmp	r2, #0
 8008cb8:	dd03      	ble.n	8008cc2 <_dtoa_r+0xaa2>
 8008cba:	2b39      	cmp	r3, #57	@ 0x39
 8008cbc:	d0ee      	beq.n	8008c9c <_dtoa_r+0xa7c>
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	e7c9      	b.n	8008c56 <_dtoa_r+0xa36>
 8008cc2:	9a00      	ldr	r2, [sp, #0]
 8008cc4:	9908      	ldr	r1, [sp, #32]
 8008cc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008cca:	428a      	cmp	r2, r1
 8008ccc:	d028      	beq.n	8008d20 <_dtoa_r+0xb00>
 8008cce:	9902      	ldr	r1, [sp, #8]
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	220a      	movs	r2, #10
 8008cd4:	4648      	mov	r0, r9
 8008cd6:	f000 f9d5 	bl	8009084 <__multadd>
 8008cda:	42af      	cmp	r7, r5
 8008cdc:	9002      	str	r0, [sp, #8]
 8008cde:	f04f 0300 	mov.w	r3, #0
 8008ce2:	f04f 020a 	mov.w	r2, #10
 8008ce6:	4639      	mov	r1, r7
 8008ce8:	4648      	mov	r0, r9
 8008cea:	d107      	bne.n	8008cfc <_dtoa_r+0xadc>
 8008cec:	f000 f9ca 	bl	8009084 <__multadd>
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	9b00      	ldr	r3, [sp, #0]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	e777      	b.n	8008bec <_dtoa_r+0x9cc>
 8008cfc:	f000 f9c2 	bl	8009084 <__multadd>
 8008d00:	4629      	mov	r1, r5
 8008d02:	4607      	mov	r7, r0
 8008d04:	2300      	movs	r3, #0
 8008d06:	220a      	movs	r2, #10
 8008d08:	4648      	mov	r0, r9
 8008d0a:	f000 f9bb 	bl	8009084 <__multadd>
 8008d0e:	4605      	mov	r5, r0
 8008d10:	e7f0      	b.n	8008cf4 <_dtoa_r+0xad4>
 8008d12:	f1bb 0f00 	cmp.w	fp, #0
 8008d16:	bfcc      	ite	gt
 8008d18:	465e      	movgt	r6, fp
 8008d1a:	2601      	movle	r6, #1
 8008d1c:	4456      	add	r6, sl
 8008d1e:	2700      	movs	r7, #0
 8008d20:	9902      	ldr	r1, [sp, #8]
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	2201      	movs	r2, #1
 8008d26:	4648      	mov	r0, r9
 8008d28:	f000 fb50 	bl	80093cc <__lshift>
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	9002      	str	r0, [sp, #8]
 8008d30:	f000 fbb8 	bl	80094a4 <__mcmp>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	dcb4      	bgt.n	8008ca2 <_dtoa_r+0xa82>
 8008d38:	d102      	bne.n	8008d40 <_dtoa_r+0xb20>
 8008d3a:	9b00      	ldr	r3, [sp, #0]
 8008d3c:	07db      	lsls	r3, r3, #31
 8008d3e:	d4b0      	bmi.n	8008ca2 <_dtoa_r+0xa82>
 8008d40:	4633      	mov	r3, r6
 8008d42:	461e      	mov	r6, r3
 8008d44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d48:	2a30      	cmp	r2, #48	@ 0x30
 8008d4a:	d0fa      	beq.n	8008d42 <_dtoa_r+0xb22>
 8008d4c:	e4b5      	b.n	80086ba <_dtoa_r+0x49a>
 8008d4e:	459a      	cmp	sl, r3
 8008d50:	d1a8      	bne.n	8008ca4 <_dtoa_r+0xa84>
 8008d52:	2331      	movs	r3, #49	@ 0x31
 8008d54:	f108 0801 	add.w	r8, r8, #1
 8008d58:	f88a 3000 	strb.w	r3, [sl]
 8008d5c:	e4ad      	b.n	80086ba <_dtoa_r+0x49a>
 8008d5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008dbc <_dtoa_r+0xb9c>
 8008d64:	b11b      	cbz	r3, 8008d6e <_dtoa_r+0xb4e>
 8008d66:	f10a 0308 	add.w	r3, sl, #8
 8008d6a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	4650      	mov	r0, sl
 8008d70:	b017      	add	sp, #92	@ 0x5c
 8008d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d76:	9b07      	ldr	r3, [sp, #28]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	f77f ae2e 	ble.w	80089da <_dtoa_r+0x7ba>
 8008d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d80:	9308      	str	r3, [sp, #32]
 8008d82:	2001      	movs	r0, #1
 8008d84:	e64d      	b.n	8008a22 <_dtoa_r+0x802>
 8008d86:	f1bb 0f00 	cmp.w	fp, #0
 8008d8a:	f77f aed9 	ble.w	8008b40 <_dtoa_r+0x920>
 8008d8e:	4656      	mov	r6, sl
 8008d90:	9802      	ldr	r0, [sp, #8]
 8008d92:	4621      	mov	r1, r4
 8008d94:	f7ff f9bb 	bl	800810e <quorem>
 8008d98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008d9c:	f806 3b01 	strb.w	r3, [r6], #1
 8008da0:	eba6 020a 	sub.w	r2, r6, sl
 8008da4:	4593      	cmp	fp, r2
 8008da6:	ddb4      	ble.n	8008d12 <_dtoa_r+0xaf2>
 8008da8:	9902      	ldr	r1, [sp, #8]
 8008daa:	2300      	movs	r3, #0
 8008dac:	220a      	movs	r2, #10
 8008dae:	4648      	mov	r0, r9
 8008db0:	f000 f968 	bl	8009084 <__multadd>
 8008db4:	9002      	str	r0, [sp, #8]
 8008db6:	e7eb      	b.n	8008d90 <_dtoa_r+0xb70>
 8008db8:	0800a2d0 	.word	0x0800a2d0
 8008dbc:	0800a254 	.word	0x0800a254

08008dc0 <_free_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	d041      	beq.n	8008e4c <_free_r+0x8c>
 8008dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dcc:	1f0c      	subs	r4, r1, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bfb8      	it	lt
 8008dd2:	18e4      	addlt	r4, r4, r3
 8008dd4:	f000 f8e8 	bl	8008fa8 <__malloc_lock>
 8008dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e50 <_free_r+0x90>)
 8008dda:	6813      	ldr	r3, [r2, #0]
 8008ddc:	b933      	cbnz	r3, 8008dec <_free_r+0x2c>
 8008dde:	6063      	str	r3, [r4, #4]
 8008de0:	6014      	str	r4, [r2, #0]
 8008de2:	4628      	mov	r0, r5
 8008de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008de8:	f000 b8e4 	b.w	8008fb4 <__malloc_unlock>
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	d908      	bls.n	8008e02 <_free_r+0x42>
 8008df0:	6820      	ldr	r0, [r4, #0]
 8008df2:	1821      	adds	r1, r4, r0
 8008df4:	428b      	cmp	r3, r1
 8008df6:	bf01      	itttt	eq
 8008df8:	6819      	ldreq	r1, [r3, #0]
 8008dfa:	685b      	ldreq	r3, [r3, #4]
 8008dfc:	1809      	addeq	r1, r1, r0
 8008dfe:	6021      	streq	r1, [r4, #0]
 8008e00:	e7ed      	b.n	8008dde <_free_r+0x1e>
 8008e02:	461a      	mov	r2, r3
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	b10b      	cbz	r3, 8008e0c <_free_r+0x4c>
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	d9fa      	bls.n	8008e02 <_free_r+0x42>
 8008e0c:	6811      	ldr	r1, [r2, #0]
 8008e0e:	1850      	adds	r0, r2, r1
 8008e10:	42a0      	cmp	r0, r4
 8008e12:	d10b      	bne.n	8008e2c <_free_r+0x6c>
 8008e14:	6820      	ldr	r0, [r4, #0]
 8008e16:	4401      	add	r1, r0
 8008e18:	1850      	adds	r0, r2, r1
 8008e1a:	4283      	cmp	r3, r0
 8008e1c:	6011      	str	r1, [r2, #0]
 8008e1e:	d1e0      	bne.n	8008de2 <_free_r+0x22>
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	6053      	str	r3, [r2, #4]
 8008e26:	4408      	add	r0, r1
 8008e28:	6010      	str	r0, [r2, #0]
 8008e2a:	e7da      	b.n	8008de2 <_free_r+0x22>
 8008e2c:	d902      	bls.n	8008e34 <_free_r+0x74>
 8008e2e:	230c      	movs	r3, #12
 8008e30:	602b      	str	r3, [r5, #0]
 8008e32:	e7d6      	b.n	8008de2 <_free_r+0x22>
 8008e34:	6820      	ldr	r0, [r4, #0]
 8008e36:	1821      	adds	r1, r4, r0
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	bf04      	itt	eq
 8008e3c:	6819      	ldreq	r1, [r3, #0]
 8008e3e:	685b      	ldreq	r3, [r3, #4]
 8008e40:	6063      	str	r3, [r4, #4]
 8008e42:	bf04      	itt	eq
 8008e44:	1809      	addeq	r1, r1, r0
 8008e46:	6021      	streq	r1, [r4, #0]
 8008e48:	6054      	str	r4, [r2, #4]
 8008e4a:	e7ca      	b.n	8008de2 <_free_r+0x22>
 8008e4c:	bd38      	pop	{r3, r4, r5, pc}
 8008e4e:	bf00      	nop
 8008e50:	20000500 	.word	0x20000500

08008e54 <malloc>:
 8008e54:	4b02      	ldr	r3, [pc, #8]	@ (8008e60 <malloc+0xc>)
 8008e56:	4601      	mov	r1, r0
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	f000 b825 	b.w	8008ea8 <_malloc_r>
 8008e5e:	bf00      	nop
 8008e60:	2000001c 	.word	0x2000001c

08008e64 <sbrk_aligned>:
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	4e0f      	ldr	r6, [pc, #60]	@ (8008ea4 <sbrk_aligned+0x40>)
 8008e68:	460c      	mov	r4, r1
 8008e6a:	6831      	ldr	r1, [r6, #0]
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	b911      	cbnz	r1, 8008e76 <sbrk_aligned+0x12>
 8008e70:	f000 fe3e 	bl	8009af0 <_sbrk_r>
 8008e74:	6030      	str	r0, [r6, #0]
 8008e76:	4621      	mov	r1, r4
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f000 fe39 	bl	8009af0 <_sbrk_r>
 8008e7e:	1c43      	adds	r3, r0, #1
 8008e80:	d103      	bne.n	8008e8a <sbrk_aligned+0x26>
 8008e82:	f04f 34ff 	mov.w	r4, #4294967295
 8008e86:	4620      	mov	r0, r4
 8008e88:	bd70      	pop	{r4, r5, r6, pc}
 8008e8a:	1cc4      	adds	r4, r0, #3
 8008e8c:	f024 0403 	bic.w	r4, r4, #3
 8008e90:	42a0      	cmp	r0, r4
 8008e92:	d0f8      	beq.n	8008e86 <sbrk_aligned+0x22>
 8008e94:	1a21      	subs	r1, r4, r0
 8008e96:	4628      	mov	r0, r5
 8008e98:	f000 fe2a 	bl	8009af0 <_sbrk_r>
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d1f2      	bne.n	8008e86 <sbrk_aligned+0x22>
 8008ea0:	e7ef      	b.n	8008e82 <sbrk_aligned+0x1e>
 8008ea2:	bf00      	nop
 8008ea4:	200004fc 	.word	0x200004fc

08008ea8 <_malloc_r>:
 8008ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eac:	1ccd      	adds	r5, r1, #3
 8008eae:	f025 0503 	bic.w	r5, r5, #3
 8008eb2:	3508      	adds	r5, #8
 8008eb4:	2d0c      	cmp	r5, #12
 8008eb6:	bf38      	it	cc
 8008eb8:	250c      	movcc	r5, #12
 8008eba:	2d00      	cmp	r5, #0
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	db01      	blt.n	8008ec4 <_malloc_r+0x1c>
 8008ec0:	42a9      	cmp	r1, r5
 8008ec2:	d904      	bls.n	8008ece <_malloc_r+0x26>
 8008ec4:	230c      	movs	r3, #12
 8008ec6:	6033      	str	r3, [r6, #0]
 8008ec8:	2000      	movs	r0, #0
 8008eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ece:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008fa4 <_malloc_r+0xfc>
 8008ed2:	f000 f869 	bl	8008fa8 <__malloc_lock>
 8008ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8008eda:	461c      	mov	r4, r3
 8008edc:	bb44      	cbnz	r4, 8008f30 <_malloc_r+0x88>
 8008ede:	4629      	mov	r1, r5
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f7ff ffbf 	bl	8008e64 <sbrk_aligned>
 8008ee6:	1c43      	adds	r3, r0, #1
 8008ee8:	4604      	mov	r4, r0
 8008eea:	d158      	bne.n	8008f9e <_malloc_r+0xf6>
 8008eec:	f8d8 4000 	ldr.w	r4, [r8]
 8008ef0:	4627      	mov	r7, r4
 8008ef2:	2f00      	cmp	r7, #0
 8008ef4:	d143      	bne.n	8008f7e <_malloc_r+0xd6>
 8008ef6:	2c00      	cmp	r4, #0
 8008ef8:	d04b      	beq.n	8008f92 <_malloc_r+0xea>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	4639      	mov	r1, r7
 8008efe:	4630      	mov	r0, r6
 8008f00:	eb04 0903 	add.w	r9, r4, r3
 8008f04:	f000 fdf4 	bl	8009af0 <_sbrk_r>
 8008f08:	4581      	cmp	r9, r0
 8008f0a:	d142      	bne.n	8008f92 <_malloc_r+0xea>
 8008f0c:	6821      	ldr	r1, [r4, #0]
 8008f0e:	1a6d      	subs	r5, r5, r1
 8008f10:	4629      	mov	r1, r5
 8008f12:	4630      	mov	r0, r6
 8008f14:	f7ff ffa6 	bl	8008e64 <sbrk_aligned>
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d03a      	beq.n	8008f92 <_malloc_r+0xea>
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	442b      	add	r3, r5
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	f8d8 3000 	ldr.w	r3, [r8]
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	bb62      	cbnz	r2, 8008f84 <_malloc_r+0xdc>
 8008f2a:	f8c8 7000 	str.w	r7, [r8]
 8008f2e:	e00f      	b.n	8008f50 <_malloc_r+0xa8>
 8008f30:	6822      	ldr	r2, [r4, #0]
 8008f32:	1b52      	subs	r2, r2, r5
 8008f34:	d420      	bmi.n	8008f78 <_malloc_r+0xd0>
 8008f36:	2a0b      	cmp	r2, #11
 8008f38:	d917      	bls.n	8008f6a <_malloc_r+0xc2>
 8008f3a:	1961      	adds	r1, r4, r5
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	6025      	str	r5, [r4, #0]
 8008f40:	bf18      	it	ne
 8008f42:	6059      	strne	r1, [r3, #4]
 8008f44:	6863      	ldr	r3, [r4, #4]
 8008f46:	bf08      	it	eq
 8008f48:	f8c8 1000 	streq.w	r1, [r8]
 8008f4c:	5162      	str	r2, [r4, r5]
 8008f4e:	604b      	str	r3, [r1, #4]
 8008f50:	4630      	mov	r0, r6
 8008f52:	f000 f82f 	bl	8008fb4 <__malloc_unlock>
 8008f56:	f104 000b 	add.w	r0, r4, #11
 8008f5a:	1d23      	adds	r3, r4, #4
 8008f5c:	f020 0007 	bic.w	r0, r0, #7
 8008f60:	1ac2      	subs	r2, r0, r3
 8008f62:	bf1c      	itt	ne
 8008f64:	1a1b      	subne	r3, r3, r0
 8008f66:	50a3      	strne	r3, [r4, r2]
 8008f68:	e7af      	b.n	8008eca <_malloc_r+0x22>
 8008f6a:	6862      	ldr	r2, [r4, #4]
 8008f6c:	42a3      	cmp	r3, r4
 8008f6e:	bf0c      	ite	eq
 8008f70:	f8c8 2000 	streq.w	r2, [r8]
 8008f74:	605a      	strne	r2, [r3, #4]
 8008f76:	e7eb      	b.n	8008f50 <_malloc_r+0xa8>
 8008f78:	4623      	mov	r3, r4
 8008f7a:	6864      	ldr	r4, [r4, #4]
 8008f7c:	e7ae      	b.n	8008edc <_malloc_r+0x34>
 8008f7e:	463c      	mov	r4, r7
 8008f80:	687f      	ldr	r7, [r7, #4]
 8008f82:	e7b6      	b.n	8008ef2 <_malloc_r+0x4a>
 8008f84:	461a      	mov	r2, r3
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	42a3      	cmp	r3, r4
 8008f8a:	d1fb      	bne.n	8008f84 <_malloc_r+0xdc>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	6053      	str	r3, [r2, #4]
 8008f90:	e7de      	b.n	8008f50 <_malloc_r+0xa8>
 8008f92:	230c      	movs	r3, #12
 8008f94:	6033      	str	r3, [r6, #0]
 8008f96:	4630      	mov	r0, r6
 8008f98:	f000 f80c 	bl	8008fb4 <__malloc_unlock>
 8008f9c:	e794      	b.n	8008ec8 <_malloc_r+0x20>
 8008f9e:	6005      	str	r5, [r0, #0]
 8008fa0:	e7d6      	b.n	8008f50 <_malloc_r+0xa8>
 8008fa2:	bf00      	nop
 8008fa4:	20000500 	.word	0x20000500

08008fa8 <__malloc_lock>:
 8008fa8:	4801      	ldr	r0, [pc, #4]	@ (8008fb0 <__malloc_lock+0x8>)
 8008faa:	f7ff b8ae 	b.w	800810a <__retarget_lock_acquire_recursive>
 8008fae:	bf00      	nop
 8008fb0:	200004f8 	.word	0x200004f8

08008fb4 <__malloc_unlock>:
 8008fb4:	4801      	ldr	r0, [pc, #4]	@ (8008fbc <__malloc_unlock+0x8>)
 8008fb6:	f7ff b8a9 	b.w	800810c <__retarget_lock_release_recursive>
 8008fba:	bf00      	nop
 8008fbc:	200004f8 	.word	0x200004f8

08008fc0 <_Balloc>:
 8008fc0:	b570      	push	{r4, r5, r6, lr}
 8008fc2:	69c6      	ldr	r6, [r0, #28]
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	460d      	mov	r5, r1
 8008fc8:	b976      	cbnz	r6, 8008fe8 <_Balloc+0x28>
 8008fca:	2010      	movs	r0, #16
 8008fcc:	f7ff ff42 	bl	8008e54 <malloc>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	61e0      	str	r0, [r4, #28]
 8008fd4:	b920      	cbnz	r0, 8008fe0 <_Balloc+0x20>
 8008fd6:	4b18      	ldr	r3, [pc, #96]	@ (8009038 <_Balloc+0x78>)
 8008fd8:	4818      	ldr	r0, [pc, #96]	@ (800903c <_Balloc+0x7c>)
 8008fda:	216b      	movs	r1, #107	@ 0x6b
 8008fdc:	f000 fda6 	bl	8009b2c <__assert_func>
 8008fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fe4:	6006      	str	r6, [r0, #0]
 8008fe6:	60c6      	str	r6, [r0, #12]
 8008fe8:	69e6      	ldr	r6, [r4, #28]
 8008fea:	68f3      	ldr	r3, [r6, #12]
 8008fec:	b183      	cbz	r3, 8009010 <_Balloc+0x50>
 8008fee:	69e3      	ldr	r3, [r4, #28]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ff6:	b9b8      	cbnz	r0, 8009028 <_Balloc+0x68>
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	fa01 f605 	lsl.w	r6, r1, r5
 8008ffe:	1d72      	adds	r2, r6, #5
 8009000:	0092      	lsls	r2, r2, #2
 8009002:	4620      	mov	r0, r4
 8009004:	f000 fdb0 	bl	8009b68 <_calloc_r>
 8009008:	b160      	cbz	r0, 8009024 <_Balloc+0x64>
 800900a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800900e:	e00e      	b.n	800902e <_Balloc+0x6e>
 8009010:	2221      	movs	r2, #33	@ 0x21
 8009012:	2104      	movs	r1, #4
 8009014:	4620      	mov	r0, r4
 8009016:	f000 fda7 	bl	8009b68 <_calloc_r>
 800901a:	69e3      	ldr	r3, [r4, #28]
 800901c:	60f0      	str	r0, [r6, #12]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1e4      	bne.n	8008fee <_Balloc+0x2e>
 8009024:	2000      	movs	r0, #0
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	6802      	ldr	r2, [r0, #0]
 800902a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800902e:	2300      	movs	r3, #0
 8009030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009034:	e7f7      	b.n	8009026 <_Balloc+0x66>
 8009036:	bf00      	nop
 8009038:	0800a261 	.word	0x0800a261
 800903c:	0800a2e1 	.word	0x0800a2e1

08009040 <_Bfree>:
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	69c6      	ldr	r6, [r0, #28]
 8009044:	4605      	mov	r5, r0
 8009046:	460c      	mov	r4, r1
 8009048:	b976      	cbnz	r6, 8009068 <_Bfree+0x28>
 800904a:	2010      	movs	r0, #16
 800904c:	f7ff ff02 	bl	8008e54 <malloc>
 8009050:	4602      	mov	r2, r0
 8009052:	61e8      	str	r0, [r5, #28]
 8009054:	b920      	cbnz	r0, 8009060 <_Bfree+0x20>
 8009056:	4b09      	ldr	r3, [pc, #36]	@ (800907c <_Bfree+0x3c>)
 8009058:	4809      	ldr	r0, [pc, #36]	@ (8009080 <_Bfree+0x40>)
 800905a:	218f      	movs	r1, #143	@ 0x8f
 800905c:	f000 fd66 	bl	8009b2c <__assert_func>
 8009060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009064:	6006      	str	r6, [r0, #0]
 8009066:	60c6      	str	r6, [r0, #12]
 8009068:	b13c      	cbz	r4, 800907a <_Bfree+0x3a>
 800906a:	69eb      	ldr	r3, [r5, #28]
 800906c:	6862      	ldr	r2, [r4, #4]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009074:	6021      	str	r1, [r4, #0]
 8009076:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800907a:	bd70      	pop	{r4, r5, r6, pc}
 800907c:	0800a261 	.word	0x0800a261
 8009080:	0800a2e1 	.word	0x0800a2e1

08009084 <__multadd>:
 8009084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009088:	690d      	ldr	r5, [r1, #16]
 800908a:	4607      	mov	r7, r0
 800908c:	460c      	mov	r4, r1
 800908e:	461e      	mov	r6, r3
 8009090:	f101 0c14 	add.w	ip, r1, #20
 8009094:	2000      	movs	r0, #0
 8009096:	f8dc 3000 	ldr.w	r3, [ip]
 800909a:	b299      	uxth	r1, r3
 800909c:	fb02 6101 	mla	r1, r2, r1, r6
 80090a0:	0c1e      	lsrs	r6, r3, #16
 80090a2:	0c0b      	lsrs	r3, r1, #16
 80090a4:	fb02 3306 	mla	r3, r2, r6, r3
 80090a8:	b289      	uxth	r1, r1
 80090aa:	3001      	adds	r0, #1
 80090ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090b0:	4285      	cmp	r5, r0
 80090b2:	f84c 1b04 	str.w	r1, [ip], #4
 80090b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090ba:	dcec      	bgt.n	8009096 <__multadd+0x12>
 80090bc:	b30e      	cbz	r6, 8009102 <__multadd+0x7e>
 80090be:	68a3      	ldr	r3, [r4, #8]
 80090c0:	42ab      	cmp	r3, r5
 80090c2:	dc19      	bgt.n	80090f8 <__multadd+0x74>
 80090c4:	6861      	ldr	r1, [r4, #4]
 80090c6:	4638      	mov	r0, r7
 80090c8:	3101      	adds	r1, #1
 80090ca:	f7ff ff79 	bl	8008fc0 <_Balloc>
 80090ce:	4680      	mov	r8, r0
 80090d0:	b928      	cbnz	r0, 80090de <__multadd+0x5a>
 80090d2:	4602      	mov	r2, r0
 80090d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009108 <__multadd+0x84>)
 80090d6:	480d      	ldr	r0, [pc, #52]	@ (800910c <__multadd+0x88>)
 80090d8:	21ba      	movs	r1, #186	@ 0xba
 80090da:	f000 fd27 	bl	8009b2c <__assert_func>
 80090de:	6922      	ldr	r2, [r4, #16]
 80090e0:	3202      	adds	r2, #2
 80090e2:	f104 010c 	add.w	r1, r4, #12
 80090e6:	0092      	lsls	r2, r2, #2
 80090e8:	300c      	adds	r0, #12
 80090ea:	f000 fd11 	bl	8009b10 <memcpy>
 80090ee:	4621      	mov	r1, r4
 80090f0:	4638      	mov	r0, r7
 80090f2:	f7ff ffa5 	bl	8009040 <_Bfree>
 80090f6:	4644      	mov	r4, r8
 80090f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090fc:	3501      	adds	r5, #1
 80090fe:	615e      	str	r6, [r3, #20]
 8009100:	6125      	str	r5, [r4, #16]
 8009102:	4620      	mov	r0, r4
 8009104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009108:	0800a2d0 	.word	0x0800a2d0
 800910c:	0800a2e1 	.word	0x0800a2e1

08009110 <__hi0bits>:
 8009110:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009114:	4603      	mov	r3, r0
 8009116:	bf36      	itet	cc
 8009118:	0403      	lslcc	r3, r0, #16
 800911a:	2000      	movcs	r0, #0
 800911c:	2010      	movcc	r0, #16
 800911e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009122:	bf3c      	itt	cc
 8009124:	021b      	lslcc	r3, r3, #8
 8009126:	3008      	addcc	r0, #8
 8009128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800912c:	bf3c      	itt	cc
 800912e:	011b      	lslcc	r3, r3, #4
 8009130:	3004      	addcc	r0, #4
 8009132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009136:	bf3c      	itt	cc
 8009138:	009b      	lslcc	r3, r3, #2
 800913a:	3002      	addcc	r0, #2
 800913c:	2b00      	cmp	r3, #0
 800913e:	db05      	blt.n	800914c <__hi0bits+0x3c>
 8009140:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009144:	f100 0001 	add.w	r0, r0, #1
 8009148:	bf08      	it	eq
 800914a:	2020      	moveq	r0, #32
 800914c:	4770      	bx	lr

0800914e <__lo0bits>:
 800914e:	6803      	ldr	r3, [r0, #0]
 8009150:	4602      	mov	r2, r0
 8009152:	f013 0007 	ands.w	r0, r3, #7
 8009156:	d00b      	beq.n	8009170 <__lo0bits+0x22>
 8009158:	07d9      	lsls	r1, r3, #31
 800915a:	d421      	bmi.n	80091a0 <__lo0bits+0x52>
 800915c:	0798      	lsls	r0, r3, #30
 800915e:	bf49      	itett	mi
 8009160:	085b      	lsrmi	r3, r3, #1
 8009162:	089b      	lsrpl	r3, r3, #2
 8009164:	2001      	movmi	r0, #1
 8009166:	6013      	strmi	r3, [r2, #0]
 8009168:	bf5c      	itt	pl
 800916a:	6013      	strpl	r3, [r2, #0]
 800916c:	2002      	movpl	r0, #2
 800916e:	4770      	bx	lr
 8009170:	b299      	uxth	r1, r3
 8009172:	b909      	cbnz	r1, 8009178 <__lo0bits+0x2a>
 8009174:	0c1b      	lsrs	r3, r3, #16
 8009176:	2010      	movs	r0, #16
 8009178:	b2d9      	uxtb	r1, r3
 800917a:	b909      	cbnz	r1, 8009180 <__lo0bits+0x32>
 800917c:	3008      	adds	r0, #8
 800917e:	0a1b      	lsrs	r3, r3, #8
 8009180:	0719      	lsls	r1, r3, #28
 8009182:	bf04      	itt	eq
 8009184:	091b      	lsreq	r3, r3, #4
 8009186:	3004      	addeq	r0, #4
 8009188:	0799      	lsls	r1, r3, #30
 800918a:	bf04      	itt	eq
 800918c:	089b      	lsreq	r3, r3, #2
 800918e:	3002      	addeq	r0, #2
 8009190:	07d9      	lsls	r1, r3, #31
 8009192:	d403      	bmi.n	800919c <__lo0bits+0x4e>
 8009194:	085b      	lsrs	r3, r3, #1
 8009196:	f100 0001 	add.w	r0, r0, #1
 800919a:	d003      	beq.n	80091a4 <__lo0bits+0x56>
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	4770      	bx	lr
 80091a0:	2000      	movs	r0, #0
 80091a2:	4770      	bx	lr
 80091a4:	2020      	movs	r0, #32
 80091a6:	4770      	bx	lr

080091a8 <__i2b>:
 80091a8:	b510      	push	{r4, lr}
 80091aa:	460c      	mov	r4, r1
 80091ac:	2101      	movs	r1, #1
 80091ae:	f7ff ff07 	bl	8008fc0 <_Balloc>
 80091b2:	4602      	mov	r2, r0
 80091b4:	b928      	cbnz	r0, 80091c2 <__i2b+0x1a>
 80091b6:	4b05      	ldr	r3, [pc, #20]	@ (80091cc <__i2b+0x24>)
 80091b8:	4805      	ldr	r0, [pc, #20]	@ (80091d0 <__i2b+0x28>)
 80091ba:	f240 1145 	movw	r1, #325	@ 0x145
 80091be:	f000 fcb5 	bl	8009b2c <__assert_func>
 80091c2:	2301      	movs	r3, #1
 80091c4:	6144      	str	r4, [r0, #20]
 80091c6:	6103      	str	r3, [r0, #16]
 80091c8:	bd10      	pop	{r4, pc}
 80091ca:	bf00      	nop
 80091cc:	0800a2d0 	.word	0x0800a2d0
 80091d0:	0800a2e1 	.word	0x0800a2e1

080091d4 <__multiply>:
 80091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	4617      	mov	r7, r2
 80091da:	690a      	ldr	r2, [r1, #16]
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	429a      	cmp	r2, r3
 80091e0:	bfa8      	it	ge
 80091e2:	463b      	movge	r3, r7
 80091e4:	4689      	mov	r9, r1
 80091e6:	bfa4      	itt	ge
 80091e8:	460f      	movge	r7, r1
 80091ea:	4699      	movge	r9, r3
 80091ec:	693d      	ldr	r5, [r7, #16]
 80091ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	eb05 060a 	add.w	r6, r5, sl
 80091fa:	42b3      	cmp	r3, r6
 80091fc:	b085      	sub	sp, #20
 80091fe:	bfb8      	it	lt
 8009200:	3101      	addlt	r1, #1
 8009202:	f7ff fedd 	bl	8008fc0 <_Balloc>
 8009206:	b930      	cbnz	r0, 8009216 <__multiply+0x42>
 8009208:	4602      	mov	r2, r0
 800920a:	4b41      	ldr	r3, [pc, #260]	@ (8009310 <__multiply+0x13c>)
 800920c:	4841      	ldr	r0, [pc, #260]	@ (8009314 <__multiply+0x140>)
 800920e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009212:	f000 fc8b 	bl	8009b2c <__assert_func>
 8009216:	f100 0414 	add.w	r4, r0, #20
 800921a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800921e:	4623      	mov	r3, r4
 8009220:	2200      	movs	r2, #0
 8009222:	4573      	cmp	r3, lr
 8009224:	d320      	bcc.n	8009268 <__multiply+0x94>
 8009226:	f107 0814 	add.w	r8, r7, #20
 800922a:	f109 0114 	add.w	r1, r9, #20
 800922e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009232:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009236:	9302      	str	r3, [sp, #8]
 8009238:	1beb      	subs	r3, r5, r7
 800923a:	3b15      	subs	r3, #21
 800923c:	f023 0303 	bic.w	r3, r3, #3
 8009240:	3304      	adds	r3, #4
 8009242:	3715      	adds	r7, #21
 8009244:	42bd      	cmp	r5, r7
 8009246:	bf38      	it	cc
 8009248:	2304      	movcc	r3, #4
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	9b02      	ldr	r3, [sp, #8]
 800924e:	9103      	str	r1, [sp, #12]
 8009250:	428b      	cmp	r3, r1
 8009252:	d80c      	bhi.n	800926e <__multiply+0x9a>
 8009254:	2e00      	cmp	r6, #0
 8009256:	dd03      	ble.n	8009260 <__multiply+0x8c>
 8009258:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800925c:	2b00      	cmp	r3, #0
 800925e:	d055      	beq.n	800930c <__multiply+0x138>
 8009260:	6106      	str	r6, [r0, #16]
 8009262:	b005      	add	sp, #20
 8009264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009268:	f843 2b04 	str.w	r2, [r3], #4
 800926c:	e7d9      	b.n	8009222 <__multiply+0x4e>
 800926e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009272:	f1ba 0f00 	cmp.w	sl, #0
 8009276:	d01f      	beq.n	80092b8 <__multiply+0xe4>
 8009278:	46c4      	mov	ip, r8
 800927a:	46a1      	mov	r9, r4
 800927c:	2700      	movs	r7, #0
 800927e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009282:	f8d9 3000 	ldr.w	r3, [r9]
 8009286:	fa1f fb82 	uxth.w	fp, r2
 800928a:	b29b      	uxth	r3, r3
 800928c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009290:	443b      	add	r3, r7
 8009292:	f8d9 7000 	ldr.w	r7, [r9]
 8009296:	0c12      	lsrs	r2, r2, #16
 8009298:	0c3f      	lsrs	r7, r7, #16
 800929a:	fb0a 7202 	mla	r2, sl, r2, r7
 800929e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092a8:	4565      	cmp	r5, ip
 80092aa:	f849 3b04 	str.w	r3, [r9], #4
 80092ae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80092b2:	d8e4      	bhi.n	800927e <__multiply+0xaa>
 80092b4:	9b01      	ldr	r3, [sp, #4]
 80092b6:	50e7      	str	r7, [r4, r3]
 80092b8:	9b03      	ldr	r3, [sp, #12]
 80092ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80092be:	3104      	adds	r1, #4
 80092c0:	f1b9 0f00 	cmp.w	r9, #0
 80092c4:	d020      	beq.n	8009308 <__multiply+0x134>
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	4647      	mov	r7, r8
 80092ca:	46a4      	mov	ip, r4
 80092cc:	f04f 0a00 	mov.w	sl, #0
 80092d0:	f8b7 b000 	ldrh.w	fp, [r7]
 80092d4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80092d8:	fb09 220b 	mla	r2, r9, fp, r2
 80092dc:	4452      	add	r2, sl
 80092de:	b29b      	uxth	r3, r3
 80092e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092e4:	f84c 3b04 	str.w	r3, [ip], #4
 80092e8:	f857 3b04 	ldr.w	r3, [r7], #4
 80092ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092f0:	f8bc 3000 	ldrh.w	r3, [ip]
 80092f4:	fb09 330a 	mla	r3, r9, sl, r3
 80092f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80092fc:	42bd      	cmp	r5, r7
 80092fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009302:	d8e5      	bhi.n	80092d0 <__multiply+0xfc>
 8009304:	9a01      	ldr	r2, [sp, #4]
 8009306:	50a3      	str	r3, [r4, r2]
 8009308:	3404      	adds	r4, #4
 800930a:	e79f      	b.n	800924c <__multiply+0x78>
 800930c:	3e01      	subs	r6, #1
 800930e:	e7a1      	b.n	8009254 <__multiply+0x80>
 8009310:	0800a2d0 	.word	0x0800a2d0
 8009314:	0800a2e1 	.word	0x0800a2e1

08009318 <__pow5mult>:
 8009318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800931c:	4615      	mov	r5, r2
 800931e:	f012 0203 	ands.w	r2, r2, #3
 8009322:	4607      	mov	r7, r0
 8009324:	460e      	mov	r6, r1
 8009326:	d007      	beq.n	8009338 <__pow5mult+0x20>
 8009328:	4c25      	ldr	r4, [pc, #148]	@ (80093c0 <__pow5mult+0xa8>)
 800932a:	3a01      	subs	r2, #1
 800932c:	2300      	movs	r3, #0
 800932e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009332:	f7ff fea7 	bl	8009084 <__multadd>
 8009336:	4606      	mov	r6, r0
 8009338:	10ad      	asrs	r5, r5, #2
 800933a:	d03d      	beq.n	80093b8 <__pow5mult+0xa0>
 800933c:	69fc      	ldr	r4, [r7, #28]
 800933e:	b97c      	cbnz	r4, 8009360 <__pow5mult+0x48>
 8009340:	2010      	movs	r0, #16
 8009342:	f7ff fd87 	bl	8008e54 <malloc>
 8009346:	4602      	mov	r2, r0
 8009348:	61f8      	str	r0, [r7, #28]
 800934a:	b928      	cbnz	r0, 8009358 <__pow5mult+0x40>
 800934c:	4b1d      	ldr	r3, [pc, #116]	@ (80093c4 <__pow5mult+0xac>)
 800934e:	481e      	ldr	r0, [pc, #120]	@ (80093c8 <__pow5mult+0xb0>)
 8009350:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009354:	f000 fbea 	bl	8009b2c <__assert_func>
 8009358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800935c:	6004      	str	r4, [r0, #0]
 800935e:	60c4      	str	r4, [r0, #12]
 8009360:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009368:	b94c      	cbnz	r4, 800937e <__pow5mult+0x66>
 800936a:	f240 2171 	movw	r1, #625	@ 0x271
 800936e:	4638      	mov	r0, r7
 8009370:	f7ff ff1a 	bl	80091a8 <__i2b>
 8009374:	2300      	movs	r3, #0
 8009376:	f8c8 0008 	str.w	r0, [r8, #8]
 800937a:	4604      	mov	r4, r0
 800937c:	6003      	str	r3, [r0, #0]
 800937e:	f04f 0900 	mov.w	r9, #0
 8009382:	07eb      	lsls	r3, r5, #31
 8009384:	d50a      	bpl.n	800939c <__pow5mult+0x84>
 8009386:	4631      	mov	r1, r6
 8009388:	4622      	mov	r2, r4
 800938a:	4638      	mov	r0, r7
 800938c:	f7ff ff22 	bl	80091d4 <__multiply>
 8009390:	4631      	mov	r1, r6
 8009392:	4680      	mov	r8, r0
 8009394:	4638      	mov	r0, r7
 8009396:	f7ff fe53 	bl	8009040 <_Bfree>
 800939a:	4646      	mov	r6, r8
 800939c:	106d      	asrs	r5, r5, #1
 800939e:	d00b      	beq.n	80093b8 <__pow5mult+0xa0>
 80093a0:	6820      	ldr	r0, [r4, #0]
 80093a2:	b938      	cbnz	r0, 80093b4 <__pow5mult+0x9c>
 80093a4:	4622      	mov	r2, r4
 80093a6:	4621      	mov	r1, r4
 80093a8:	4638      	mov	r0, r7
 80093aa:	f7ff ff13 	bl	80091d4 <__multiply>
 80093ae:	6020      	str	r0, [r4, #0]
 80093b0:	f8c0 9000 	str.w	r9, [r0]
 80093b4:	4604      	mov	r4, r0
 80093b6:	e7e4      	b.n	8009382 <__pow5mult+0x6a>
 80093b8:	4630      	mov	r0, r6
 80093ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093be:	bf00      	nop
 80093c0:	0800a394 	.word	0x0800a394
 80093c4:	0800a261 	.word	0x0800a261
 80093c8:	0800a2e1 	.word	0x0800a2e1

080093cc <__lshift>:
 80093cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d0:	460c      	mov	r4, r1
 80093d2:	6849      	ldr	r1, [r1, #4]
 80093d4:	6923      	ldr	r3, [r4, #16]
 80093d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093da:	68a3      	ldr	r3, [r4, #8]
 80093dc:	4607      	mov	r7, r0
 80093de:	4691      	mov	r9, r2
 80093e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093e4:	f108 0601 	add.w	r6, r8, #1
 80093e8:	42b3      	cmp	r3, r6
 80093ea:	db0b      	blt.n	8009404 <__lshift+0x38>
 80093ec:	4638      	mov	r0, r7
 80093ee:	f7ff fde7 	bl	8008fc0 <_Balloc>
 80093f2:	4605      	mov	r5, r0
 80093f4:	b948      	cbnz	r0, 800940a <__lshift+0x3e>
 80093f6:	4602      	mov	r2, r0
 80093f8:	4b28      	ldr	r3, [pc, #160]	@ (800949c <__lshift+0xd0>)
 80093fa:	4829      	ldr	r0, [pc, #164]	@ (80094a0 <__lshift+0xd4>)
 80093fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009400:	f000 fb94 	bl	8009b2c <__assert_func>
 8009404:	3101      	adds	r1, #1
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	e7ee      	b.n	80093e8 <__lshift+0x1c>
 800940a:	2300      	movs	r3, #0
 800940c:	f100 0114 	add.w	r1, r0, #20
 8009410:	f100 0210 	add.w	r2, r0, #16
 8009414:	4618      	mov	r0, r3
 8009416:	4553      	cmp	r3, sl
 8009418:	db33      	blt.n	8009482 <__lshift+0xb6>
 800941a:	6920      	ldr	r0, [r4, #16]
 800941c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009420:	f104 0314 	add.w	r3, r4, #20
 8009424:	f019 091f 	ands.w	r9, r9, #31
 8009428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800942c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009430:	d02b      	beq.n	800948a <__lshift+0xbe>
 8009432:	f1c9 0e20 	rsb	lr, r9, #32
 8009436:	468a      	mov	sl, r1
 8009438:	2200      	movs	r2, #0
 800943a:	6818      	ldr	r0, [r3, #0]
 800943c:	fa00 f009 	lsl.w	r0, r0, r9
 8009440:	4310      	orrs	r0, r2
 8009442:	f84a 0b04 	str.w	r0, [sl], #4
 8009446:	f853 2b04 	ldr.w	r2, [r3], #4
 800944a:	459c      	cmp	ip, r3
 800944c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009450:	d8f3      	bhi.n	800943a <__lshift+0x6e>
 8009452:	ebac 0304 	sub.w	r3, ip, r4
 8009456:	3b15      	subs	r3, #21
 8009458:	f023 0303 	bic.w	r3, r3, #3
 800945c:	3304      	adds	r3, #4
 800945e:	f104 0015 	add.w	r0, r4, #21
 8009462:	4560      	cmp	r0, ip
 8009464:	bf88      	it	hi
 8009466:	2304      	movhi	r3, #4
 8009468:	50ca      	str	r2, [r1, r3]
 800946a:	b10a      	cbz	r2, 8009470 <__lshift+0xa4>
 800946c:	f108 0602 	add.w	r6, r8, #2
 8009470:	3e01      	subs	r6, #1
 8009472:	4638      	mov	r0, r7
 8009474:	612e      	str	r6, [r5, #16]
 8009476:	4621      	mov	r1, r4
 8009478:	f7ff fde2 	bl	8009040 <_Bfree>
 800947c:	4628      	mov	r0, r5
 800947e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009482:	f842 0f04 	str.w	r0, [r2, #4]!
 8009486:	3301      	adds	r3, #1
 8009488:	e7c5      	b.n	8009416 <__lshift+0x4a>
 800948a:	3904      	subs	r1, #4
 800948c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009490:	f841 2f04 	str.w	r2, [r1, #4]!
 8009494:	459c      	cmp	ip, r3
 8009496:	d8f9      	bhi.n	800948c <__lshift+0xc0>
 8009498:	e7ea      	b.n	8009470 <__lshift+0xa4>
 800949a:	bf00      	nop
 800949c:	0800a2d0 	.word	0x0800a2d0
 80094a0:	0800a2e1 	.word	0x0800a2e1

080094a4 <__mcmp>:
 80094a4:	690a      	ldr	r2, [r1, #16]
 80094a6:	4603      	mov	r3, r0
 80094a8:	6900      	ldr	r0, [r0, #16]
 80094aa:	1a80      	subs	r0, r0, r2
 80094ac:	b530      	push	{r4, r5, lr}
 80094ae:	d10e      	bne.n	80094ce <__mcmp+0x2a>
 80094b0:	3314      	adds	r3, #20
 80094b2:	3114      	adds	r1, #20
 80094b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094c4:	4295      	cmp	r5, r2
 80094c6:	d003      	beq.n	80094d0 <__mcmp+0x2c>
 80094c8:	d205      	bcs.n	80094d6 <__mcmp+0x32>
 80094ca:	f04f 30ff 	mov.w	r0, #4294967295
 80094ce:	bd30      	pop	{r4, r5, pc}
 80094d0:	42a3      	cmp	r3, r4
 80094d2:	d3f3      	bcc.n	80094bc <__mcmp+0x18>
 80094d4:	e7fb      	b.n	80094ce <__mcmp+0x2a>
 80094d6:	2001      	movs	r0, #1
 80094d8:	e7f9      	b.n	80094ce <__mcmp+0x2a>
	...

080094dc <__mdiff>:
 80094dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e0:	4689      	mov	r9, r1
 80094e2:	4606      	mov	r6, r0
 80094e4:	4611      	mov	r1, r2
 80094e6:	4648      	mov	r0, r9
 80094e8:	4614      	mov	r4, r2
 80094ea:	f7ff ffdb 	bl	80094a4 <__mcmp>
 80094ee:	1e05      	subs	r5, r0, #0
 80094f0:	d112      	bne.n	8009518 <__mdiff+0x3c>
 80094f2:	4629      	mov	r1, r5
 80094f4:	4630      	mov	r0, r6
 80094f6:	f7ff fd63 	bl	8008fc0 <_Balloc>
 80094fa:	4602      	mov	r2, r0
 80094fc:	b928      	cbnz	r0, 800950a <__mdiff+0x2e>
 80094fe:	4b3f      	ldr	r3, [pc, #252]	@ (80095fc <__mdiff+0x120>)
 8009500:	f240 2137 	movw	r1, #567	@ 0x237
 8009504:	483e      	ldr	r0, [pc, #248]	@ (8009600 <__mdiff+0x124>)
 8009506:	f000 fb11 	bl	8009b2c <__assert_func>
 800950a:	2301      	movs	r3, #1
 800950c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009510:	4610      	mov	r0, r2
 8009512:	b003      	add	sp, #12
 8009514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009518:	bfbc      	itt	lt
 800951a:	464b      	movlt	r3, r9
 800951c:	46a1      	movlt	r9, r4
 800951e:	4630      	mov	r0, r6
 8009520:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009524:	bfba      	itte	lt
 8009526:	461c      	movlt	r4, r3
 8009528:	2501      	movlt	r5, #1
 800952a:	2500      	movge	r5, #0
 800952c:	f7ff fd48 	bl	8008fc0 <_Balloc>
 8009530:	4602      	mov	r2, r0
 8009532:	b918      	cbnz	r0, 800953c <__mdiff+0x60>
 8009534:	4b31      	ldr	r3, [pc, #196]	@ (80095fc <__mdiff+0x120>)
 8009536:	f240 2145 	movw	r1, #581	@ 0x245
 800953a:	e7e3      	b.n	8009504 <__mdiff+0x28>
 800953c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009540:	6926      	ldr	r6, [r4, #16]
 8009542:	60c5      	str	r5, [r0, #12]
 8009544:	f109 0310 	add.w	r3, r9, #16
 8009548:	f109 0514 	add.w	r5, r9, #20
 800954c:	f104 0e14 	add.w	lr, r4, #20
 8009550:	f100 0b14 	add.w	fp, r0, #20
 8009554:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009558:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	46d9      	mov	r9, fp
 8009560:	f04f 0c00 	mov.w	ip, #0
 8009564:	9b01      	ldr	r3, [sp, #4]
 8009566:	f85e 0b04 	ldr.w	r0, [lr], #4
 800956a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	fa1f f38a 	uxth.w	r3, sl
 8009574:	4619      	mov	r1, r3
 8009576:	b283      	uxth	r3, r0
 8009578:	1acb      	subs	r3, r1, r3
 800957a:	0c00      	lsrs	r0, r0, #16
 800957c:	4463      	add	r3, ip
 800957e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009582:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009586:	b29b      	uxth	r3, r3
 8009588:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800958c:	4576      	cmp	r6, lr
 800958e:	f849 3b04 	str.w	r3, [r9], #4
 8009592:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009596:	d8e5      	bhi.n	8009564 <__mdiff+0x88>
 8009598:	1b33      	subs	r3, r6, r4
 800959a:	3b15      	subs	r3, #21
 800959c:	f023 0303 	bic.w	r3, r3, #3
 80095a0:	3415      	adds	r4, #21
 80095a2:	3304      	adds	r3, #4
 80095a4:	42a6      	cmp	r6, r4
 80095a6:	bf38      	it	cc
 80095a8:	2304      	movcc	r3, #4
 80095aa:	441d      	add	r5, r3
 80095ac:	445b      	add	r3, fp
 80095ae:	461e      	mov	r6, r3
 80095b0:	462c      	mov	r4, r5
 80095b2:	4544      	cmp	r4, r8
 80095b4:	d30e      	bcc.n	80095d4 <__mdiff+0xf8>
 80095b6:	f108 0103 	add.w	r1, r8, #3
 80095ba:	1b49      	subs	r1, r1, r5
 80095bc:	f021 0103 	bic.w	r1, r1, #3
 80095c0:	3d03      	subs	r5, #3
 80095c2:	45a8      	cmp	r8, r5
 80095c4:	bf38      	it	cc
 80095c6:	2100      	movcc	r1, #0
 80095c8:	440b      	add	r3, r1
 80095ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095ce:	b191      	cbz	r1, 80095f6 <__mdiff+0x11a>
 80095d0:	6117      	str	r7, [r2, #16]
 80095d2:	e79d      	b.n	8009510 <__mdiff+0x34>
 80095d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80095d8:	46e6      	mov	lr, ip
 80095da:	0c08      	lsrs	r0, r1, #16
 80095dc:	fa1c fc81 	uxtah	ip, ip, r1
 80095e0:	4471      	add	r1, lr
 80095e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80095e6:	b289      	uxth	r1, r1
 80095e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80095ec:	f846 1b04 	str.w	r1, [r6], #4
 80095f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095f4:	e7dd      	b.n	80095b2 <__mdiff+0xd6>
 80095f6:	3f01      	subs	r7, #1
 80095f8:	e7e7      	b.n	80095ca <__mdiff+0xee>
 80095fa:	bf00      	nop
 80095fc:	0800a2d0 	.word	0x0800a2d0
 8009600:	0800a2e1 	.word	0x0800a2e1

08009604 <__d2b>:
 8009604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009608:	460f      	mov	r7, r1
 800960a:	2101      	movs	r1, #1
 800960c:	ec59 8b10 	vmov	r8, r9, d0
 8009610:	4616      	mov	r6, r2
 8009612:	f7ff fcd5 	bl	8008fc0 <_Balloc>
 8009616:	4604      	mov	r4, r0
 8009618:	b930      	cbnz	r0, 8009628 <__d2b+0x24>
 800961a:	4602      	mov	r2, r0
 800961c:	4b23      	ldr	r3, [pc, #140]	@ (80096ac <__d2b+0xa8>)
 800961e:	4824      	ldr	r0, [pc, #144]	@ (80096b0 <__d2b+0xac>)
 8009620:	f240 310f 	movw	r1, #783	@ 0x30f
 8009624:	f000 fa82 	bl	8009b2c <__assert_func>
 8009628:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800962c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009630:	b10d      	cbz	r5, 8009636 <__d2b+0x32>
 8009632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009636:	9301      	str	r3, [sp, #4]
 8009638:	f1b8 0300 	subs.w	r3, r8, #0
 800963c:	d023      	beq.n	8009686 <__d2b+0x82>
 800963e:	4668      	mov	r0, sp
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	f7ff fd84 	bl	800914e <__lo0bits>
 8009646:	e9dd 1200 	ldrd	r1, r2, [sp]
 800964a:	b1d0      	cbz	r0, 8009682 <__d2b+0x7e>
 800964c:	f1c0 0320 	rsb	r3, r0, #32
 8009650:	fa02 f303 	lsl.w	r3, r2, r3
 8009654:	430b      	orrs	r3, r1
 8009656:	40c2      	lsrs	r2, r0
 8009658:	6163      	str	r3, [r4, #20]
 800965a:	9201      	str	r2, [sp, #4]
 800965c:	9b01      	ldr	r3, [sp, #4]
 800965e:	61a3      	str	r3, [r4, #24]
 8009660:	2b00      	cmp	r3, #0
 8009662:	bf0c      	ite	eq
 8009664:	2201      	moveq	r2, #1
 8009666:	2202      	movne	r2, #2
 8009668:	6122      	str	r2, [r4, #16]
 800966a:	b1a5      	cbz	r5, 8009696 <__d2b+0x92>
 800966c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009670:	4405      	add	r5, r0
 8009672:	603d      	str	r5, [r7, #0]
 8009674:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009678:	6030      	str	r0, [r6, #0]
 800967a:	4620      	mov	r0, r4
 800967c:	b003      	add	sp, #12
 800967e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009682:	6161      	str	r1, [r4, #20]
 8009684:	e7ea      	b.n	800965c <__d2b+0x58>
 8009686:	a801      	add	r0, sp, #4
 8009688:	f7ff fd61 	bl	800914e <__lo0bits>
 800968c:	9b01      	ldr	r3, [sp, #4]
 800968e:	6163      	str	r3, [r4, #20]
 8009690:	3020      	adds	r0, #32
 8009692:	2201      	movs	r2, #1
 8009694:	e7e8      	b.n	8009668 <__d2b+0x64>
 8009696:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800969a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800969e:	6038      	str	r0, [r7, #0]
 80096a0:	6918      	ldr	r0, [r3, #16]
 80096a2:	f7ff fd35 	bl	8009110 <__hi0bits>
 80096a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096aa:	e7e5      	b.n	8009678 <__d2b+0x74>
 80096ac:	0800a2d0 	.word	0x0800a2d0
 80096b0:	0800a2e1 	.word	0x0800a2e1

080096b4 <__ssputs_r>:
 80096b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b8:	688e      	ldr	r6, [r1, #8]
 80096ba:	461f      	mov	r7, r3
 80096bc:	42be      	cmp	r6, r7
 80096be:	680b      	ldr	r3, [r1, #0]
 80096c0:	4682      	mov	sl, r0
 80096c2:	460c      	mov	r4, r1
 80096c4:	4690      	mov	r8, r2
 80096c6:	d82d      	bhi.n	8009724 <__ssputs_r+0x70>
 80096c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80096d0:	d026      	beq.n	8009720 <__ssputs_r+0x6c>
 80096d2:	6965      	ldr	r5, [r4, #20]
 80096d4:	6909      	ldr	r1, [r1, #16]
 80096d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096da:	eba3 0901 	sub.w	r9, r3, r1
 80096de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096e2:	1c7b      	adds	r3, r7, #1
 80096e4:	444b      	add	r3, r9
 80096e6:	106d      	asrs	r5, r5, #1
 80096e8:	429d      	cmp	r5, r3
 80096ea:	bf38      	it	cc
 80096ec:	461d      	movcc	r5, r3
 80096ee:	0553      	lsls	r3, r2, #21
 80096f0:	d527      	bpl.n	8009742 <__ssputs_r+0x8e>
 80096f2:	4629      	mov	r1, r5
 80096f4:	f7ff fbd8 	bl	8008ea8 <_malloc_r>
 80096f8:	4606      	mov	r6, r0
 80096fa:	b360      	cbz	r0, 8009756 <__ssputs_r+0xa2>
 80096fc:	6921      	ldr	r1, [r4, #16]
 80096fe:	464a      	mov	r2, r9
 8009700:	f000 fa06 	bl	8009b10 <memcpy>
 8009704:	89a3      	ldrh	r3, [r4, #12]
 8009706:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800970a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800970e:	81a3      	strh	r3, [r4, #12]
 8009710:	6126      	str	r6, [r4, #16]
 8009712:	6165      	str	r5, [r4, #20]
 8009714:	444e      	add	r6, r9
 8009716:	eba5 0509 	sub.w	r5, r5, r9
 800971a:	6026      	str	r6, [r4, #0]
 800971c:	60a5      	str	r5, [r4, #8]
 800971e:	463e      	mov	r6, r7
 8009720:	42be      	cmp	r6, r7
 8009722:	d900      	bls.n	8009726 <__ssputs_r+0x72>
 8009724:	463e      	mov	r6, r7
 8009726:	6820      	ldr	r0, [r4, #0]
 8009728:	4632      	mov	r2, r6
 800972a:	4641      	mov	r1, r8
 800972c:	f000 f9c6 	bl	8009abc <memmove>
 8009730:	68a3      	ldr	r3, [r4, #8]
 8009732:	1b9b      	subs	r3, r3, r6
 8009734:	60a3      	str	r3, [r4, #8]
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	4433      	add	r3, r6
 800973a:	6023      	str	r3, [r4, #0]
 800973c:	2000      	movs	r0, #0
 800973e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009742:	462a      	mov	r2, r5
 8009744:	f000 fa36 	bl	8009bb4 <_realloc_r>
 8009748:	4606      	mov	r6, r0
 800974a:	2800      	cmp	r0, #0
 800974c:	d1e0      	bne.n	8009710 <__ssputs_r+0x5c>
 800974e:	6921      	ldr	r1, [r4, #16]
 8009750:	4650      	mov	r0, sl
 8009752:	f7ff fb35 	bl	8008dc0 <_free_r>
 8009756:	230c      	movs	r3, #12
 8009758:	f8ca 3000 	str.w	r3, [sl]
 800975c:	89a3      	ldrh	r3, [r4, #12]
 800975e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009762:	81a3      	strh	r3, [r4, #12]
 8009764:	f04f 30ff 	mov.w	r0, #4294967295
 8009768:	e7e9      	b.n	800973e <__ssputs_r+0x8a>
	...

0800976c <_svfiprintf_r>:
 800976c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009770:	4698      	mov	r8, r3
 8009772:	898b      	ldrh	r3, [r1, #12]
 8009774:	061b      	lsls	r3, r3, #24
 8009776:	b09d      	sub	sp, #116	@ 0x74
 8009778:	4607      	mov	r7, r0
 800977a:	460d      	mov	r5, r1
 800977c:	4614      	mov	r4, r2
 800977e:	d510      	bpl.n	80097a2 <_svfiprintf_r+0x36>
 8009780:	690b      	ldr	r3, [r1, #16]
 8009782:	b973      	cbnz	r3, 80097a2 <_svfiprintf_r+0x36>
 8009784:	2140      	movs	r1, #64	@ 0x40
 8009786:	f7ff fb8f 	bl	8008ea8 <_malloc_r>
 800978a:	6028      	str	r0, [r5, #0]
 800978c:	6128      	str	r0, [r5, #16]
 800978e:	b930      	cbnz	r0, 800979e <_svfiprintf_r+0x32>
 8009790:	230c      	movs	r3, #12
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	f04f 30ff 	mov.w	r0, #4294967295
 8009798:	b01d      	add	sp, #116	@ 0x74
 800979a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979e:	2340      	movs	r3, #64	@ 0x40
 80097a0:	616b      	str	r3, [r5, #20]
 80097a2:	2300      	movs	r3, #0
 80097a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097a6:	2320      	movs	r3, #32
 80097a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80097b0:	2330      	movs	r3, #48	@ 0x30
 80097b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009950 <_svfiprintf_r+0x1e4>
 80097b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097ba:	f04f 0901 	mov.w	r9, #1
 80097be:	4623      	mov	r3, r4
 80097c0:	469a      	mov	sl, r3
 80097c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097c6:	b10a      	cbz	r2, 80097cc <_svfiprintf_r+0x60>
 80097c8:	2a25      	cmp	r2, #37	@ 0x25
 80097ca:	d1f9      	bne.n	80097c0 <_svfiprintf_r+0x54>
 80097cc:	ebba 0b04 	subs.w	fp, sl, r4
 80097d0:	d00b      	beq.n	80097ea <_svfiprintf_r+0x7e>
 80097d2:	465b      	mov	r3, fp
 80097d4:	4622      	mov	r2, r4
 80097d6:	4629      	mov	r1, r5
 80097d8:	4638      	mov	r0, r7
 80097da:	f7ff ff6b 	bl	80096b4 <__ssputs_r>
 80097de:	3001      	adds	r0, #1
 80097e0:	f000 80a7 	beq.w	8009932 <_svfiprintf_r+0x1c6>
 80097e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097e6:	445a      	add	r2, fp
 80097e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80097ea:	f89a 3000 	ldrb.w	r3, [sl]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 809f 	beq.w	8009932 <_svfiprintf_r+0x1c6>
 80097f4:	2300      	movs	r3, #0
 80097f6:	f04f 32ff 	mov.w	r2, #4294967295
 80097fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097fe:	f10a 0a01 	add.w	sl, sl, #1
 8009802:	9304      	str	r3, [sp, #16]
 8009804:	9307      	str	r3, [sp, #28]
 8009806:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800980a:	931a      	str	r3, [sp, #104]	@ 0x68
 800980c:	4654      	mov	r4, sl
 800980e:	2205      	movs	r2, #5
 8009810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009814:	484e      	ldr	r0, [pc, #312]	@ (8009950 <_svfiprintf_r+0x1e4>)
 8009816:	f7f6 fcdb 	bl	80001d0 <memchr>
 800981a:	9a04      	ldr	r2, [sp, #16]
 800981c:	b9d8      	cbnz	r0, 8009856 <_svfiprintf_r+0xea>
 800981e:	06d0      	lsls	r0, r2, #27
 8009820:	bf44      	itt	mi
 8009822:	2320      	movmi	r3, #32
 8009824:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009828:	0711      	lsls	r1, r2, #28
 800982a:	bf44      	itt	mi
 800982c:	232b      	movmi	r3, #43	@ 0x2b
 800982e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009832:	f89a 3000 	ldrb.w	r3, [sl]
 8009836:	2b2a      	cmp	r3, #42	@ 0x2a
 8009838:	d015      	beq.n	8009866 <_svfiprintf_r+0xfa>
 800983a:	9a07      	ldr	r2, [sp, #28]
 800983c:	4654      	mov	r4, sl
 800983e:	2000      	movs	r0, #0
 8009840:	f04f 0c0a 	mov.w	ip, #10
 8009844:	4621      	mov	r1, r4
 8009846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800984a:	3b30      	subs	r3, #48	@ 0x30
 800984c:	2b09      	cmp	r3, #9
 800984e:	d94b      	bls.n	80098e8 <_svfiprintf_r+0x17c>
 8009850:	b1b0      	cbz	r0, 8009880 <_svfiprintf_r+0x114>
 8009852:	9207      	str	r2, [sp, #28]
 8009854:	e014      	b.n	8009880 <_svfiprintf_r+0x114>
 8009856:	eba0 0308 	sub.w	r3, r0, r8
 800985a:	fa09 f303 	lsl.w	r3, r9, r3
 800985e:	4313      	orrs	r3, r2
 8009860:	9304      	str	r3, [sp, #16]
 8009862:	46a2      	mov	sl, r4
 8009864:	e7d2      	b.n	800980c <_svfiprintf_r+0xa0>
 8009866:	9b03      	ldr	r3, [sp, #12]
 8009868:	1d19      	adds	r1, r3, #4
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	9103      	str	r1, [sp, #12]
 800986e:	2b00      	cmp	r3, #0
 8009870:	bfbb      	ittet	lt
 8009872:	425b      	neglt	r3, r3
 8009874:	f042 0202 	orrlt.w	r2, r2, #2
 8009878:	9307      	strge	r3, [sp, #28]
 800987a:	9307      	strlt	r3, [sp, #28]
 800987c:	bfb8      	it	lt
 800987e:	9204      	strlt	r2, [sp, #16]
 8009880:	7823      	ldrb	r3, [r4, #0]
 8009882:	2b2e      	cmp	r3, #46	@ 0x2e
 8009884:	d10a      	bne.n	800989c <_svfiprintf_r+0x130>
 8009886:	7863      	ldrb	r3, [r4, #1]
 8009888:	2b2a      	cmp	r3, #42	@ 0x2a
 800988a:	d132      	bne.n	80098f2 <_svfiprintf_r+0x186>
 800988c:	9b03      	ldr	r3, [sp, #12]
 800988e:	1d1a      	adds	r2, r3, #4
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	9203      	str	r2, [sp, #12]
 8009894:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009898:	3402      	adds	r4, #2
 800989a:	9305      	str	r3, [sp, #20]
 800989c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009960 <_svfiprintf_r+0x1f4>
 80098a0:	7821      	ldrb	r1, [r4, #0]
 80098a2:	2203      	movs	r2, #3
 80098a4:	4650      	mov	r0, sl
 80098a6:	f7f6 fc93 	bl	80001d0 <memchr>
 80098aa:	b138      	cbz	r0, 80098bc <_svfiprintf_r+0x150>
 80098ac:	9b04      	ldr	r3, [sp, #16]
 80098ae:	eba0 000a 	sub.w	r0, r0, sl
 80098b2:	2240      	movs	r2, #64	@ 0x40
 80098b4:	4082      	lsls	r2, r0
 80098b6:	4313      	orrs	r3, r2
 80098b8:	3401      	adds	r4, #1
 80098ba:	9304      	str	r3, [sp, #16]
 80098bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c0:	4824      	ldr	r0, [pc, #144]	@ (8009954 <_svfiprintf_r+0x1e8>)
 80098c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098c6:	2206      	movs	r2, #6
 80098c8:	f7f6 fc82 	bl	80001d0 <memchr>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	d036      	beq.n	800993e <_svfiprintf_r+0x1d2>
 80098d0:	4b21      	ldr	r3, [pc, #132]	@ (8009958 <_svfiprintf_r+0x1ec>)
 80098d2:	bb1b      	cbnz	r3, 800991c <_svfiprintf_r+0x1b0>
 80098d4:	9b03      	ldr	r3, [sp, #12]
 80098d6:	3307      	adds	r3, #7
 80098d8:	f023 0307 	bic.w	r3, r3, #7
 80098dc:	3308      	adds	r3, #8
 80098de:	9303      	str	r3, [sp, #12]
 80098e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098e2:	4433      	add	r3, r6
 80098e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80098e6:	e76a      	b.n	80097be <_svfiprintf_r+0x52>
 80098e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80098ec:	460c      	mov	r4, r1
 80098ee:	2001      	movs	r0, #1
 80098f0:	e7a8      	b.n	8009844 <_svfiprintf_r+0xd8>
 80098f2:	2300      	movs	r3, #0
 80098f4:	3401      	adds	r4, #1
 80098f6:	9305      	str	r3, [sp, #20]
 80098f8:	4619      	mov	r1, r3
 80098fa:	f04f 0c0a 	mov.w	ip, #10
 80098fe:	4620      	mov	r0, r4
 8009900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009904:	3a30      	subs	r2, #48	@ 0x30
 8009906:	2a09      	cmp	r2, #9
 8009908:	d903      	bls.n	8009912 <_svfiprintf_r+0x1a6>
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0c6      	beq.n	800989c <_svfiprintf_r+0x130>
 800990e:	9105      	str	r1, [sp, #20]
 8009910:	e7c4      	b.n	800989c <_svfiprintf_r+0x130>
 8009912:	fb0c 2101 	mla	r1, ip, r1, r2
 8009916:	4604      	mov	r4, r0
 8009918:	2301      	movs	r3, #1
 800991a:	e7f0      	b.n	80098fe <_svfiprintf_r+0x192>
 800991c:	ab03      	add	r3, sp, #12
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	462a      	mov	r2, r5
 8009922:	4b0e      	ldr	r3, [pc, #56]	@ (800995c <_svfiprintf_r+0x1f0>)
 8009924:	a904      	add	r1, sp, #16
 8009926:	4638      	mov	r0, r7
 8009928:	f7fd fe94 	bl	8007654 <_printf_float>
 800992c:	1c42      	adds	r2, r0, #1
 800992e:	4606      	mov	r6, r0
 8009930:	d1d6      	bne.n	80098e0 <_svfiprintf_r+0x174>
 8009932:	89ab      	ldrh	r3, [r5, #12]
 8009934:	065b      	lsls	r3, r3, #25
 8009936:	f53f af2d 	bmi.w	8009794 <_svfiprintf_r+0x28>
 800993a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800993c:	e72c      	b.n	8009798 <_svfiprintf_r+0x2c>
 800993e:	ab03      	add	r3, sp, #12
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	462a      	mov	r2, r5
 8009944:	4b05      	ldr	r3, [pc, #20]	@ (800995c <_svfiprintf_r+0x1f0>)
 8009946:	a904      	add	r1, sp, #16
 8009948:	4638      	mov	r0, r7
 800994a:	f7fe f91b 	bl	8007b84 <_printf_i>
 800994e:	e7ed      	b.n	800992c <_svfiprintf_r+0x1c0>
 8009950:	0800a33a 	.word	0x0800a33a
 8009954:	0800a344 	.word	0x0800a344
 8009958:	08007655 	.word	0x08007655
 800995c:	080096b5 	.word	0x080096b5
 8009960:	0800a340 	.word	0x0800a340

08009964 <__sflush_r>:
 8009964:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800996c:	0716      	lsls	r6, r2, #28
 800996e:	4605      	mov	r5, r0
 8009970:	460c      	mov	r4, r1
 8009972:	d454      	bmi.n	8009a1e <__sflush_r+0xba>
 8009974:	684b      	ldr	r3, [r1, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	dc02      	bgt.n	8009980 <__sflush_r+0x1c>
 800997a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800997c:	2b00      	cmp	r3, #0
 800997e:	dd48      	ble.n	8009a12 <__sflush_r+0xae>
 8009980:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009982:	2e00      	cmp	r6, #0
 8009984:	d045      	beq.n	8009a12 <__sflush_r+0xae>
 8009986:	2300      	movs	r3, #0
 8009988:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800998c:	682f      	ldr	r7, [r5, #0]
 800998e:	6a21      	ldr	r1, [r4, #32]
 8009990:	602b      	str	r3, [r5, #0]
 8009992:	d030      	beq.n	80099f6 <__sflush_r+0x92>
 8009994:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	0759      	lsls	r1, r3, #29
 800999a:	d505      	bpl.n	80099a8 <__sflush_r+0x44>
 800999c:	6863      	ldr	r3, [r4, #4]
 800999e:	1ad2      	subs	r2, r2, r3
 80099a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80099a2:	b10b      	cbz	r3, 80099a8 <__sflush_r+0x44>
 80099a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099a6:	1ad2      	subs	r2, r2, r3
 80099a8:	2300      	movs	r3, #0
 80099aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099ac:	6a21      	ldr	r1, [r4, #32]
 80099ae:	4628      	mov	r0, r5
 80099b0:	47b0      	blx	r6
 80099b2:	1c43      	adds	r3, r0, #1
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	d106      	bne.n	80099c6 <__sflush_r+0x62>
 80099b8:	6829      	ldr	r1, [r5, #0]
 80099ba:	291d      	cmp	r1, #29
 80099bc:	d82b      	bhi.n	8009a16 <__sflush_r+0xb2>
 80099be:	4a2a      	ldr	r2, [pc, #168]	@ (8009a68 <__sflush_r+0x104>)
 80099c0:	40ca      	lsrs	r2, r1
 80099c2:	07d6      	lsls	r6, r2, #31
 80099c4:	d527      	bpl.n	8009a16 <__sflush_r+0xb2>
 80099c6:	2200      	movs	r2, #0
 80099c8:	6062      	str	r2, [r4, #4]
 80099ca:	04d9      	lsls	r1, r3, #19
 80099cc:	6922      	ldr	r2, [r4, #16]
 80099ce:	6022      	str	r2, [r4, #0]
 80099d0:	d504      	bpl.n	80099dc <__sflush_r+0x78>
 80099d2:	1c42      	adds	r2, r0, #1
 80099d4:	d101      	bne.n	80099da <__sflush_r+0x76>
 80099d6:	682b      	ldr	r3, [r5, #0]
 80099d8:	b903      	cbnz	r3, 80099dc <__sflush_r+0x78>
 80099da:	6560      	str	r0, [r4, #84]	@ 0x54
 80099dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099de:	602f      	str	r7, [r5, #0]
 80099e0:	b1b9      	cbz	r1, 8009a12 <__sflush_r+0xae>
 80099e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099e6:	4299      	cmp	r1, r3
 80099e8:	d002      	beq.n	80099f0 <__sflush_r+0x8c>
 80099ea:	4628      	mov	r0, r5
 80099ec:	f7ff f9e8 	bl	8008dc0 <_free_r>
 80099f0:	2300      	movs	r3, #0
 80099f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80099f4:	e00d      	b.n	8009a12 <__sflush_r+0xae>
 80099f6:	2301      	movs	r3, #1
 80099f8:	4628      	mov	r0, r5
 80099fa:	47b0      	blx	r6
 80099fc:	4602      	mov	r2, r0
 80099fe:	1c50      	adds	r0, r2, #1
 8009a00:	d1c9      	bne.n	8009996 <__sflush_r+0x32>
 8009a02:	682b      	ldr	r3, [r5, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d0c6      	beq.n	8009996 <__sflush_r+0x32>
 8009a08:	2b1d      	cmp	r3, #29
 8009a0a:	d001      	beq.n	8009a10 <__sflush_r+0xac>
 8009a0c:	2b16      	cmp	r3, #22
 8009a0e:	d11e      	bne.n	8009a4e <__sflush_r+0xea>
 8009a10:	602f      	str	r7, [r5, #0]
 8009a12:	2000      	movs	r0, #0
 8009a14:	e022      	b.n	8009a5c <__sflush_r+0xf8>
 8009a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a1a:	b21b      	sxth	r3, r3
 8009a1c:	e01b      	b.n	8009a56 <__sflush_r+0xf2>
 8009a1e:	690f      	ldr	r7, [r1, #16]
 8009a20:	2f00      	cmp	r7, #0
 8009a22:	d0f6      	beq.n	8009a12 <__sflush_r+0xae>
 8009a24:	0793      	lsls	r3, r2, #30
 8009a26:	680e      	ldr	r6, [r1, #0]
 8009a28:	bf08      	it	eq
 8009a2a:	694b      	ldreq	r3, [r1, #20]
 8009a2c:	600f      	str	r7, [r1, #0]
 8009a2e:	bf18      	it	ne
 8009a30:	2300      	movne	r3, #0
 8009a32:	eba6 0807 	sub.w	r8, r6, r7
 8009a36:	608b      	str	r3, [r1, #8]
 8009a38:	f1b8 0f00 	cmp.w	r8, #0
 8009a3c:	dde9      	ble.n	8009a12 <__sflush_r+0xae>
 8009a3e:	6a21      	ldr	r1, [r4, #32]
 8009a40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a42:	4643      	mov	r3, r8
 8009a44:	463a      	mov	r2, r7
 8009a46:	4628      	mov	r0, r5
 8009a48:	47b0      	blx	r6
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	dc08      	bgt.n	8009a60 <__sflush_r+0xfc>
 8009a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a56:	81a3      	strh	r3, [r4, #12]
 8009a58:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a60:	4407      	add	r7, r0
 8009a62:	eba8 0800 	sub.w	r8, r8, r0
 8009a66:	e7e7      	b.n	8009a38 <__sflush_r+0xd4>
 8009a68:	20400001 	.word	0x20400001

08009a6c <_fflush_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	690b      	ldr	r3, [r1, #16]
 8009a70:	4605      	mov	r5, r0
 8009a72:	460c      	mov	r4, r1
 8009a74:	b913      	cbnz	r3, 8009a7c <_fflush_r+0x10>
 8009a76:	2500      	movs	r5, #0
 8009a78:	4628      	mov	r0, r5
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	b118      	cbz	r0, 8009a86 <_fflush_r+0x1a>
 8009a7e:	6a03      	ldr	r3, [r0, #32]
 8009a80:	b90b      	cbnz	r3, 8009a86 <_fflush_r+0x1a>
 8009a82:	f7fe fa29 	bl	8007ed8 <__sinit>
 8009a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0f3      	beq.n	8009a76 <_fflush_r+0xa>
 8009a8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a90:	07d0      	lsls	r0, r2, #31
 8009a92:	d404      	bmi.n	8009a9e <_fflush_r+0x32>
 8009a94:	0599      	lsls	r1, r3, #22
 8009a96:	d402      	bmi.n	8009a9e <_fflush_r+0x32>
 8009a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a9a:	f7fe fb36 	bl	800810a <__retarget_lock_acquire_recursive>
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	f7ff ff5f 	bl	8009964 <__sflush_r>
 8009aa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009aa8:	07da      	lsls	r2, r3, #31
 8009aaa:	4605      	mov	r5, r0
 8009aac:	d4e4      	bmi.n	8009a78 <_fflush_r+0xc>
 8009aae:	89a3      	ldrh	r3, [r4, #12]
 8009ab0:	059b      	lsls	r3, r3, #22
 8009ab2:	d4e1      	bmi.n	8009a78 <_fflush_r+0xc>
 8009ab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ab6:	f7fe fb29 	bl	800810c <__retarget_lock_release_recursive>
 8009aba:	e7dd      	b.n	8009a78 <_fflush_r+0xc>

08009abc <memmove>:
 8009abc:	4288      	cmp	r0, r1
 8009abe:	b510      	push	{r4, lr}
 8009ac0:	eb01 0402 	add.w	r4, r1, r2
 8009ac4:	d902      	bls.n	8009acc <memmove+0x10>
 8009ac6:	4284      	cmp	r4, r0
 8009ac8:	4623      	mov	r3, r4
 8009aca:	d807      	bhi.n	8009adc <memmove+0x20>
 8009acc:	1e43      	subs	r3, r0, #1
 8009ace:	42a1      	cmp	r1, r4
 8009ad0:	d008      	beq.n	8009ae4 <memmove+0x28>
 8009ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ada:	e7f8      	b.n	8009ace <memmove+0x12>
 8009adc:	4402      	add	r2, r0
 8009ade:	4601      	mov	r1, r0
 8009ae0:	428a      	cmp	r2, r1
 8009ae2:	d100      	bne.n	8009ae6 <memmove+0x2a>
 8009ae4:	bd10      	pop	{r4, pc}
 8009ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aee:	e7f7      	b.n	8009ae0 <memmove+0x24>

08009af0 <_sbrk_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	4d06      	ldr	r5, [pc, #24]	@ (8009b0c <_sbrk_r+0x1c>)
 8009af4:	2300      	movs	r3, #0
 8009af6:	4604      	mov	r4, r0
 8009af8:	4608      	mov	r0, r1
 8009afa:	602b      	str	r3, [r5, #0]
 8009afc:	f7f7 ff3e 	bl	800197c <_sbrk>
 8009b00:	1c43      	adds	r3, r0, #1
 8009b02:	d102      	bne.n	8009b0a <_sbrk_r+0x1a>
 8009b04:	682b      	ldr	r3, [r5, #0]
 8009b06:	b103      	cbz	r3, 8009b0a <_sbrk_r+0x1a>
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
 8009b0c:	200004f4 	.word	0x200004f4

08009b10 <memcpy>:
 8009b10:	440a      	add	r2, r1
 8009b12:	4291      	cmp	r1, r2
 8009b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b18:	d100      	bne.n	8009b1c <memcpy+0xc>
 8009b1a:	4770      	bx	lr
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b26:	4291      	cmp	r1, r2
 8009b28:	d1f9      	bne.n	8009b1e <memcpy+0xe>
 8009b2a:	bd10      	pop	{r4, pc}

08009b2c <__assert_func>:
 8009b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b2e:	4614      	mov	r4, r2
 8009b30:	461a      	mov	r2, r3
 8009b32:	4b09      	ldr	r3, [pc, #36]	@ (8009b58 <__assert_func+0x2c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4605      	mov	r5, r0
 8009b38:	68d8      	ldr	r0, [r3, #12]
 8009b3a:	b14c      	cbz	r4, 8009b50 <__assert_func+0x24>
 8009b3c:	4b07      	ldr	r3, [pc, #28]	@ (8009b5c <__assert_func+0x30>)
 8009b3e:	9100      	str	r1, [sp, #0]
 8009b40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b44:	4906      	ldr	r1, [pc, #24]	@ (8009b60 <__assert_func+0x34>)
 8009b46:	462b      	mov	r3, r5
 8009b48:	f000 f870 	bl	8009c2c <fiprintf>
 8009b4c:	f000 f880 	bl	8009c50 <abort>
 8009b50:	4b04      	ldr	r3, [pc, #16]	@ (8009b64 <__assert_func+0x38>)
 8009b52:	461c      	mov	r4, r3
 8009b54:	e7f3      	b.n	8009b3e <__assert_func+0x12>
 8009b56:	bf00      	nop
 8009b58:	2000001c 	.word	0x2000001c
 8009b5c:	0800a355 	.word	0x0800a355
 8009b60:	0800a362 	.word	0x0800a362
 8009b64:	0800a390 	.word	0x0800a390

08009b68 <_calloc_r>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	fba1 5402 	umull	r5, r4, r1, r2
 8009b6e:	b934      	cbnz	r4, 8009b7e <_calloc_r+0x16>
 8009b70:	4629      	mov	r1, r5
 8009b72:	f7ff f999 	bl	8008ea8 <_malloc_r>
 8009b76:	4606      	mov	r6, r0
 8009b78:	b928      	cbnz	r0, 8009b86 <_calloc_r+0x1e>
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	bd70      	pop	{r4, r5, r6, pc}
 8009b7e:	220c      	movs	r2, #12
 8009b80:	6002      	str	r2, [r0, #0]
 8009b82:	2600      	movs	r6, #0
 8009b84:	e7f9      	b.n	8009b7a <_calloc_r+0x12>
 8009b86:	462a      	mov	r2, r5
 8009b88:	4621      	mov	r1, r4
 8009b8a:	f7fe fa40 	bl	800800e <memset>
 8009b8e:	e7f4      	b.n	8009b7a <_calloc_r+0x12>

08009b90 <__ascii_mbtowc>:
 8009b90:	b082      	sub	sp, #8
 8009b92:	b901      	cbnz	r1, 8009b96 <__ascii_mbtowc+0x6>
 8009b94:	a901      	add	r1, sp, #4
 8009b96:	b142      	cbz	r2, 8009baa <__ascii_mbtowc+0x1a>
 8009b98:	b14b      	cbz	r3, 8009bae <__ascii_mbtowc+0x1e>
 8009b9a:	7813      	ldrb	r3, [r2, #0]
 8009b9c:	600b      	str	r3, [r1, #0]
 8009b9e:	7812      	ldrb	r2, [r2, #0]
 8009ba0:	1e10      	subs	r0, r2, #0
 8009ba2:	bf18      	it	ne
 8009ba4:	2001      	movne	r0, #1
 8009ba6:	b002      	add	sp, #8
 8009ba8:	4770      	bx	lr
 8009baa:	4610      	mov	r0, r2
 8009bac:	e7fb      	b.n	8009ba6 <__ascii_mbtowc+0x16>
 8009bae:	f06f 0001 	mvn.w	r0, #1
 8009bb2:	e7f8      	b.n	8009ba6 <__ascii_mbtowc+0x16>

08009bb4 <_realloc_r>:
 8009bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb8:	4607      	mov	r7, r0
 8009bba:	4614      	mov	r4, r2
 8009bbc:	460d      	mov	r5, r1
 8009bbe:	b921      	cbnz	r1, 8009bca <_realloc_r+0x16>
 8009bc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	f7ff b96f 	b.w	8008ea8 <_malloc_r>
 8009bca:	b92a      	cbnz	r2, 8009bd8 <_realloc_r+0x24>
 8009bcc:	f7ff f8f8 	bl	8008dc0 <_free_r>
 8009bd0:	4625      	mov	r5, r4
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd8:	f000 f841 	bl	8009c5e <_malloc_usable_size_r>
 8009bdc:	4284      	cmp	r4, r0
 8009bde:	4606      	mov	r6, r0
 8009be0:	d802      	bhi.n	8009be8 <_realloc_r+0x34>
 8009be2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009be6:	d8f4      	bhi.n	8009bd2 <_realloc_r+0x1e>
 8009be8:	4621      	mov	r1, r4
 8009bea:	4638      	mov	r0, r7
 8009bec:	f7ff f95c 	bl	8008ea8 <_malloc_r>
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	b908      	cbnz	r0, 8009bf8 <_realloc_r+0x44>
 8009bf4:	4645      	mov	r5, r8
 8009bf6:	e7ec      	b.n	8009bd2 <_realloc_r+0x1e>
 8009bf8:	42b4      	cmp	r4, r6
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	bf28      	it	cs
 8009c00:	4632      	movcs	r2, r6
 8009c02:	f7ff ff85 	bl	8009b10 <memcpy>
 8009c06:	4629      	mov	r1, r5
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f7ff f8d9 	bl	8008dc0 <_free_r>
 8009c0e:	e7f1      	b.n	8009bf4 <_realloc_r+0x40>

08009c10 <__ascii_wctomb>:
 8009c10:	4603      	mov	r3, r0
 8009c12:	4608      	mov	r0, r1
 8009c14:	b141      	cbz	r1, 8009c28 <__ascii_wctomb+0x18>
 8009c16:	2aff      	cmp	r2, #255	@ 0xff
 8009c18:	d904      	bls.n	8009c24 <__ascii_wctomb+0x14>
 8009c1a:	228a      	movs	r2, #138	@ 0x8a
 8009c1c:	601a      	str	r2, [r3, #0]
 8009c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c22:	4770      	bx	lr
 8009c24:	700a      	strb	r2, [r1, #0]
 8009c26:	2001      	movs	r0, #1
 8009c28:	4770      	bx	lr
	...

08009c2c <fiprintf>:
 8009c2c:	b40e      	push	{r1, r2, r3}
 8009c2e:	b503      	push	{r0, r1, lr}
 8009c30:	4601      	mov	r1, r0
 8009c32:	ab03      	add	r3, sp, #12
 8009c34:	4805      	ldr	r0, [pc, #20]	@ (8009c4c <fiprintf+0x20>)
 8009c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c3a:	6800      	ldr	r0, [r0, #0]
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	f000 f83f 	bl	8009cc0 <_vfiprintf_r>
 8009c42:	b002      	add	sp, #8
 8009c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c48:	b003      	add	sp, #12
 8009c4a:	4770      	bx	lr
 8009c4c:	2000001c 	.word	0x2000001c

08009c50 <abort>:
 8009c50:	b508      	push	{r3, lr}
 8009c52:	2006      	movs	r0, #6
 8009c54:	f000 fa08 	bl	800a068 <raise>
 8009c58:	2001      	movs	r0, #1
 8009c5a:	f7f7 fe17 	bl	800188c <_exit>

08009c5e <_malloc_usable_size_r>:
 8009c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c62:	1f18      	subs	r0, r3, #4
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bfbc      	itt	lt
 8009c68:	580b      	ldrlt	r3, [r1, r0]
 8009c6a:	18c0      	addlt	r0, r0, r3
 8009c6c:	4770      	bx	lr

08009c6e <__sfputc_r>:
 8009c6e:	6893      	ldr	r3, [r2, #8]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	b410      	push	{r4}
 8009c76:	6093      	str	r3, [r2, #8]
 8009c78:	da08      	bge.n	8009c8c <__sfputc_r+0x1e>
 8009c7a:	6994      	ldr	r4, [r2, #24]
 8009c7c:	42a3      	cmp	r3, r4
 8009c7e:	db01      	blt.n	8009c84 <__sfputc_r+0x16>
 8009c80:	290a      	cmp	r1, #10
 8009c82:	d103      	bne.n	8009c8c <__sfputc_r+0x1e>
 8009c84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c88:	f000 b932 	b.w	8009ef0 <__swbuf_r>
 8009c8c:	6813      	ldr	r3, [r2, #0]
 8009c8e:	1c58      	adds	r0, r3, #1
 8009c90:	6010      	str	r0, [r2, #0]
 8009c92:	7019      	strb	r1, [r3, #0]
 8009c94:	4608      	mov	r0, r1
 8009c96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <__sfputs_r>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	4606      	mov	r6, r0
 8009ca0:	460f      	mov	r7, r1
 8009ca2:	4614      	mov	r4, r2
 8009ca4:	18d5      	adds	r5, r2, r3
 8009ca6:	42ac      	cmp	r4, r5
 8009ca8:	d101      	bne.n	8009cae <__sfputs_r+0x12>
 8009caa:	2000      	movs	r0, #0
 8009cac:	e007      	b.n	8009cbe <__sfputs_r+0x22>
 8009cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb2:	463a      	mov	r2, r7
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f7ff ffda 	bl	8009c6e <__sfputc_r>
 8009cba:	1c43      	adds	r3, r0, #1
 8009cbc:	d1f3      	bne.n	8009ca6 <__sfputs_r+0xa>
 8009cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009cc0 <_vfiprintf_r>:
 8009cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc4:	460d      	mov	r5, r1
 8009cc6:	b09d      	sub	sp, #116	@ 0x74
 8009cc8:	4614      	mov	r4, r2
 8009cca:	4698      	mov	r8, r3
 8009ccc:	4606      	mov	r6, r0
 8009cce:	b118      	cbz	r0, 8009cd8 <_vfiprintf_r+0x18>
 8009cd0:	6a03      	ldr	r3, [r0, #32]
 8009cd2:	b90b      	cbnz	r3, 8009cd8 <_vfiprintf_r+0x18>
 8009cd4:	f7fe f900 	bl	8007ed8 <__sinit>
 8009cd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cda:	07d9      	lsls	r1, r3, #31
 8009cdc:	d405      	bmi.n	8009cea <_vfiprintf_r+0x2a>
 8009cde:	89ab      	ldrh	r3, [r5, #12]
 8009ce0:	059a      	lsls	r2, r3, #22
 8009ce2:	d402      	bmi.n	8009cea <_vfiprintf_r+0x2a>
 8009ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ce6:	f7fe fa10 	bl	800810a <__retarget_lock_acquire_recursive>
 8009cea:	89ab      	ldrh	r3, [r5, #12]
 8009cec:	071b      	lsls	r3, r3, #28
 8009cee:	d501      	bpl.n	8009cf4 <_vfiprintf_r+0x34>
 8009cf0:	692b      	ldr	r3, [r5, #16]
 8009cf2:	b99b      	cbnz	r3, 8009d1c <_vfiprintf_r+0x5c>
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f000 f938 	bl	8009f6c <__swsetup_r>
 8009cfc:	b170      	cbz	r0, 8009d1c <_vfiprintf_r+0x5c>
 8009cfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d00:	07dc      	lsls	r4, r3, #31
 8009d02:	d504      	bpl.n	8009d0e <_vfiprintf_r+0x4e>
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	b01d      	add	sp, #116	@ 0x74
 8009d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0e:	89ab      	ldrh	r3, [r5, #12]
 8009d10:	0598      	lsls	r0, r3, #22
 8009d12:	d4f7      	bmi.n	8009d04 <_vfiprintf_r+0x44>
 8009d14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d16:	f7fe f9f9 	bl	800810c <__retarget_lock_release_recursive>
 8009d1a:	e7f3      	b.n	8009d04 <_vfiprintf_r+0x44>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d20:	2320      	movs	r3, #32
 8009d22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d2a:	2330      	movs	r3, #48	@ 0x30
 8009d2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009edc <_vfiprintf_r+0x21c>
 8009d30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d34:	f04f 0901 	mov.w	r9, #1
 8009d38:	4623      	mov	r3, r4
 8009d3a:	469a      	mov	sl, r3
 8009d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d40:	b10a      	cbz	r2, 8009d46 <_vfiprintf_r+0x86>
 8009d42:	2a25      	cmp	r2, #37	@ 0x25
 8009d44:	d1f9      	bne.n	8009d3a <_vfiprintf_r+0x7a>
 8009d46:	ebba 0b04 	subs.w	fp, sl, r4
 8009d4a:	d00b      	beq.n	8009d64 <_vfiprintf_r+0xa4>
 8009d4c:	465b      	mov	r3, fp
 8009d4e:	4622      	mov	r2, r4
 8009d50:	4629      	mov	r1, r5
 8009d52:	4630      	mov	r0, r6
 8009d54:	f7ff ffa2 	bl	8009c9c <__sfputs_r>
 8009d58:	3001      	adds	r0, #1
 8009d5a:	f000 80a7 	beq.w	8009eac <_vfiprintf_r+0x1ec>
 8009d5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d60:	445a      	add	r2, fp
 8009d62:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d64:	f89a 3000 	ldrb.w	r3, [sl]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 809f 	beq.w	8009eac <_vfiprintf_r+0x1ec>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f04f 32ff 	mov.w	r2, #4294967295
 8009d74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d78:	f10a 0a01 	add.w	sl, sl, #1
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	9307      	str	r3, [sp, #28]
 8009d80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d84:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d86:	4654      	mov	r4, sl
 8009d88:	2205      	movs	r2, #5
 8009d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8e:	4853      	ldr	r0, [pc, #332]	@ (8009edc <_vfiprintf_r+0x21c>)
 8009d90:	f7f6 fa1e 	bl	80001d0 <memchr>
 8009d94:	9a04      	ldr	r2, [sp, #16]
 8009d96:	b9d8      	cbnz	r0, 8009dd0 <_vfiprintf_r+0x110>
 8009d98:	06d1      	lsls	r1, r2, #27
 8009d9a:	bf44      	itt	mi
 8009d9c:	2320      	movmi	r3, #32
 8009d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009da2:	0713      	lsls	r3, r2, #28
 8009da4:	bf44      	itt	mi
 8009da6:	232b      	movmi	r3, #43	@ 0x2b
 8009da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dac:	f89a 3000 	ldrb.w	r3, [sl]
 8009db0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009db2:	d015      	beq.n	8009de0 <_vfiprintf_r+0x120>
 8009db4:	9a07      	ldr	r2, [sp, #28]
 8009db6:	4654      	mov	r4, sl
 8009db8:	2000      	movs	r0, #0
 8009dba:	f04f 0c0a 	mov.w	ip, #10
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dc4:	3b30      	subs	r3, #48	@ 0x30
 8009dc6:	2b09      	cmp	r3, #9
 8009dc8:	d94b      	bls.n	8009e62 <_vfiprintf_r+0x1a2>
 8009dca:	b1b0      	cbz	r0, 8009dfa <_vfiprintf_r+0x13a>
 8009dcc:	9207      	str	r2, [sp, #28]
 8009dce:	e014      	b.n	8009dfa <_vfiprintf_r+0x13a>
 8009dd0:	eba0 0308 	sub.w	r3, r0, r8
 8009dd4:	fa09 f303 	lsl.w	r3, r9, r3
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	9304      	str	r3, [sp, #16]
 8009ddc:	46a2      	mov	sl, r4
 8009dde:	e7d2      	b.n	8009d86 <_vfiprintf_r+0xc6>
 8009de0:	9b03      	ldr	r3, [sp, #12]
 8009de2:	1d19      	adds	r1, r3, #4
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	9103      	str	r1, [sp, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	bfbb      	ittet	lt
 8009dec:	425b      	neglt	r3, r3
 8009dee:	f042 0202 	orrlt.w	r2, r2, #2
 8009df2:	9307      	strge	r3, [sp, #28]
 8009df4:	9307      	strlt	r3, [sp, #28]
 8009df6:	bfb8      	it	lt
 8009df8:	9204      	strlt	r2, [sp, #16]
 8009dfa:	7823      	ldrb	r3, [r4, #0]
 8009dfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009dfe:	d10a      	bne.n	8009e16 <_vfiprintf_r+0x156>
 8009e00:	7863      	ldrb	r3, [r4, #1]
 8009e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e04:	d132      	bne.n	8009e6c <_vfiprintf_r+0x1ac>
 8009e06:	9b03      	ldr	r3, [sp, #12]
 8009e08:	1d1a      	adds	r2, r3, #4
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	9203      	str	r2, [sp, #12]
 8009e0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e12:	3402      	adds	r4, #2
 8009e14:	9305      	str	r3, [sp, #20]
 8009e16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009eec <_vfiprintf_r+0x22c>
 8009e1a:	7821      	ldrb	r1, [r4, #0]
 8009e1c:	2203      	movs	r2, #3
 8009e1e:	4650      	mov	r0, sl
 8009e20:	f7f6 f9d6 	bl	80001d0 <memchr>
 8009e24:	b138      	cbz	r0, 8009e36 <_vfiprintf_r+0x176>
 8009e26:	9b04      	ldr	r3, [sp, #16]
 8009e28:	eba0 000a 	sub.w	r0, r0, sl
 8009e2c:	2240      	movs	r2, #64	@ 0x40
 8009e2e:	4082      	lsls	r2, r0
 8009e30:	4313      	orrs	r3, r2
 8009e32:	3401      	adds	r4, #1
 8009e34:	9304      	str	r3, [sp, #16]
 8009e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3a:	4829      	ldr	r0, [pc, #164]	@ (8009ee0 <_vfiprintf_r+0x220>)
 8009e3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e40:	2206      	movs	r2, #6
 8009e42:	f7f6 f9c5 	bl	80001d0 <memchr>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d03f      	beq.n	8009eca <_vfiprintf_r+0x20a>
 8009e4a:	4b26      	ldr	r3, [pc, #152]	@ (8009ee4 <_vfiprintf_r+0x224>)
 8009e4c:	bb1b      	cbnz	r3, 8009e96 <_vfiprintf_r+0x1d6>
 8009e4e:	9b03      	ldr	r3, [sp, #12]
 8009e50:	3307      	adds	r3, #7
 8009e52:	f023 0307 	bic.w	r3, r3, #7
 8009e56:	3308      	adds	r3, #8
 8009e58:	9303      	str	r3, [sp, #12]
 8009e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e5c:	443b      	add	r3, r7
 8009e5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e60:	e76a      	b.n	8009d38 <_vfiprintf_r+0x78>
 8009e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e66:	460c      	mov	r4, r1
 8009e68:	2001      	movs	r0, #1
 8009e6a:	e7a8      	b.n	8009dbe <_vfiprintf_r+0xfe>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	3401      	adds	r4, #1
 8009e70:	9305      	str	r3, [sp, #20]
 8009e72:	4619      	mov	r1, r3
 8009e74:	f04f 0c0a 	mov.w	ip, #10
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e7e:	3a30      	subs	r2, #48	@ 0x30
 8009e80:	2a09      	cmp	r2, #9
 8009e82:	d903      	bls.n	8009e8c <_vfiprintf_r+0x1cc>
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d0c6      	beq.n	8009e16 <_vfiprintf_r+0x156>
 8009e88:	9105      	str	r1, [sp, #20]
 8009e8a:	e7c4      	b.n	8009e16 <_vfiprintf_r+0x156>
 8009e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e90:	4604      	mov	r4, r0
 8009e92:	2301      	movs	r3, #1
 8009e94:	e7f0      	b.n	8009e78 <_vfiprintf_r+0x1b8>
 8009e96:	ab03      	add	r3, sp, #12
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	462a      	mov	r2, r5
 8009e9c:	4b12      	ldr	r3, [pc, #72]	@ (8009ee8 <_vfiprintf_r+0x228>)
 8009e9e:	a904      	add	r1, sp, #16
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f7fd fbd7 	bl	8007654 <_printf_float>
 8009ea6:	4607      	mov	r7, r0
 8009ea8:	1c78      	adds	r0, r7, #1
 8009eaa:	d1d6      	bne.n	8009e5a <_vfiprintf_r+0x19a>
 8009eac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009eae:	07d9      	lsls	r1, r3, #31
 8009eb0:	d405      	bmi.n	8009ebe <_vfiprintf_r+0x1fe>
 8009eb2:	89ab      	ldrh	r3, [r5, #12]
 8009eb4:	059a      	lsls	r2, r3, #22
 8009eb6:	d402      	bmi.n	8009ebe <_vfiprintf_r+0x1fe>
 8009eb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009eba:	f7fe f927 	bl	800810c <__retarget_lock_release_recursive>
 8009ebe:	89ab      	ldrh	r3, [r5, #12]
 8009ec0:	065b      	lsls	r3, r3, #25
 8009ec2:	f53f af1f 	bmi.w	8009d04 <_vfiprintf_r+0x44>
 8009ec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ec8:	e71e      	b.n	8009d08 <_vfiprintf_r+0x48>
 8009eca:	ab03      	add	r3, sp, #12
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	462a      	mov	r2, r5
 8009ed0:	4b05      	ldr	r3, [pc, #20]	@ (8009ee8 <_vfiprintf_r+0x228>)
 8009ed2:	a904      	add	r1, sp, #16
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f7fd fe55 	bl	8007b84 <_printf_i>
 8009eda:	e7e4      	b.n	8009ea6 <_vfiprintf_r+0x1e6>
 8009edc:	0800a33a 	.word	0x0800a33a
 8009ee0:	0800a344 	.word	0x0800a344
 8009ee4:	08007655 	.word	0x08007655
 8009ee8:	08009c9d 	.word	0x08009c9d
 8009eec:	0800a340 	.word	0x0800a340

08009ef0 <__swbuf_r>:
 8009ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef2:	460e      	mov	r6, r1
 8009ef4:	4614      	mov	r4, r2
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	b118      	cbz	r0, 8009f02 <__swbuf_r+0x12>
 8009efa:	6a03      	ldr	r3, [r0, #32]
 8009efc:	b90b      	cbnz	r3, 8009f02 <__swbuf_r+0x12>
 8009efe:	f7fd ffeb 	bl	8007ed8 <__sinit>
 8009f02:	69a3      	ldr	r3, [r4, #24]
 8009f04:	60a3      	str	r3, [r4, #8]
 8009f06:	89a3      	ldrh	r3, [r4, #12]
 8009f08:	071a      	lsls	r2, r3, #28
 8009f0a:	d501      	bpl.n	8009f10 <__swbuf_r+0x20>
 8009f0c:	6923      	ldr	r3, [r4, #16]
 8009f0e:	b943      	cbnz	r3, 8009f22 <__swbuf_r+0x32>
 8009f10:	4621      	mov	r1, r4
 8009f12:	4628      	mov	r0, r5
 8009f14:	f000 f82a 	bl	8009f6c <__swsetup_r>
 8009f18:	b118      	cbz	r0, 8009f22 <__swbuf_r+0x32>
 8009f1a:	f04f 37ff 	mov.w	r7, #4294967295
 8009f1e:	4638      	mov	r0, r7
 8009f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	6922      	ldr	r2, [r4, #16]
 8009f26:	1a98      	subs	r0, r3, r2
 8009f28:	6963      	ldr	r3, [r4, #20]
 8009f2a:	b2f6      	uxtb	r6, r6
 8009f2c:	4283      	cmp	r3, r0
 8009f2e:	4637      	mov	r7, r6
 8009f30:	dc05      	bgt.n	8009f3e <__swbuf_r+0x4e>
 8009f32:	4621      	mov	r1, r4
 8009f34:	4628      	mov	r0, r5
 8009f36:	f7ff fd99 	bl	8009a6c <_fflush_r>
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	d1ed      	bne.n	8009f1a <__swbuf_r+0x2a>
 8009f3e:	68a3      	ldr	r3, [r4, #8]
 8009f40:	3b01      	subs	r3, #1
 8009f42:	60a3      	str	r3, [r4, #8]
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	6022      	str	r2, [r4, #0]
 8009f4a:	701e      	strb	r6, [r3, #0]
 8009f4c:	6962      	ldr	r2, [r4, #20]
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d004      	beq.n	8009f5e <__swbuf_r+0x6e>
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	07db      	lsls	r3, r3, #31
 8009f58:	d5e1      	bpl.n	8009f1e <__swbuf_r+0x2e>
 8009f5a:	2e0a      	cmp	r6, #10
 8009f5c:	d1df      	bne.n	8009f1e <__swbuf_r+0x2e>
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4628      	mov	r0, r5
 8009f62:	f7ff fd83 	bl	8009a6c <_fflush_r>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d0d9      	beq.n	8009f1e <__swbuf_r+0x2e>
 8009f6a:	e7d6      	b.n	8009f1a <__swbuf_r+0x2a>

08009f6c <__swsetup_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4b29      	ldr	r3, [pc, #164]	@ (800a014 <__swsetup_r+0xa8>)
 8009f70:	4605      	mov	r5, r0
 8009f72:	6818      	ldr	r0, [r3, #0]
 8009f74:	460c      	mov	r4, r1
 8009f76:	b118      	cbz	r0, 8009f80 <__swsetup_r+0x14>
 8009f78:	6a03      	ldr	r3, [r0, #32]
 8009f7a:	b90b      	cbnz	r3, 8009f80 <__swsetup_r+0x14>
 8009f7c:	f7fd ffac 	bl	8007ed8 <__sinit>
 8009f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f84:	0719      	lsls	r1, r3, #28
 8009f86:	d422      	bmi.n	8009fce <__swsetup_r+0x62>
 8009f88:	06da      	lsls	r2, r3, #27
 8009f8a:	d407      	bmi.n	8009f9c <__swsetup_r+0x30>
 8009f8c:	2209      	movs	r2, #9
 8009f8e:	602a      	str	r2, [r5, #0]
 8009f90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f94:	81a3      	strh	r3, [r4, #12]
 8009f96:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9a:	e033      	b.n	800a004 <__swsetup_r+0x98>
 8009f9c:	0758      	lsls	r0, r3, #29
 8009f9e:	d512      	bpl.n	8009fc6 <__swsetup_r+0x5a>
 8009fa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fa2:	b141      	cbz	r1, 8009fb6 <__swsetup_r+0x4a>
 8009fa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fa8:	4299      	cmp	r1, r3
 8009faa:	d002      	beq.n	8009fb2 <__swsetup_r+0x46>
 8009fac:	4628      	mov	r0, r5
 8009fae:	f7fe ff07 	bl	8008dc0 <_free_r>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fb6:	89a3      	ldrh	r3, [r4, #12]
 8009fb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009fbc:	81a3      	strh	r3, [r4, #12]
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	6063      	str	r3, [r4, #4]
 8009fc2:	6923      	ldr	r3, [r4, #16]
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	89a3      	ldrh	r3, [r4, #12]
 8009fc8:	f043 0308 	orr.w	r3, r3, #8
 8009fcc:	81a3      	strh	r3, [r4, #12]
 8009fce:	6923      	ldr	r3, [r4, #16]
 8009fd0:	b94b      	cbnz	r3, 8009fe6 <__swsetup_r+0x7a>
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fdc:	d003      	beq.n	8009fe6 <__swsetup_r+0x7a>
 8009fde:	4621      	mov	r1, r4
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	f000 f883 	bl	800a0ec <__smakebuf_r>
 8009fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fea:	f013 0201 	ands.w	r2, r3, #1
 8009fee:	d00a      	beq.n	800a006 <__swsetup_r+0x9a>
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	60a2      	str	r2, [r4, #8]
 8009ff4:	6962      	ldr	r2, [r4, #20]
 8009ff6:	4252      	negs	r2, r2
 8009ff8:	61a2      	str	r2, [r4, #24]
 8009ffa:	6922      	ldr	r2, [r4, #16]
 8009ffc:	b942      	cbnz	r2, 800a010 <__swsetup_r+0xa4>
 8009ffe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a002:	d1c5      	bne.n	8009f90 <__swsetup_r+0x24>
 800a004:	bd38      	pop	{r3, r4, r5, pc}
 800a006:	0799      	lsls	r1, r3, #30
 800a008:	bf58      	it	pl
 800a00a:	6962      	ldrpl	r2, [r4, #20]
 800a00c:	60a2      	str	r2, [r4, #8]
 800a00e:	e7f4      	b.n	8009ffa <__swsetup_r+0x8e>
 800a010:	2000      	movs	r0, #0
 800a012:	e7f7      	b.n	800a004 <__swsetup_r+0x98>
 800a014:	2000001c 	.word	0x2000001c

0800a018 <_raise_r>:
 800a018:	291f      	cmp	r1, #31
 800a01a:	b538      	push	{r3, r4, r5, lr}
 800a01c:	4605      	mov	r5, r0
 800a01e:	460c      	mov	r4, r1
 800a020:	d904      	bls.n	800a02c <_raise_r+0x14>
 800a022:	2316      	movs	r3, #22
 800a024:	6003      	str	r3, [r0, #0]
 800a026:	f04f 30ff 	mov.w	r0, #4294967295
 800a02a:	bd38      	pop	{r3, r4, r5, pc}
 800a02c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a02e:	b112      	cbz	r2, 800a036 <_raise_r+0x1e>
 800a030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a034:	b94b      	cbnz	r3, 800a04a <_raise_r+0x32>
 800a036:	4628      	mov	r0, r5
 800a038:	f000 f830 	bl	800a09c <_getpid_r>
 800a03c:	4622      	mov	r2, r4
 800a03e:	4601      	mov	r1, r0
 800a040:	4628      	mov	r0, r5
 800a042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a046:	f000 b817 	b.w	800a078 <_kill_r>
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d00a      	beq.n	800a064 <_raise_r+0x4c>
 800a04e:	1c59      	adds	r1, r3, #1
 800a050:	d103      	bne.n	800a05a <_raise_r+0x42>
 800a052:	2316      	movs	r3, #22
 800a054:	6003      	str	r3, [r0, #0]
 800a056:	2001      	movs	r0, #1
 800a058:	e7e7      	b.n	800a02a <_raise_r+0x12>
 800a05a:	2100      	movs	r1, #0
 800a05c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a060:	4620      	mov	r0, r4
 800a062:	4798      	blx	r3
 800a064:	2000      	movs	r0, #0
 800a066:	e7e0      	b.n	800a02a <_raise_r+0x12>

0800a068 <raise>:
 800a068:	4b02      	ldr	r3, [pc, #8]	@ (800a074 <raise+0xc>)
 800a06a:	4601      	mov	r1, r0
 800a06c:	6818      	ldr	r0, [r3, #0]
 800a06e:	f7ff bfd3 	b.w	800a018 <_raise_r>
 800a072:	bf00      	nop
 800a074:	2000001c 	.word	0x2000001c

0800a078 <_kill_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	4d07      	ldr	r5, [pc, #28]	@ (800a098 <_kill_r+0x20>)
 800a07c:	2300      	movs	r3, #0
 800a07e:	4604      	mov	r4, r0
 800a080:	4608      	mov	r0, r1
 800a082:	4611      	mov	r1, r2
 800a084:	602b      	str	r3, [r5, #0]
 800a086:	f7f7 fbf1 	bl	800186c <_kill>
 800a08a:	1c43      	adds	r3, r0, #1
 800a08c:	d102      	bne.n	800a094 <_kill_r+0x1c>
 800a08e:	682b      	ldr	r3, [r5, #0]
 800a090:	b103      	cbz	r3, 800a094 <_kill_r+0x1c>
 800a092:	6023      	str	r3, [r4, #0]
 800a094:	bd38      	pop	{r3, r4, r5, pc}
 800a096:	bf00      	nop
 800a098:	200004f4 	.word	0x200004f4

0800a09c <_getpid_r>:
 800a09c:	f7f7 bbde 	b.w	800185c <_getpid>

0800a0a0 <__swhatbuf_r>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a8:	2900      	cmp	r1, #0
 800a0aa:	b096      	sub	sp, #88	@ 0x58
 800a0ac:	4615      	mov	r5, r2
 800a0ae:	461e      	mov	r6, r3
 800a0b0:	da0d      	bge.n	800a0ce <__swhatbuf_r+0x2e>
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a0b8:	f04f 0100 	mov.w	r1, #0
 800a0bc:	bf14      	ite	ne
 800a0be:	2340      	movne	r3, #64	@ 0x40
 800a0c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	6031      	str	r1, [r6, #0]
 800a0c8:	602b      	str	r3, [r5, #0]
 800a0ca:	b016      	add	sp, #88	@ 0x58
 800a0cc:	bd70      	pop	{r4, r5, r6, pc}
 800a0ce:	466a      	mov	r2, sp
 800a0d0:	f000 f848 	bl	800a164 <_fstat_r>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	dbec      	blt.n	800a0b2 <__swhatbuf_r+0x12>
 800a0d8:	9901      	ldr	r1, [sp, #4]
 800a0da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a0de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a0e2:	4259      	negs	r1, r3
 800a0e4:	4159      	adcs	r1, r3
 800a0e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0ea:	e7eb      	b.n	800a0c4 <__swhatbuf_r+0x24>

0800a0ec <__smakebuf_r>:
 800a0ec:	898b      	ldrh	r3, [r1, #12]
 800a0ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0f0:	079d      	lsls	r5, r3, #30
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	d507      	bpl.n	800a108 <__smakebuf_r+0x1c>
 800a0f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	6123      	str	r3, [r4, #16]
 800a100:	2301      	movs	r3, #1
 800a102:	6163      	str	r3, [r4, #20]
 800a104:	b003      	add	sp, #12
 800a106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a108:	ab01      	add	r3, sp, #4
 800a10a:	466a      	mov	r2, sp
 800a10c:	f7ff ffc8 	bl	800a0a0 <__swhatbuf_r>
 800a110:	9f00      	ldr	r7, [sp, #0]
 800a112:	4605      	mov	r5, r0
 800a114:	4639      	mov	r1, r7
 800a116:	4630      	mov	r0, r6
 800a118:	f7fe fec6 	bl	8008ea8 <_malloc_r>
 800a11c:	b948      	cbnz	r0, 800a132 <__smakebuf_r+0x46>
 800a11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a122:	059a      	lsls	r2, r3, #22
 800a124:	d4ee      	bmi.n	800a104 <__smakebuf_r+0x18>
 800a126:	f023 0303 	bic.w	r3, r3, #3
 800a12a:	f043 0302 	orr.w	r3, r3, #2
 800a12e:	81a3      	strh	r3, [r4, #12]
 800a130:	e7e2      	b.n	800a0f8 <__smakebuf_r+0xc>
 800a132:	89a3      	ldrh	r3, [r4, #12]
 800a134:	6020      	str	r0, [r4, #0]
 800a136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a13a:	81a3      	strh	r3, [r4, #12]
 800a13c:	9b01      	ldr	r3, [sp, #4]
 800a13e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a142:	b15b      	cbz	r3, 800a15c <__smakebuf_r+0x70>
 800a144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a148:	4630      	mov	r0, r6
 800a14a:	f000 f81d 	bl	800a188 <_isatty_r>
 800a14e:	b128      	cbz	r0, 800a15c <__smakebuf_r+0x70>
 800a150:	89a3      	ldrh	r3, [r4, #12]
 800a152:	f023 0303 	bic.w	r3, r3, #3
 800a156:	f043 0301 	orr.w	r3, r3, #1
 800a15a:	81a3      	strh	r3, [r4, #12]
 800a15c:	89a3      	ldrh	r3, [r4, #12]
 800a15e:	431d      	orrs	r5, r3
 800a160:	81a5      	strh	r5, [r4, #12]
 800a162:	e7cf      	b.n	800a104 <__smakebuf_r+0x18>

0800a164 <_fstat_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	4d07      	ldr	r5, [pc, #28]	@ (800a184 <_fstat_r+0x20>)
 800a168:	2300      	movs	r3, #0
 800a16a:	4604      	mov	r4, r0
 800a16c:	4608      	mov	r0, r1
 800a16e:	4611      	mov	r1, r2
 800a170:	602b      	str	r3, [r5, #0]
 800a172:	f7f7 fbdb 	bl	800192c <_fstat>
 800a176:	1c43      	adds	r3, r0, #1
 800a178:	d102      	bne.n	800a180 <_fstat_r+0x1c>
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	b103      	cbz	r3, 800a180 <_fstat_r+0x1c>
 800a17e:	6023      	str	r3, [r4, #0]
 800a180:	bd38      	pop	{r3, r4, r5, pc}
 800a182:	bf00      	nop
 800a184:	200004f4 	.word	0x200004f4

0800a188 <_isatty_r>:
 800a188:	b538      	push	{r3, r4, r5, lr}
 800a18a:	4d06      	ldr	r5, [pc, #24]	@ (800a1a4 <_isatty_r+0x1c>)
 800a18c:	2300      	movs	r3, #0
 800a18e:	4604      	mov	r4, r0
 800a190:	4608      	mov	r0, r1
 800a192:	602b      	str	r3, [r5, #0]
 800a194:	f7f7 fbda 	bl	800194c <_isatty>
 800a198:	1c43      	adds	r3, r0, #1
 800a19a:	d102      	bne.n	800a1a2 <_isatty_r+0x1a>
 800a19c:	682b      	ldr	r3, [r5, #0]
 800a19e:	b103      	cbz	r3, 800a1a2 <_isatty_r+0x1a>
 800a1a0:	6023      	str	r3, [r4, #0]
 800a1a2:	bd38      	pop	{r3, r4, r5, pc}
 800a1a4:	200004f4 	.word	0x200004f4

0800a1a8 <_init>:
 800a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1aa:	bf00      	nop
 800a1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ae:	bc08      	pop	{r3}
 800a1b0:	469e      	mov	lr, r3
 800a1b2:	4770      	bx	lr

0800a1b4 <_fini>:
 800a1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b6:	bf00      	nop
 800a1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ba:	bc08      	pop	{r3}
 800a1bc:	469e      	mov	lr, r3
 800a1be:	4770      	bx	lr
